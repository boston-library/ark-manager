---
http_interactions:
- request:
    method: get
    uri: http://127.0.0.1:8888/devstoreaccount1/derivatives/texts/bpl-dev:8c97kq405/text_plain.txt
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - BPL-Ark-Manager/2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Azurite-Blob/3.20.1
      Last-Modified:
      - Wed, 18 Sep 2024 13:51:33 GMT
      X-Ms-Creation-Time:
      - Wed, 18 Sep 2024 13:51:33 GMT
      Content-Length:
      - '254041'
      Content-Type:
      - text/plain
      Etag:
      - '"0x2251F792420B8C0"'
      Content-Md5:
      - sAGWLMXD9tW7f7j+p+zAQg==
      Content-Disposition:
      - attachment; filename="sn91057075_1884110801.txt"; filename*=UTF-8''sn91057075_1884110801.txt
      X-Ms-Blob-Type:
      - BlockBlob
      X-Ms-Lease-State:
      - available
      X-Ms-Lease-Status:
      - unlocked
      X-Ms-Request-Id:
      - f0935bd7-af0c-4668-a294-569fae6b68f4
      X-Ms-Version:
      - '2021-10-04'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 18 Sep 2024 14:44:23 GMT
      X-Ms-Server-Encrypted:
      - 'true'
      X-Ms-Blob-Content-Md5:
      - sAGWLMXD9tW7f7j+p+zAQg==
      Connection:
      - keep-alive
      Keep-Alive:
      - timeout=5
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        VOL. 6. NO. 19.

JOSEPH H. COTTON

Interviewed as to the Causes of His

Defeat for the Senatorship.

HE MADE NO TRADE WITH LODGE.

The Republicans Thought to Defeat Col.
Trull by Making a Combination
with the People's Party-

"Glad to see you,” said Mr. Joseph H.
Cotton to the representative of the En
terprise as the latter entered Mr. Cot
ton's law office in City square, Wednes
day afternoon.
“Thanks” said the reporter. “I
came to talk over the political contest
of Tuesday.”
“Well you see I’m happy,” said he
laughingly. “I’m not disgruntled and
have no particular fault to find.”
"How do you account for your defeat
in rhe senatorial cop test?” inquired the
reporter.

"Of course I did not get votes enough,
that’s certain. You see lam a member
of the People’s Party. That organization
nominated me as a candidate for State
Senator in order to keep the party solid.
I was endorsed practically by the Repub
licans and received a good vote from
them. The People’s Party only threw

about 300 votes, which was no where
near its strength of three or more weeks
ago. Parson's letter, I think, had an ef
fect on a large number of the People’s
Party, and when election day came they
just went back to their former
parties, most of those returning, voting
for Mr. Cleveland. It is an apparent fact
that the People’s Party did not throw the
vote calculated upon.

"Did you make any trade to sell out
the People's Party?” said the reporter.
"1 made no trade,” replied Mr. Cot
ton. "The whole amount of it is this. The
Republicans knew that they could not
elect a senatorial candidate and thought
it possible that they might elect me by a
combination, What 1 mean by a com
bination is this: I had been nominated
by the People’s Party and was less ob
jectionable to the Republicans than a
Democrat. I received 2100 votes in this
district and Governor Robinson received
2755: so you can see I got a few Repub
lican votes. The story that I sold out
was concocted by the Democrats to se
cure if possible, my defeat. We, as
members of the People's Party, stood up
manfully and were counted. What
could we expect by voting for General
Butler? We had a principle and we
stood firmly by that principle and 1 be
lieve those 300 men. who deposited a
Butler and West ticket in the ballot box,
should at least be given credit for hon
esty and sincerity of purpose. j>ut the sto
ry of my selling out had the desired effect.
Many Republicans believed it and conse
quently did not vote for me. Said one gen
tleman to me today, ‘Mr. Cotton, I did
not vote for you for I thought
you had sold out, I>ut I know* now that
you didn't and I wish I had voted for
you.’ I told him it was too late and the
contest was over. Here is another side
to the matter. 1 was a People's Party
candidate and my opponent was a Dem
ocratic nominee. Now 1 suppose many
Republicans argued in this way: ‘I
don't believe in the People’s Party and
don't purpose electing their man for
Senator. I had rather see a Democrat
elected than a Butler man.’ This, I
think, looks natural, and thus it was
that I was defeated. I take my defeat
very easy, as you can judge. I have no
enmity against any man. but 1 distinctly
wish it to be understood that there was
no selling out. The Enterprise has not
treated me fairly in this contest, and the
articles it published of course aided in
securing my defeat.”
“ How about Gen. Butler?” asked the
reporter.
" He is the coming man, and if he lives
will be elected President of these United
States in 188 S, or at least I sincerely
•hope such will be the result.”
The Enterprise man then hade Mr.
Cotton good afternoon.

Mystic Sewing Circle Fair.
The Mystic Sewing Circle held a sale
and dance in Monument Hall, on Wed
nesday, Thursday and Friday evenings.
The attendance was good. The differ
ent departments were in competent
hands. The following named ladies
had charge. Fancy table, Mesdames
Knox and Cass; apron table. Mesdames
Ward and Baxter; vegetable table, Mes
dames Perry and Page; confectionery
table,Mesdames Phipps and Norwood; re
freshment table,Mesdames Nutter, Eccles
and Burrows; bundle table, Mesdames
Lowell and Brown; wheel of fortune,
Mesdames Foss and Swift: grab box,
Mesdames Hichbom and Heath; peanuts
and popcorn, Misses Titus and Guern
sey. who were in costume,
9 •
Jackson Guards Ball.
Next Friday evening, the 14th inst.,
the Jackson Guards will give their eight
eenth annual ball in Monument Hall.
That this organization has many friends
is well known, and that there will be a

mrlestown enterprise

large attendance is equally certain.
Every detail has been carefully arranged,
and the success of the affair is assured.
There will be many military gentlemen
present, and the ball room will have a
brilliant appearance.

MR. AND MRS. E. L. PILSBURY.

Receive 500 Friends in their New Home
on Baldwin Street.

Lines of carriages stood on Baldwin
street Wednesday evening in the vicinity
of the residence of Mr. E. L. Pilsbury,
whose house was illuminated, presenting
a more than ordinary appearance. In
side was a large and fashionable gather
ing of ladies and gentlemen who had
come to pay their respects to Mr. and
Mrs. Pilsbury, who were recently mar
ried in Bath, Me. During the evening at
least five hundred persons were present.
Above the hum of voices could be heard
the sweet and entrancing strains of
music furnished by J. Howard Richard
son’s orchestra. The ushers were Messrs.
T. IL Hall, Joseph IL Gleason, R. M.
Kendall, C. A. Rowell, and Capt. L. H.
Bateman of the Charlestown Cadets.
Space would be wanting to give the
names of those who attended the recep
tion. Two rooms in the second story
were required to exhibit the wedding
presents, which were elegant and costly.
There was an abundance of silver
ware of unique and pretty designs,
while upon the walls hung handsomely
framed pictures. A fine piano stood
in one of the rooms and in the other sev
eral pieces of carved furniture. There
appeared to be an air of royalty about
the place so extensive was the display of
choice and desirable articles, useful and
ornamental in character. Everyone was
happy; the merry laughter of the ladies
rang Si rough the apartments as they in
spected the wedding gifts. The gentle
men, too, entered heartily into the spirit
of the occasion, and Mr. and Mrs. Pills
bury were warmly congratulated by all.
The rooms in the first story were devoted
to a table upon which was placed a fine
collation which was partaken of with a
zest. The toilets of the ladies were ele
gant. Ata late hour the company de
parted. Mrs. Pillsbury was attired in a
costly white satin costume. She is a
handsome and intelligent looking lady,
and is sure to make many friends in
this district. Certainly Mr. Pillsbury
is to be congratulated in possessing so
fine a lady for a wife, and Mrs. Pillsbury
should feel proud in having so good and
popular a gentleman for a husband.

THE GAS SHUT OFF

And Three Thousand People Sit in Dark
ness in the Trinity Ohurch.

As the representative of the Enter
prise approached the Trinity Church on
High street, Sunday evening last, he
heard the sound of joyful music and saw
the fine edifice brilliantly lighted. He
entered the building and was mounting
the stairs when suddenly the lights were
extinguished and he stood in darkness.
The reporter naturally expected there
would he a rush of frightened people
down the stairs, and all sorts of ideas of
the direful results in such an event
passed rapidly through his mind. There
was no panic, however, but a few per
sons groped their way down the stairs
and left the church. On investigation
it appeared that there had been some
trouble with the gas, the pipe near the
meter being clogged and Mr. Callahan,
an employee of the Charlestown Gas
Company, was at work removing the
difficulty. Finding that it might be
necessary to shut off the gas. he sent
word to the pastor, who was seated near
the pulpit, of this fact. Rev.' R. L.
Greene, on receiving this information, im
mediately stated to the audience, at
least numbering 3000, that there was
a slight trouble with the gas pipe which
might require the shutting off of the
lights for a few minutes, and that if such
a thing should occur the people need
have no fear, as there was no danger.
He had hardly concluded his remarks
when the building was enveloped in
darkness. The audience remained very
quiet and orderly. Mr. George B. Neal,
treasurer of the Gas Company, and Mr.
Brown were present. The former ran
to the house of Engine No. 27 for lights,
and members of that company came to
the church with lanterns, but they were
not needed. The gas was now turned on
and the odor became very disagreeable, it
being some time before all the jets were
lighted. The only person greatly affected
was Mrs. William Smith, residing on
Green street, who had to be carried out
of the church, but soon recovered.
The services of praise were then re
sumed. Miss Fox sang a solo and Miss
Annie Parks finely rendered a cornet
solo. There was also singing by the
Alpine Quartette, church choir and
chorus, assisted by an orchestra and the
organ. The pastor preached an interest
ing sermon on the subject, “Ditches dug
by a political King,” but politics were
not discussed.

Presentation to a Patrolman.

Members of St. Mary’s Y. M. C. T.
Society this week presented Patrolman
Thomas F. Moore with a helmet, a pair
of twisters and an ivory handled Smith
A Wesson revolver. Mr. Moore was re
cently appointed a member of the police
department and assigned for duty at
Station 15. He is a member of St.
Mary’s Society.

CHARLESTOWN, NOVEMBER 8, 1884.

TUESDAY’S BATTLE.

The Democrats Make a Clean Sweep

in the District

THE STORY OF THE ELECTION RETURNS.

The campaign which closed on Tues
day was one of the most peculiar ever
witnessed in this district. Old residents
declare they never before witnessed a
Presidential contest where the head of
the ticket appeared to receive so little
attention. The Republicans knew the
district was strongly Democratic, and
they devoted all their energies to the
election of Henry Cabot Lodge for Con
gress. All kinds of trades w ere talked
over and resorted to; money without
stint was plentifully placed where it
might do good, be it ever so small; and
all the artifices and wiles of the practiced
politician were brought into play to
bring about the much desired result. But
all to no purpose. The Democrats al]
through the campaign never were aroused
to the full meaning of the situation,
only the active men upon the several
ward committees being fully alive to the
importance of the campaign. The Dem
ocrats felt that all the local nominees
were fully able to care for themselves,
and they w ere ready to make a vigorous
fight on the Congressman. They had a
candidate who was above criticism, and
although he had no barrel to provide the
sinews of war, they themselves were
ready to stand in the breach, and if de
feat must come, to go down with colors
flying. The Independents waged a vig
orous warfare, and from the first they
made their presence known in an unmis
takable manner. The final result showed
that without their opposition to Lodge,
the returns would have been of a differ
ent nature. The same can be truthfully
said of the Prohibitionists, who w ere not
slow in condemning the methods of Mr.
Lovering's opponents. Another disturb
ing element was the organization of the
so-called People’s Party, which started
out with a loud flare of trumpets and
ended in such a miserable fizzle. By
Tuesday morning it was well understood
that the party was only a Blaine side
show, engineered in the interest of the
Republican party, and as a result the
bottom dropped completely out.
At the polls there was a large variety
of tickets, the Democratic, Republican,
Prohibition, Independent, Republican
and People’s parties having straight
ballots, with an infinite variety of com
binations upon each of these. The in
terest centered in the congressional and
senatorial struggle. It soon became
apparent that there was a combination
between thhe Cotton and Lodge mana
gers, as the Lodge workers were
invariably supplied with Cotton bal
lots, ami vice versa. In the strong Re
publican precincts, Cotton was cut un
mercifully by the Republican voters
early in the day, w hich so angered his
workers that they charged Lodge’s
lieutenants with playing double. It
was very evident that the latter were
only solicitous for the success of their
favorite, and so confident were they of
success that they could be found in all
the barrooms of the district idling away
their time and loudly offering bets upon
Lovering's defeat. There was a little
army of them, made up of employees
from the Navy Yard, postal service, and
that class of rallyers whose miserable
services can always be purchased upon
election days. The candidature of Colo
nel Trull was a complete walk-over, no
other candidate ever before leaving his
opponent behind to the tune of I Soo ma
jority. The Representative tight in
Wards 3 and 5 was an easy victory. In
Ward 4, Oliver Prime was obliged to do
his level best in order to overcome the
ordinary Republican majority. The re
sult as printed below shows that the
representation from this district is the
, same as last year.

PRESIDENT. GOVERNOR.
Deni. Rep. l”s. p. Dem.Rep.P’s. P.
2s“£ K w a 5P
3 S ; s, 5 1 &#38; 3.
• • . • • •
Ward Three.
Precinct 1.... 214 207 20 11 192 235 19 it
2.... 227 246 20 12 200 281 18 10
3.... 395 217 29 22 331 251 30 21
4....482 109 75 4 474 110 75 2
Totals.... 1288 779 144 4S 1197 877 142 44
Ward Four.
Precinct 1....208 272 29 10 iso 303 20 11
2....272 189 40 10 258 210 39 18
3.. .308 192 60 11 302 165 (Ml 10
4.... 198 277 31 28 183 301 30 23
Totals 986 930 166 59 923 979 155 62
Ward Five.
Precinct 1.... 195 300 9 15 176 328 6 13
3....980 177 26 4 314 197 26 3
3.... 315 181 30 10 297 203 30 8
4....390 168 20 15 375 171 18 13
Total 1230 826 85 44 1162 902 80 37
THE SENATORSHIP.
Trull, Cotton. Perrin,
Ward Three. Dem. R.amlP. Pr. Scat,
Precinct 1....303 123 12 —
2....303 176 14 —
3....409 164 28 —
4....496 157 2 —
Ward Four.
Precinct 1....234 248 21 —
2....260 230 11 —
3....329 193 10 —
4....244 258 25 —
Ward Five.
Precinct 1....278 191 14 1
2....355 162 8 15
3....354 169 9 —
4....396 124 9 —
Total 3961 2195 163 16

THE REPRESENTATIVES.

Ward Three.
Precinct 1 2 3 4 Total
P. T. Barry, D. A’ P 181 218 :m> 557 1342
Geo. A. Sanderson. D.... 195 237 359 519 1310
Anthonv Waterman R .242 253 207 74 776
Hiram f. Nason. R 2:U 251 191 68 744
F. C. Danforth. Pr 0.... 7 12 23 6 48
Richard Starks, Pr 0.... 7 11 24 3 45
J. F. Sundberg. Pe0.... 17 19 28 75 139
Ward Four.
Precinct 1 2 3 4 Total
Oliver Prime. D. A P. 186 320 :«u 229 1036
Geo. N. Fisher. Il 322 182 181 282 967
Ira Hammond. Pro 9 11 10 24 74
Ward Five.
Precinct 1 2 3 4 Total
John R. Murphv. D.X P. 157 .340 324 391 1212
Philip J. Doherty. D.X P.l P 45 319 385 1193
Aiuoe Brown. R 332 189 205 174 000
Edwin D. Sibley 345 192 204 179 920
C. H. Coon, Pro... 15 2 1 13 31
H. H. Packard, Pr 0.... 13 3 1 4 21

Ezra J. Trull, who was re-elected Sena
tor from this district on Tuesday, was
bom in Boston in 1842. He was educated
in the public schools and graduated from
the High School. For two years he was
engaged in his father's office, at the end
of which time he enlisted in Co. A.
Thirty-first Regiment, Massachusetts
Volunteers, and served as private ami
non-commissioned officer for fourteen
months. In .Inly. 1861, he left Boston
with his regiment for the seat of war,
believing that it was the duty of every
young, able-bodied man to defend the
flag of his country. In 1862 Governor
Andrew commissioned him captain of
Co. G, Thirty-ninth Regiment, M. V. M.,
and in that position, he served until the
rebellion was crushed. Participating in
all the battles under General Grant,
when he was in command of the Army
of the Potomac, he was taken prisoner
at the Weldon railroad, in front of
Petersburg, Va., in August. 1864. He
suffered imprisonment in Richmond. Va.,
Salisbury, N. C., and Danville. Va.,
where so many of the Union prisoners
died. February 22, 1865, he was ex
changed with other prisoners,and leaving
he came home, but his stay
was short as he rejoined his regiment
and served until mustered out in July,
1865. Thus was four years of his life
passed in defense of the Union. For
nearly twenty-live years he has been an
active member of the military, ami after
serving as adjutant, major and lieuten
ant colonel, he was elected colonel of
the Fifth Regiment. M. V. M. During
the seven years he was in command of
this regiment the organization was great
ly improved in various ways, taking a
high position among the regiments of
the country.
In 1873 Colonel Trull became actively
engaged in politics, and in that year he
was elected a member of the Charlestown
Common Council, being the only candi
date elected who was on the Childs tick
et. Jonathan stone was elected mayor
that year, and during his connection
with the lower branch of the City govern
ment Colonel Trull always voted in flu*
interests of the people. in 1875,
again in 1876 and still again in
1883 he was a member of the Boston
Common Council. In the fall of last
year he was nominated for Senator by
the Democracy of this district and con
tested with John Turner, Esq., the Re
publican nominee, for the election, and
was successful, being elected by a ma
jority of 824 votes. His re-election last
Tuesday to again represent this dis
trict in the higher branch of the legisla
ture and his handsome majority of 1766
votes over Mr. J. H. Cotton, are too
fresh in the minds of the public to need
repeating here. Suffice it to say that as
a Democrat Senator Trull has ever been
true to the interests of his constiuents
and advocated those principles of the
Democratic party which alone can give
stability ami perpetuity to our free in
stitutions.

Patrick T. l arry, re-elected to the
House of Representatives for a second
term, was born in Charlestown in 1856
and attended school in the Winthrop
district until 1860. He is a clothing
cutter by occupation, being connected
with the well-known house of Burdett.
Young &#38; Ingalls. He has always been

actively identified with the temperance
movement and was president of the St.
Mary's Society in I*7’.’. For the past three
years he has been a member of the
Ward 3 Democratic Committee. and
last year tlu* young meh of the party
placed him in nomination for Represen
tive honors, giving him a hearty sup
port. So well satistied were they with
his advocacy of the Five-Cent Fare bill
and other popular measures that his re
election was 1 nt a matter of course.

Mr. Philip J. Doherty is another
Charlestown boy who has won laurels
under the shadow ot his own home.
Born in Charlestown in 1856. he is a
graduate of our schools. Harvard being
the scene of his first triumph, where he
graduated in 1870. He continued his
studies in the High School, where he
received his diploma in IS7L From
thence he went to the Boston University
Law School, graduating in 1876. Ilewas
admitted to the bar w ith favors, after a
severe examination, on June 4, 1877.
His popularity is well known among the
society element, as president of several
local organizations. During his career
in last year's Legislature Mr. Doherty
was an advocate of many popular meas
ures. The Civil Service bill, w hich has
made Mr. Doherty's name so familiar
throughout the Commonwealth, was
compiled under his able supervision.
We give an extract of that part of the
bill which has saved thousands of dollars
to the taxpayers of Boston, and put an

end to the abuses of the junketing sys
tem, carried on so outrageously by our
( ity government:

No city in the Commonwealth shall
pay any bill incurred by any official or
officials thereof for wines, liquors, or
cigars; nor shall any citv pay any bill
for refreshments furnished to any official
of said city when* the amount for anv
one day shall exceed one dollar for each
member of the government of said city,
who certifies uver his own signature to
the correctness of the lull.

Mr. Doherty's law offices are at No. 23
Court street. His keen intellect, good
judgment and thorough knowledge of
law make.-, him lit to thoroughly and
with distinction represent his constitu
ents of Ward 5. Diiriu" the campaign
just closed his sei v ices as a speaker have
been in constant demand throughout the
State.

George A. Sanderson is a native of
Newton, where he resided until he was
sixteen years of age, w hen he came to
Boston and drove a baker's wagon for a
year or two. Some nineteen years ago
he and another young man bought out
the establishment of Mr. J. IL Willard
on Decatur street, where he is at present
located. After one year's trial the part
nership was dissolved and Mr. Sander
son continued the business alone, hard
work and unquestioned integrity giving
him a commercial standing second to no
man in the district. At one time he had
seven branch establishments and 12 wag
ons supplying customers, but the estab
lishing of many small bread stores in all
sections of the city so changed the char
acter of that part of the business that he
closed out all of his branch stores with
the exception of the one at Sharkey’s
Corner, and of late years has confined
himself to the Decatur street establish
ment. w here he does a large business in
supplying bread to institutions and the
small retail stores, In politics he has
ever been a straight-out Democrat, being
a member of the Ward 3 Committee for
seven years and its Chairman or Execu
tive member for the past four years.
This is his second term in the House, he
having been elected last year for the first
time. He is without doubt the most
popular man in the Ward 3 Democracy,
his long term of service and faithful at
tention to details earning him the respect
and confidence of his associates ami
mem tiers of the party at large. His
constituents are confident that in the


PRIC E 5 CENTS.

next I ejislature. ss in that of the pres
ent year, he w ill prove an honest and
a capable representative of their inter
ests.

John lb Murphy, the senior member
elect from Ward 5 to the lower branch of
the General Court, was born in Charles
town in 1856. and was educated in the
public schools, graduating from the War
ren Grammar and the High schools.
Although a young man Mr. Murphy has
taken an enviable* position in business
and in politics. He is possessed of those
rare qualities w hich peculiarly tit him to
present upon tlu* rostrum or the stump
the great questions of the hour in an in
telligent. forcible and entertaining man
ner. His remarks upon public topics
do not fall heavily u]mhi the listener,
but afford food for reflection and
the enthusiasm and energy he displays
convinces one that he is honest and sin
cere in what he says. His efforts as an
orator during the recent exciting Presi
dential campaign, which has just been
brought to a successful termination fur
the Democracy, have added new laurels
to his wreaths of victory in the political
arena. Believing in the great principles
of the Democratic party, he is ever ready
to defend them, and he must indeed be
a man of mon* than ordinary capabilities
who can present a better argument
than can Mr. Murphy when he raises his
voice in behalf of the rights of all men
before the law. The Hoxton P»>xt, in al
luding to him. said: "Of Mr. Murphy it
is not too much to say that he is the
most graceful orator in the House.
Young, earnest, enthusiastic and fair
minded. Mr. Murphy has turned his two
years' experience as a legislator to good
account, and his friends have the proud
satisfaction of knowing that he has de
veloped capabilities which give promise
of a useful and brilliant career
in the future.” - As a member of the
house of representatives he served upon
the Committee of Public Charities, and
was on the committee appointed to in
vestigate* the charges preferred by
< iovernor Butler against the Tewkesbury
Almshouse. During the last session of
the legislature he submitted the minority
report of the (ommittee on Public Char
ities and caused the defeat of the at
tempt to abolish the custom of furnish
ing free soup by the city ot Boston to
its poor and needy inhabitants. Through
his efforts honu*opathie hospitals were
obtained foi the insane. His voice has
keen heard in the State House upon all
important questions affecting thl* rights
of the ]>p<qile. Speaker Marden compli
mented him upon his speech on
the T<*wksbuiv investigation in a
public way. As a representative
to tin* legislaturi* from Ward 5 in 1883
and and as Chairman of the Demo
cratic Ward ( ommittee of Ward 5, he
has shown the mettle of w hich he is
made: and it was a pleasure and a satis
faction to his numerous constituents to
re nominate him and then re-elect him
to the position of a legislator, know ing
full well that in his hands their interests
would l»e and their rights defended
whenever occasion demanded.


Oliver Prime, who was elected Demo
cratic representative from Ward 4 over
Mr. (Jeorge N. Fisher, the Republican
candidate for the office, served in the
last house and his actions upon impor
tant matters were <atistactory to the
Democracy and to many Ih'publicans.
The latter in no small w ay aided in his re
election. Mr. Prime is a member of the
linn of Prime A Otis, real estate (h alers.
He was born in Moultonborough, N. IL,
about fifty years ago, and became a
resident of this city in I<>B. He held in
his native place several public offices
and discharged his duties faithfully and
honestly. He is a gentleman who can
be depended upon.

The Tallapoosa has been docked
at the Brookly n Navy \ ard.2

PREPARING JOHNSTON

For Pacing a Mile in Two-Six and

Aa Interesting Interview with John
■plan on Hl* Training—A
Trainer Who Ie WIII-

“Tea," said John Splan, thedriverof John
ston, whe-i referring to the wonderful mile
which his horse paced at the Driving j»ark
recently, “it seems like a wonderful
thing for a horse to go as fast as that, and
yet it has been my opinion all along that
Some day he was going to l»eat 2:08. Of
eouree I didn’t know to a certainty that he
•ould do it, because I had not driven him a
mile at anything like that rate of speed, but
from what he had shown mo for a fraction
of the dbt n"e it seemed as if he ought to
beat 2:10 quite a little bit.”
“Then you had never tried him very
highly r

“Na In training horses, as in anything
else, you can’t have your cake and eat it too.
It has always been my idea that in order to
fe* the very led work possible out of a horse
he should never be driven so fast or so mu h
as to get sick of the work himself. I remem
ber well enough that the winter after I got
Rarus this fact was impressed upon
me very strongly. Up to that time
I had rever drived a mile better than
2:20, and knowing that Harus could
beat that quite a little bit, I was naturally
anxious regarding his training. It struck
me then that a man who might be very
clever at sharpening a jack-knife would not
do at all when it came to putting an edge on
a raaor. I thought that Harus was the fast
est trotter in the world, and so in the winter
of 1876-’77, when we took him to California
in company with Goldsmith Maid, I resolved
to protit by an >ther man’s experience. So I
asked Budd Doble how to go along with my
horse, and he told me. I had him put
in a stall adjoining that of the
Maid, an 1 trie 1 to learn exactly how
Dot>le trained. We were a pretty good
pair. He was willing to tell me what he
knew about training very fast horses, and I
was willing to learn. I very soon found out
that a n a i could get a fast trotter right at
an edge in point of speed and condition with
comparatively little work—nothing like the
old-fashiont d poundings and long drives that
ws used to consider necessary before a horse
was fit to go to a race. Doble, by the way,
is the best conditioner of horses 1 ever saw,
an# he is a man that is always learning
•omething. You never see him splitting out
a horse as fast as he can go two or three
Mmes every week. On the contrary, he
always drives them within themselves, and
the result of this is that when the day of the
race arrives they are able and willing to go
faster and further than he has ever asked
them to in their preliminary training.
“That is the system that I adopted in deal
ing with Johnston, and the result shows that
it is toe correct one. When I got the horse
last fall he was rather thin, having been sick
during the summer, and my first move was
to get him in good flash, for I never was an
advocats of the theory, held by some people,
that a horse after being reduced to skin and
bones by a thorough course of old-fashioned
training is then in shape to make a credita
ble showing. The fact of the matter is that
I trained Johnson just the same as I trained
Harue. I took him to Cincinnati and gave
him a great number of slow miles. I never
asked him to go fast, but kept letting him
step along every day a good many miles.
Of course I knew that he had speed, but I
never kept asking him to show it to me every
day as a boy would look at a new jack-knife.
What I wanted to do was to beat
all the trotting and pacing records with
that bor<e so far that there would be a
mark for the rest of them to shoot
at that they would not be likely
to hit for some time to come. Consequently
I was always careful, both in his work and in
trials against time. The fastest mile that he
has had in his exercise this season was
At Cleveland some time ago I drove him a
half mile in 1:03, the last quarter being done
in thirty seconds, and the last eighth was
paced at the rate of a mile in 1:56. This was
last June, and it was enough fast work for
me. It showed me that my hoi s 3 had all the
■peed that was wanted, and that my business
lay in prej aring to carry that speed fora
mile. When we came to make public trials
against toe watch I made it my business to
never get excited and try to do something
wonderful with him when the conditions were
not favorable. We never had a really first
class day and track until we cairu here to
Chicago, but 1 was determined not to drive
this horse out for the last inch there was in
him until I did so at a place where it would
do some good. He seemed to me at Milwau
kee to be in just about the right
trim, but the day and track did not exactly
suit me, and although he went in 2:10 there
there was no part of a mile that he was
forced or driven out.”

“How did you drive the mile at Chicago?”
“Well, it was like this: I made up
my mind some time ago that in order
to do a mile in phenomenally fast time
a horse must rate his speed in such a way
as to make the best possible use of his
powers. The idea of going away from
the wire with a horse at the very best clip
he is capable of showing and keeping it up
as long as he will go is the wrong one. Con
sequently I have been training myself for
some time to time a horse while I was driv-

ing him, and I have got that part of the
business down pretty fine. I had a good
strong hold on Johnston all the way to the
half-mile pole, and I never began driving
him at all until we rounded into the home
stretch, and even then i did nothing but
rouse him a little with the lines. It was only
after we got inside the distance that I spoke
to him, and he went away from it as if he
was just from the barn for exercise. Every
thing was in the horse's favor, and he did
just what I expected him to do—that is pace
a mile a good deal faster than it had ever
been done before. His fastest mile this sea
son was the one in 2:10 at Milwaukee, and
previous to that he had never g >ne better
than 2:11X. So, Y ou that to drop from
there to 2:06%' was quite a job. 1 didn't know
to a certainty that he could do it, because I
had not been trying him every week to find
out. A hor-e will stand one grand drive,
but when you come to ask him to do his very
best every week he will begin to get sick of
it, and the minute a trotter or pacer strikes
that frame of mind he is not going to beat
his record much. And that is why lam not
going to drive Johnston another mile this
■eaeon at the very top of his sjieed. Next
spring I shall go along easy with him, just as
I have done this year, and if no bad luck be
falls him he will go a mile close to two min
utes. I know that sounds like pretty big
talk, but when you come to look at the mat
ter carefully there is nothing unreasonable or
extraordinary about i + The horse can speed
a quarter of a mile now at better than a two
minute gait, and as he is young, sound, game
and of the improving kind I don’t s e any
thing in the way of his learning to go a mils
at pretty near the rate of speed that he now
shows for a quarter. ”

if*-**- ■

One-fourth.

Ing to Learn.

[Chicago Tribune.]

SELECTIONS FOR AN ALBUM.
The truly generous is the truly wise;
And he who lores not others lives unb'est.
—[Horne.
Away then! work with boldness and witt
speed;
On greatest actions greatest dangers feed.
—[Marlowe.
Oh, how bitter a thing is it to look
Into happiness through another man’s eyes.
—[Shakespeare.
Be purity of life the test—
Leave to the heart, to heaven, the rest.
— [Spragua
’Tis beauty that doth make woman proud,
’Th virtue that doth make her most admired.
’Tis modesty that makes her seem divine.
Count that day lost whose low descending
sun
Views from thy hand no worthy action done
A sweet heart-lifting cheerfulness,
Like springtime of the year,
Seems ever on your steps to wait.
—[Mrs. Hale.
A friend is gold; if true he’ll never leave
thee;
Yet both without a touchstone may deceive
thee.
—[Randolph.
All who joy would win,
Must share it—happiness was born a twin.
—[Byron.
If happiness has not her seat and center ir
the breast,
We may be wise, or rich, or great, but nevei
can be blessed.
—[Bums.
I would not waste my spring of youth
In idle dalliance; I would plant rich seeds
To blossom in my manhood, and bear fruit
When I am old.
—[Hillhouse.
That life is long which answers life’s great
end.
The time that bears no fruit, deserves nc
name.
The man of wisdom is the man of years.
—[Young.
Good actions crown themselves with lasting
days,
W ho deserves well, needs not another’s praise.
—[Heath.
MAKING ACTORS.
The New Mill In New York Begins
Work on Domestic Goode,
[New York Sun.]
A hundred asserted people climbed to the
three upi>er stories of 18 West Twenty-third
street and plunged into the Lyceum School
of Acting. Fragments of Shakespeare and
society drama floated down the stairway.
Eighty pupils who had passed the entrance
examination were taking lessons. Mr. Max
Freeman walked up and down the carpet im
pressively on one floor, while a class of ama
teurs studied the fine points of his gait and
stage business. In another room a charming
little lady went through dramatic panto
mime for the benefit of other students, and
still another lady on another floor tested the
vocal capacities of a third section of pupils.
In the afternoon all the pupils in a body
walked up to the Comedy theatre and list
ened to a Vassar college young lady, whe
lectured about the Theatre Francais method
of acting.
Before the lessons began, Mr. Steele Mao
kaye made a speech to the young ladies and
gentlemen, telling them that the best ol
them will be organized at the end of the yeai
into a comyany which will represent the
school in a series of matinees at the Lyceum
theatre. He told them that they might ap
pear under assumed names if they wanted to,
but he hoped they wouldn’t.
All this time and long afterward a very
active man, with a black beard and bright
black eyes, nearly talked himself to deith in
the office answering the flood of questions
that stage-struck young women kept asking
him about the school, about acting, about
the chances of their being able to act, about
the possibility of their being worth seeing if
they did, about the possibility of their get
ting their money back if they didn’t feel
satisfied with a term at the school, and other
miscellaneous things. Some of the appli
cants had descended from carriages at the
door, and two ministers complicated the
active man’s perplexity very early in the
morning by asking if the school would
guarantee to make pulpit orators of them.
By 4:30 o’clock the man was hardly able to
tell whether his name was MacGeachy or not.
“We'll have to shut down on this,” he said,
“or else we’ll get so much to do that it will
swamp us altogether. Women just pour in
here. Tuo instruction fee of $2OO seems to be
no obstacle to their ambition. They are very
erratic in their notions. To-day one fat
woman, who was cress-eyed, wanted to
know if she couldn’t make a lea ling lady.
Another, who had no voice at all, wanted
to become a tragedienne.
“What work does the school propose to de
vote itself to?”

“We propose to take good amateurs and
make actols of them, and make better actors
of people who are already professionals. It’s
a big job, but we think that, after our rigid
admission examination, our eight months’
course of training will bring out latent talent.
We make any kind of actors—tragedians,
comedians, soubrettes, or anything else.
AV hen they are ready managers can come
here and pick out what they want when they
run short of material.”

“Do you expect to make any gn at actors?”

“That depends on fortune. We guarantee
to make good actors, not stars. This is a
sort of factory, and all its proprietors
guarantee is that it will turn out good goods.
We fired out two ambitious nincompoops to
day, already, and we will get rid in the same
gentle, inoffensive way of all the stage
struck, but worthless material that wil
wander in between nowand June. We don’t
keep them long in suspense.”

A Frank ConfenMion.
[Chicago Tribune.]
“I do not wish to marry a man,” said a
young girl, “who has not the means to sup
port me in the way I have been accustomed
to live.”
This remark was made in mixed company.
Every one was breathless with the audacity
of the confession.
“Sensible woman,” I murmured, under my
breath.
“Mercenary thing," said my wife, who cer
tainly had not married means.
And yet this is what every girl thinks;
only it is not what every girl dares to say.
Not a Bit Afraid.
[Burlington Hawkeye.]
Why, a large min led, capable man is
never afraid that his wife will rule him.
It is the litt’e soulded, do-less, nerveless in
divivual, who knows in his very heart that
he ought to have some one to control him
and keep him in shape that is always afraid
of being bossed by a woman.
Playing with Fire.
“I like playing with fire,” said a young
girl, “it is exciting.”
Yes, my dear, and fire likes to play with
you.
Buffalo Express: Conflagrations there are
in plenty, with holocausts, and to spire; but
the plain, old-fashioned fire seems to have
had its day.

The Hardships of the Service and thi
Fees Which the Law Allows.

Crunlnc In the Track of In-Coming
Steamers—A Pilot’s Annual In>
come—Charges According

“In this harbor there are thirty-six pilots,”
said the captain to a reporter on board a
pilot-boat at the home station. “They are
d.rectly responsible to the pilo commission
ers, two men who every throe years an* rec
ommended to the government by the Marine
society and then appointed with the consent
of the council. This commission regulate
all pilotage affairs, and at their office all
complaints are made against us. and there
we lay what grievances w? have. They grant
us our commissions, after the approval oi
the Marine seci *ty, and in case of ill behav
ior or neglect of dutv th* y can 'usp nd us.
Unless with ti e a’ p ’oval of the governor,
however, th'V cannot su>p >nd us !o - more
than sx y d::ys. Every throe nr nhs we
have o male a detried rep»rt of oucre
ce’ps to the < o n:ni sion, and for their ex
yen es we have to ।a ' them 4 per c* n\ of
the amount rece.v d. Incase of tr ude
anu ng ourselves we choose ihr*e master
pilots as arbitrators, and 1 gve the ca oto
them.

—[Randolph.

“There are pilots at Newburyport, Marble
head, Rockjiort, Gloucester, Manchester,
Taunton river, Provincetown, and every pirt
and harbor. All are appointed by the gov
emor and are under the same laws as Bost in
pilots. Ido not know how many boats there
are outside of this harbor, but here eight
boats and thirty-six men are in the service.
These boats will average in cost about
SIO,(XX), and it costs about $350 per month tc
run them. This includes the wages of the
crew, food, water, wood and all sundries.
The boats are on duty all the tim \ one week
on the outer station off Cape Col, and the
next at the hom n station at Boston light.”
“Do your boats ever get left at sea with
no pilots aboard ?”
“Oh, frequently, but the vessel is left in
charge of a competent man. Our usual num
ber of men is four or five pilots, the senior of
whom takes command, a cook, boat-keeper
and three men. When all the pilots have
gone to the city we wait till they can join w
by t; ain at the Cape Cod station, or if we art
at Boston light we take them off out-going
vessels. We know when they are aboard,
for they hold their jack in the rigging and
we send a boat for them.

—[Hillhouse.

“The schooner is fel lorn owned by one
pilot. Often there are five or six intere'tad
parties, and from the gross receipts a sixth is
taken for the vessel's s’nr 3. The expense*
are deducted and the remainder divided ac
cording to law.

“It is a hard business. A man has to be
made of steel to stand being in Boston bay ir
the winter The receipt-; are increasing
and so does the number of men. We aver
age an income of about $1,500 annually, and
I have earned $l,BOO one year. The fees foi
pilots amount to m >re every year, in the
aggregate I mean. They have increased 53C
per cent, since 1835. That year they were
$21,000; this last twelve months over $113,•
000. Our fees vary with the six 3of the ves
sel. For ocean steamers we < harge about
$lOO, according to draft. All our prices are re
gulated by statute at so much a foot of draft.
Ordinary vessels, say over ton feet draft,
pay about $3 per foot, and if the p lot orders
steam 25 per cent, is taken off the bill. A
man who has served an apprenticeship or ter
years seldom needs such assistance to get t
vessel out or in the harbor, though thit p>rt,
especially in the winter, is a most dangirou*
one, and is avoided by many mariners or
account of its difficult navigation.
“The steamers are the prizes of the servic '.
We provision for a cruize, leave the harbor
and sail for our grounds, where we range tc
and fro, cove ing a gro ind of about th r y
miles. Sometimes when an ocean steamer is
expected we run out to sea 150 or 200 mile ',
but usually we are only sixty miles ofl
shore. A man is on the lookout from the
masthead day and nigl t. As soon as he
sights a vessel he shouts to the pilots on dec <
who take the bea i igs bv compass, start thr
sheets, and stand for th' steamer’s course.
As she nears us we set *nr large flag, which
is about 23x16 ffe\ half b ue and 1 alf white
on a large pole above the masthead. Now. if
she steers for us, all right: if not, we hav' t
change our course till the captain of ihe
steamer sees us. When we are about a n.i e
away we 1 iy to and launch our do"y, and th*
sle m er slows down. Two me i get into tl e
dory with the pilot, and lay in her path. \
long line is thrown to the dcry fr< m th
steamer’s bow, and it is drawn alon side,
v here a rope 1; dh r s lowered and we have
to jumn for it. Sometimes we miss oui
hold and get a ducking, but a line is ; r und
us, and wo d< n't pet <towi eI. Once ab< ard,
v e take command and are teipousible for
the ship.”
A Liberal-Hearted People.
[Detroit Free Pre-s.]
“Such a town as this is!” he exclaimed as
he got dear of the police court the other
morning.
“What’s the matter of the town?” queried
the citizen whom he addressed.
“Best lot of folks—most liberal-hearted
fellow’s in the world I I got- intown yester
day. Bought these boots and the feller gave
me a pair of roller-skates. Bought this
hat and toe feller gave me a set
of sleeve-buttons. Bought this coat and
the feller threw in a handker
chief. Took supper at a restaurant and the
feller threw in a glass of whisky. Got drunk,
and the policeman kindly drew me down on
a cart, called me poor fellow, and said he
knew how it was to have a wobble in the
legs. Just been before the judge.
Powerful kind-hearted min. Gimme $c
or thirty days! Tell you what, mister, yov
folks don’t half appreciate your little city.
Only place in America where you can gej
something for nothing and have a chromo
thrown in.”

A Preclou* Oil.
[American Queen.]
Precious attar of roses, of which it takes
1.000 pounds weight of one kind of rose only
to make from four to six ounces of the attar,
is preserved in pilgrim-shaped bottles covered
with felt, holding ninety ounces each, by a
great wholesale house in London, recently
visited by a correspondent. This costly
flower oil is kept in a safe with multiplied
locks, to which only two people have keys.
Each bottle of ninety ounces is worth from
$5OO to $7OO, therefore $1 a drop may be
considered a fair retail price.
Hunt a Directory
[Carl Pretzel’s Weekly.]
A candidate called upon us the other day,
and requested the privilege of looking at our
city directory. The privilege was accorded
him, and after examining it for awhile,
he turned to us and said:
“Pretzel, some fiend has torn the index
out of it and it is hard work to find the
names.”
Now, that man will read this article and
will wonder where the lauvh comes in.

THE CHARLESTOWN ENTERPRISE.

PILOT-BOAT LIFE.

to Draft.

[Boston Globe.]

LEGAL NOTICES.

CIOMMONWEALTH OF MASSACHU-
/ setts. Suffolk, ss,—Probate Court.
To the heirs-at-law. next of kin, and all other
|x*mons interested in tin- estate of Mary Haver
ty, late of Boston, in said county deceased.
GREETING:
Whereas a certain instrument purporting to
be the last will and testament of said deceased
has l»een presented to said Court, for Probate,
by Martin Haverty of said Boston, who prays
that letters testamentary may Iw issued to him,
the Executor therein named, without giving a
surety or sureties on his official bond.
You are hereby cited to appear at a Probate
Court, to lie held at Boston, in said County of
Suffolk, on Monday, the seventeenth day of No
vember, A 1). 1884. at ten o’clock in the fore
noon, to show cause, if any you have, against the
same. A ' • *
Ami said petitioner is hereby directed to give
public notice thereof, by publishing this cita
tion once a wi ck, for three successive week', in
a newspaper called the New Enterprise printed
at said Boston, the last publication to be two
days at least before said ( ourt.
Witness, John W. McKim. Esquire. Judge of
said Court, this twenty-third dav of ()ctob<-r, in
the year one thousand eight hundred and eightv
four. ELIJAH GEORGE. Register.

CIOMMONWFALTII OF MASSACHU
/ setts. Suffolk, ss.—Probate Court.
To the heirs-at-law, next of kin, and all other
persons interestsd in the estate of Margaret
Troy, late of Boston, in said County, deceased.
'Greeting:
Whereas, a certain instrument purporting to
be the last will and testament of said deceased
has been presenteil to said Court, for Probate,
by Patrick McGrath of Randolph, in the Coun
ty of Norfolk, who prays that letters testamen
tary may be issued to him. one of the executors
therein named, without giving a surety or
sureties on his official bonil the other executor
having deceased.
You are hereby- cited to appear at a Probate
Court, to be held at Boston, in said County of
Suffolk, on Monday, the first day of liecembi-r.
A. I>. IHS4, at ten o’clock in the forenoon, to
show cause, if any you have, against the same.
And said petitioner is hereby directed to give
public notice thereof, by publishing this cita
tion once a week, for three sm eessive weeks, in
the newspaper called the Charlestown Enter
prise printed at said Boston, the last publica
tion to be at least two days before said Court.
Witness, John W. McKim, Esquire, Judge of
said Court, this fourth day of NovemlH-r, in the
year one thousand eight hundred and eighty
four. ELIJAH GEORGE. Register.
NOTICE IS HEREBY GIVEN
That tin* subscriber has been duly appointed
Executor of tin* will of Catherine Keating, late
of Boston in the County of Suffolk, deceased,
and has taken upon himself that trust by giving
bonds, as the law directs. All persons having
demands upon the estate of said deceased, are
required to exhibit the same, and all persons
indebted to said estate are called upon to make
payment to MAL'RICE J. Cl RR AN,
Boston, Nov. 6th, 1884. Executor.
Law and Collection Office,
25 CITY SQUARE, ROOM 2.

Particular attention given to the collection of
rents, overdue notes, accounts, etc. No charge
unless successful.
Collections attended to personally or by cor
respondents throughout the United States, Cana
das and Provinces.
JUSTICE OF THE PEACE.
ATTORNEY AND COUNSELLOR AT LAW,
AND
NOTARY PUBLIC,
No. 25 City Square.
Residence 33 Mystic Street.
T. FRANK NOONAN,
ATTORNEY AND COUNSELLOR AT LAW,
30 Court Street, Boston,
Room 8.
Residence, 11 Lexington Street.

DECLAN D. CORCORAN,
ATTORNEY AND COUNSELLOR AT LAW.
ROOM 10, PRODUCE EXCHANGE.
(over Faneuil Hall Market.)
Notary Public. Residence: ‘2O Belmont St.
JOHN - !
ATTORNEY AND COUNSELLOR AT LAW,
39 COURT STREET,
Rooms, 3 and 4. Opposite Court House, Boston.
P. O’LOUGHLIN,
ATTORNEY AND COUNSELLOR AT LAW,
23 Court Street, - Boston.
Notarv Piib 1 ic.
A GRAND ~FAiR“
under the of
Ahratau Liwlii, Post No 11,
Gr- -A., n.
IINT
MONUMENT II ALL
Jlondny evening. December Isih I
and continue until December 2<)lh,
incln.ive.
The object in holding this Fair is to raise
a fund with which belter Hall acconimod i-
Hons may be secured. The amount realized
to be the nucleus < f a Building Fund.
APPEAL.
The members of Post No. 11, Grand Army
of Republic, de’ire Io raise a fund for the
purpose of building a Hall, to
which they have decided to h<dd h Fair in
Monument, Hall In December next. They ap
peal to ।he benevolence of the pari He and
charitable citizens throughout the City for
support and assistance, and earnestly be
seech all who can to furnish material or mon
ey, amt also by their presence assure its sue
cess.
If successful and a building should be
reared, It will not on)v adorn ihe City and
stand os a monument to the glorious achieve
monts of the past, but will represent the no
ble generosity of our patriotit amt benevo
lent citizens.
By order of the Executive Committee.
THUS. H. HASKELL,
Chairman.

MR. J. E. BUTLER,
Graduate of the Leipsic Conservatory and pri
vate pupil of Dr. Papperitz, Louis, I’laidy. and
Capelmeister Carl Reinecke, will receive pupils in
PIANO AND ORGAN
PLAYING.
AND VOCAL MUSIC.
Residence. 75 Green Street.
MUSIC STUDIO-521 WASHINGTON STREET,
BOSTON.
DEE BROTHERS,
FLORISTS,
104 Tremont Street,
Corner of Bromfield Street,
STUDIO BUILDING, BOSTON.
Thos. W. Dee. John H. Dee.
Conservatories at Mt. Auburn.
AZEIL C BOWDITCH.

FITCHBURG RAILROAD.

Hoosac Tunnel Route.

On and after Monday, Sept. 21>, I*B4, trains will
run as follows. Leave Boston for the west,
(6.30 A. M. aceom.); (8..30 A. M., dav express has
Pullman drawing room car via. N. Y. W. S. &#38; B.
R. R.); (3 P. M., express, daily. Sundays included,
w ith Pullman sleeping car' for Chicago and St.
Louis; (6 P. M.. express, daily. Sundays included,
with Pullman sh*eping car for Chicago, via. N.
Y. W. S. A. B. R. Rj. For Troy and the West,
(6.30 accom.), (8.30 Ex.) A. M.; (3.00 Ex.) I*. M.
For Stations on the Cheshire A Central Vt.
It. It., (8.00 Ex.) A. M.; (3.00 Ex.), (6.00 Ex.) P. M.
For Fitchburg, 6.30, (8.00 Ex.), (8.30 Ex.), 9.00,
11.10 A. M.; (3.00 Ex.),4.40,(6.00 Ex.),(§*11.15). P.M.
Sundays, 1.05,(3.00 Ex.),(6.00 Ex.)P. M. Return,
leave Fitchburg, 6.35, 7.30, (| 8.05 Ex.), (!».oo Ex.)
A. M.; 12.15, (.1.28 Ex.), 3.20, (5.00 Ex.), 5.35. (8.28
Ex.). **.4o P. M. Sundays, 6.40, (8.05 Ex.) A. M.;
(1.28 Ex.), 6.30 P. M. For Marlboro, (8.00 Ex.),
11.10 A. M.; (3.00 Ex.), (5.30 Ex.), (|6.00 Ex.),
(§•11.15) I*. M. Sundays, 9.15 A. M.; 3.00 p. M.
Return, Leave Marlboro, 6.50, (7.35 Ex.). 9.20
Ex.) A. M.; 12.46,(5.45 Ex.) I’. M. Sunday, 7.25
A. M.: 5.15 I*. M. For Waltham, 6.30, 7.05,
(7.20 Br.), (8.00 Ex.), (§8.33 Br.), 9.00, < 10.30 Br.),
11.10 A.M.; (12.00 Br.) M.; 12.30. (1.20 Br.), 2.25,
(3.10 Br.), 4.00, (§4.15 8r.),(4.40 Ex.), 5.00, (§5.10 Br.).
(5.30 Ex.), (§5.33), (§5.49 8r.),(§6.10 Br.). 6/23, (16.40,
Br.), (7.115 lir.), 7.35,(8.50), (9.45 Br.), (§*11.15). 11.20.
(lUOBr.) P. M. Sundays. ,9.15 Br.C IIAOA. M.;
(12.45 Br.), 1.05, (4.45 Br.), 6.30, (6.55 Br.), (9.45 Br.)
I’. M. Return, (l6.oo 8r.),6.20. (6.50 8r.).(7.13 Br.),
7.28, 7.31, <7.43 Br.), 7.55, 8.06, (8.10 Br.), (8.32 Ex.),
(9.05 Ex.). 9.20,9.39.(9.50 8r.),( 10.20Ex.>, (11.20 Bn,
A. M.; t.OO, ,1.02 Br.'. (LU Ex.), 2.10, (3.00 Br.),
4.54, (4.55 Br.). 5.55, 6.13, (6.35 Br.), 7.11. (8.15 Br.),
(9..38 Ex.), (9.39 Br.), (•10.13). 10.35 P. M. Sundays,
(8.50 Br.), 9.26 A.M.; (12.15 Br.), (4.00 Br.), 5.40,
6.30, (7.15 Br.), 8.05, (8.30 Br.) P. M.
|| Runs daily including Sundays. §lx*ave Bos
ton from outward side track at northwest end
of depot, f Express to Concord; change at Con
cord Junction to the train due to leave that sta
tion at 6.48 P. M. t Has a workingmen’s car
attacheil. • Wednesdays and Saturdays only.
Br. Via. Watertown branch.
JOHN ADAMS, Gen. Supt.

n
And everything pertaining to the business, at
the largest wholesale store in the city, recently
opened to retail buyers. PRICKS LOWER
than in the retail streets. Nos. 155 Friend, and
62 Canal streets. Paine's furniture building,
opposite Maine depot. Take any Middlesex or
Northern depot horse ear.
onncDc p on importers.
nUULnO 06 uU.) Established 1815.
WOODLAWN
CEMETERY.
NEW ROUTE.
Middlesex Railroad Cars Direct to the Cem
etery Gates.
LEAVE Scollav Square daily every hour from
9.15 A. M. to 4.15 P. M.
RETURNING, LEAVE CEMETERY every
hour from 10.20 A. M. to 5.20 P. M.
SUNDAYS, the last ear will leave Boston at
5.15 P. M., and leave tin- Cemetery’ at 6.20 P. M.
Middlesex Railroad.
Office—27 Tremont Row, corner Pemberton Sq.
Cars leave Charlestown Neck for the Southern
depots every 7 1-2 minutes.
Cars leave Charlestown Neck for Washington
street, Temple place, and Tremont street every
6 minutes.
Cars leave Bunker Hill station for Washington
street, Temple Place and Tremont street every
7 1-2 minutes.
Cars leave Malden station for Scollay square.
Boston, every 30 minutes.
Cars leave Everett square for Scollay square,
Boston, every 30 minutes.
Cars leave Union square, Somerville, for Tem
ple place, Boston, every 15 minutes.
Cars leave Winter Hill station for Scollay
square, Boston, every 20 minutes.
The Bunker Hill National Bank
OF CHARLESTOWN.
EDWARD LAWRENCE, PRESIDENT.
CHARLES R. LAWRENCE, Cashier.
Capital, .... SJOO'OOO.
Surplus, - 8300,000.
Discount days—Tuesdays and Fridays.
WARR-E N
INSTITUTION FOR SAVINGS.
Incorporated 1829.
OPEN DAILY from 9 to 1; also Wednesday and
Saturday afternoons from 3.30 to 4.30.
TIMOTHY T. SAWYER, President.
GEORGE F. TUFTS, Treasurer.
vice presidents.
Edward Lawrence, George Hyde,
Henry K. Frothingham, Henry Lyon,
George W. Little, Francis B. Austin.
trustees.
Liverus Hull, Charles E. Daniels.
John Stowell, Nelson Bartlett,
Isaac P. T. Edmands, Nathan Tufts,
Nahum Chapin, John Turner,
Thos. R. B. Edmands, Charles F. Fairbanks,
John S. Whiting, Thomas G. Frothingham,
Georoe S. Poole, Secretary.

W. T. VAI lOSTRAID ft CO.
Brewers of the Celebrated
OLD MUSTY ALE
—AND—
CRYSTAL LAKE P. B.
—ALSO—
FINE ALES and PORTER.
OFFICE, 40 ALFORD STREET,
Telephone No. 6518. Charlestown.
aTb shedD ~
AUCTIONEER
and Appraiser of Estates.
mi mu kit in u
Commissioner for Maine.
Particular attention given to the care and man
agement of Real Estate. Mortgages negotiatecl.
Deeds, Mortgages. Leases, Wills, etc., drafted.
Titles examined. Insurance placed in the best
offices at the lowest rates.
JAMES H. SHEDD.

MCNULTY’S BINING BOOMS,
No. 13 CHELSEA STREET.
FIRST-CLASS DINNER FOR 25 CTS.
Open on Sundays.
CHOICE ALES, WINES, LIQUOBS AND CIGABB.
JOHN T. SULLIVAN,
ALES, WINES ANO LIQUORS.
Lager Beer on Draught.
107 Bunker Hill Street.
CEO. W. WILLIAMSON,
FORIIITURE ANO PUNO MOVER.

Ont-il-Town Work a Sjttiillj.
COVERED AND OPEN TEAMS. PARTIES
ACCOMMODATED. ALL ORDERS PROMPTLY
ATTENDED TO.
Stand in Thompson Square,
Residence. 36 Walker street.
JAMES P. MORAN,
PRACTICAL
PLUMBER,
NO. 1 PARK STREET,
Orders from any part of the city or country
for fitting up Bathing Rooms, Wash Basins,
Shower Baths, Wash Trays, for hot and cold
water; Bath Boilers, Water Closets, Force
Pumps, Marble Slabs, llepairing, etc., or for the
purchase of any article in the Plumbing line
promptly and faithfully attended to.
WALL PAPERS,
SPECIAL SALE.
In order to close out this seasons goods we Aball
offer for the
Next Thii*ty Days
the balance of our large wholesale stock of
NEW SPRING PATTERNS
at prices which will, we think, secure immediate
sale.
SPRING FIXTURES, 20 CENTS.
E. J. HICKEY,
33 and 35 Cornhill, Boston.
DENTAL SPECIALIST F-
EDW. PAGE, M. 0., D.M.D.
Teeth. Saved. By Treat?
merit and Pilling.
3 DEXTER ROW.
CHARLESTOWN.
R. W. SOUTHWELL.
Dentist,
174 MAIN STREET.
All operations performed in a thorough and
satisfactory manner, at reasonable rates.
Charles H. Smith, D. D. S.,
Dental Office and Residence:
24 Monument Avenue.
CHARLESTOWN.

MW
hew Home
51f « :
cUAs No EQUAL —
/ 30 UNION SQUARE NEWYORK
ILL- MASS. GA.
FOR SALE BY
LEAVITT &#38; BRANT,
409 Washington Street, Boston.
WARD &#38; CURLEY,
BRASS FOUNDERS
AND MANUFACTUWER3 OF
Every Kind of Brass Work,
WATER CLOSETS AND PLUMB
ER S' SUPPLIES.
62 SUDBURY STREET,
BOSTON.THE DANCING DERVISHES.

AW ODD SECT IV THE M)OBI3H
QUABTEBS Of A

An Evening Spent in Their Com
pany- Mros ni Their Singular
11ilex and Per onaameki

One evening during our stay in Algiers
We were informed that the Dancing Der
vishes or Aissaoui. as they are called,
were to give a perforin mce. According
ly, that evening, having procured a
gAide, we proceeded to the place where
the performance was to be given, driving
through the narrow streets connecting
■he French with the Moorish quarter of
the town, until they became so narrow
and winding that it was impossible to
go farther. He we left the carriages in
a small square, where four Hat stones
imbedded in the ground marked the
spot where prisoners were formerly lie
headed, and walked on through the nar
row, dimly-lighted streets, and on ar
riving at our destination were ushered
into a large old Moorish house with its
central open court, galleries and coin
municating rooms. On two sides of this
court, which was lighted by flickering
candles, are benches for spectators,while
before them perhaps fifty Arabs in their
picturesque costumes were sitting
cross-legged, smoking and drinking
coffee. In the center of the
court was a large square carpet, upon
which was a brazier and burning char
coal, and behind it was a lighted candle
about three feet in height. Behind this
candle six musicians were seated, in the
center of whom was the master of cere
monies or high priest of the order, an in
telligent appearing Arab of perhaps forty
years of age. In the gallery immediate
ly above us, partially concealed by screens
of rugs and shawls, were many Moorish
women, and when the exercises became
exciting one could occasionally catch a
glimpse of a pretty face.
At a given signal the music com
mmced. The instruments were immense
tambourines, perhaps two and a half feet
in diameter, which they tuned to the
right musical pitch by occasionally heat
ing them over the charcoal fire. The
noise produced by these instruments was
deafening and monotonous. They con
tinued pounding steadily for perhaps
twenty minutes with no result, when all
at once a young man rushed into the cen
ter of the circle with a scream and com
menced to dance and gesticulate wildly.
He was immediately seized by the atten
dants, who divested him of his outer gar
ments and ornaments. He then, with a
vacant, staring ex pression, began to dance
wildly before the tall candle. It could
hardly be called a dance, as his feet were
Stationary. He simply threw his head
ind body backward and forward, all his
muscles being completely relaxed,
his head almost, touching the flames of
the candle as it swung forward. His
face soon became re I and he began to
froth at the mouth. He was soon joined
by two others. An attendant Kept them
in line, not allo wing them to get too near
the candle, and occasionally joining their
bands. Soon a wild looking emanci
pated old man sprang into the center of
the circle with a scream. After he had
been divested of his outer garments he
did not dance, but commenced pointing
with wild screams, at the different per
sons in the room. He then placed his
heel in the center of the burning char
coal until the smoke and the odor of the
burning flesh filled the room.
This jterformance was rendered more
effective by his continual screams and by
the unearthly noise of the tambourines.
He then with irew his foot, and a red
hot shovel having been handed to him
he rapidiy struck it with his open hand
and then drew’ his finger slowly across it,
producing, probably, a slight blister. A
heavy, sharp-pointed instrument was
then handed to him, which the old man
placed against his abdomen and pro
ceeded to hammer against the other end
with a heavy brick which he broke into
several fragments. He then with ap
parently great effort, pretended to with
draw it, but as its withdrawal was not
followed by blood and as he immedi
ately covered up the spot with his
clothing, we concluded that the instru
ment had not penetrated the flesh at all.
He then kissed the priest and ran into an
adjoining apartment, where he placed his
foot in water and afterward resumed his
Beat with the others.

Meanwhile the three dancers, who had
Continued bobbin" wildly up and down,
had fallen to the floor in an exhausted
condition, and had to be assisted out of
the room by attendants. The perform
ers, though some were wild and emaci
ated in appearance, did not show’ scars,
and though those whose heads were not
shaved showed irregular losses of hair,
us though it might have been pulled out,
still they appeared to be in fair physical
condition. At this time there was a
temporary lull in the proceedings. The
tambourines continued to beat monoto
nously, and the habitues of the place
were evidently awaiting some new’ de
velopment.

An Arab who sat near me spoke to me
m French, saying: “Watch that old
man; he is the best performer of the
party.” The man in question was a fine
looking old Arab, richly dressed, wear
ing spectacles, who was stroking his
long gray beard and smiling serenely.
Near him sat another old man, watching
the proceedings. The chief evidently
did everything in his power to excite
him. At stated intervals the musicians
would beat the tambourines fast and fu
riously. At such times the old
man would sway backward
and forward, and look wildly
about, muttering to himself. He even,
at one time, unbuttoned his outer gar
ments, evidently preparing for his ap
proaching fit. He would then subside
again, and finally buttoned up his coat,
and did not perform during the evening.
Soon, however, the other old man.
without warning, suddenly fell forward
into the circle. He was raised by the at
tendants, who, as in the previous cases,
took off his watch and outer garments.

He then commenced to repeat in a
loud voice various Arabic sentences. A
tambourine w r as then passed about the
audience, containing perhaps ten stones
varying in size from one-fourth to three
fourths of an inch in diameter, and a
rusty nail. One of the stones w’as then
passed to the old man, who, holding it
between his thumb and forefinger,placed
it in his mouth and sw’allowed it. He
then swallowed all the stones, finishing
w’ith the rusty nail. There was no op-

portunity fm deception. as his arms were
bare, and he invariably opened his
mouth, showing the stone, and afterward
opening his mouth to show that it was
empty. It is said that, a member of the
order has recently died from the effect
of swallowing nails. After he had tin
ished his performance he resumed his
seat, adjusted his garm nts, receiving
many congratulations from his frien Is.
Th** mas c then became more furious
and deafening, and the uproar was in
creased by shi.ll screams of encourage
ment from the women above, and subse
quently three new men rudit d into the
circle -two light-complexioned Arabs
and a negro —dancing and s reaming.
Three red-hot shovels w ere handed them,
which they struck as the first performer
had done, while one of the number took
the red hot shovel between his teeth and
held it there until there was a distinct
odor of burning ilesh. 1 hey then took
the led coals from the brazier, chewtd
and swallowed them, whi.e the black
froth ran fioin tin ir mouths. Two large
portions of piickly cactus, covered widi
long, sharp needles, were then handed
to them. These they seized, furiously
struggling for the largest portions, which
they chewed and swallowed—meanwhile
frothing and foaming at the mouth.
Eight scorpions were then placed in a
tambourine and passed about for the in
spection of the audience—ugly, crawling
reptiles, resembling sma)’ crabs. These
were then given to the performers, who
held them in their hands, not allowing
them to fasten upon their fingers, how
ever. Then at a given signal they ate
the struggling reptiles, the disgusting
crunching sound being very distinct—
tighting as before for the largest, flavor
ing the morsel with charcoal and prickly
cactus, meantime screaming and danc
ing. Our curiosity having been satis
fied we left, although the performance
was supposed to continue throughout the
night. We paid our fee to the Arab
who had conducted vs to the place
though our regular guide, a devout old
Arab, whose religious icr iplcs would
not allow him to visit such a place, to
drink wine, to have but one wife, and
who felt himself obl gcd to pray at least
five times daily, sometimes to our incon
venience, and that the performers would
get but a very small portion of the money
which we paid him.

The conclusion which we arrived at
concerning the performance: That the
performers took care that they did not
seriously injure themseves ; that they
were willing to dam e, to swallow stones
and disgusting objects, and to endure a
certain amount of pain for the money
which they received, and the distinction
which they enoyed; that they really
became very much excited by the furious
music, and that some among them w#d
doubtless insane, while others were simply
actors.

This sect was founded about 200 years
ago in Morocco by a Sidi Moh named
Ben Aissa, who is said to have proved
himself a saint by casting himself down
from a high tower without injury. He
and his followers, after having beer, ban
ished from Morocco, went into the des
ert and there found themselves able to
nourish themselves upon sticks, stones,
scorpions, etc., a talent which had been
hinded down to their descendants.
There, during the religious festival of
last winter, the disciples of this creed
rushed wi dly through the streets, seizing
living sheep, tearing them limb from
limb and eating the raw’ flesh. At that
tame Europeans were cautioned not to
approach them. Their performances are
said to be discountenanced by the more
intelligent Arabs.— Buston Transcript.

The Red Gam Chewers of China.

The Anamese, about whom so much is
being said now-a-days, are not an attrac
tive people, but they do not wear pig
tafts, and I can tolerate any other vice,
says a writer who has \ isited Tonquin.
They are much like trie Chinese in ap
pearance and in many of their habits,
following the same religion and living in
much the same way. The most striking
thing about them is their chewing habit.
Instead of chewing tobacco, the men and
the women alike universally chew a quid
about the size of a filbert, made up of
Syri leaf, betel nut, gambler and
chunam. This preparation is of a deep
red color, and imparts an exceedingly
nasty appearance to the teeth, lips and
gums. The people seem never to have
discovered that this disgusting juice
does not contribute to their personal
appearance. Some day the revelation
will burst upon them with stunning
effect. At least, I hope so. Judging
from the reddened ground where Ana
mites have been expectorating one would
think that this is a colony of con
sumptives. Like all the other Orientals,
the Anamese wear their hair long,
but keep it bound up in a top-knot.
Perhaps I should except the Japanese in
this sweeping statement, for the revolu
tion in Abe matter of toilet which the last
decade has wrought in Japan almost
places the people tiiere on a plane with
Occidentals in this as well as many other
respects. The apparelling of the people
is in keeping with the climate, quite
simple. The Anamese whom 1 have seen
in full dress wore cloths around their
heads after a semi-turban fashion, and
usually an elaborate high comb. These
clothes were dyed some brilliant hue,
usually blue or red, but I noticed in
every case that one corner was left un
stained by the dyeing liquid, so as to
show to best advantage the original color
and the texture of the fabric. The shoes
worn are heelleus wooden affairs, that
turn up in front and terminate in a long
curved and pointed toe. The people
are slender, have high cheek bones,
homely features and are of a coppery
color.

The Englishman and His Stomach.
It is a custom in England, if my ob
servations in cottage and hall have been
correct, to have meals and lunches at
shorter intervals than the Americans. I
found the farm laborer quite accustomed
to eating his fourth meal; and in one of
the stateliest baronial halls in England I
have seen posted on the walls of one of
its rooms the orders of the day, relative
to the time of preparation of meals and
lunches for the family and guests, which
showed that the hospitable table there
was spread at intervals of about four
hours during the day and evening.—Bos
ton Bulletin.

It is stated that 15,000 mules are sold
in Atlanta every year, at a cost in round
numbers of about $2,000,000.

THE CHARLESTOWN ENTERPRISE.

WISE WORDS.

Bhun delays—they breed remorse.
Flattery sits in the parlor when plain
dea'ing is kicked out of doors.
To count but few things necessary is
the foundation of manx virtues.

A man as he manages himself may die
old at thirty, or young at eighty.

From our ancestor-* came our name:
but from our virtues our honors.

A man's own good breeding is the best
security against other people’s ill man
ners.

The best and most important part of
man’s education is that which he gives
himself.

Every man who cheats, or slanders, or
steals, adds to the aggregate guilt of the
nation.

If you are determined to live and die
a slave to custom, sec that it is at least r
good one.
What you are doing for love you can
do no longer for mere gain. The higher
motive drives out the lower.

Food breeding is benevolence in tri Iles,
or the preference of others to ourselves
in the daily occurrences of life.

The Lord is love itself and mercy, and
desires to save every one, and with
mighty power to attract him to heaven,
that is, to Himself.
If you have a friend that will reprove
your faults and foibles, consider you en
joy a blessing which the President of the
United States cannot have.

A virtuous man who has passed through
the temptations of the world, may be
compared to a fish who lives all the time
in salt water, yet is still fresh.

Time for Various Foods to Digest.
Many people discuss and “cuss”diges
tion and indigestion. Yet how little is
generally understood of these subjects!
Great writers like Stahl, Blondlot, Pay
en and Deschamps have produced vol
umes of scientific argument to prove
that the stomach is the great organ of
the human system and must be tenderly
and carefully treated. What we need,
however,, are simple rules.
Take, then, only such food as you
believe your stomach can easily assimi
late. To assist in this selection we ap
pend the time required to digest the
various articles of food mentioned:
one noun.
Pigs’ feet, boiled, 1 hour; boiled
tripe, lh.; boiled rice, Ih.
FROM ONE TO TWO HOURS.
Fresh eggs (beaten), 1 hour 30 minutes;
fresh salmon trout, boiled, lh. 30m.
oarley soup, lh. 30m.; venison, broiled,
lh. 35m.; brain, boiled, lh. 45m. ; sago,
•h. 45m.; beef liver, broiled, 2h.; mi k,
foiled, 2h.; fresh eggs, raw, 2h.; salt
codfish, 2b.; tapioca, boiled, 2b.;
kraut, 2h.; sour apples, 2b.
FROM TWO TO THREE HOURS.
Fresh milk, 2 hours 15 minutes; fresh
3ggs, roasted, 2h. 15m.; wild turkey,
roasted, 2. 18m.; wild turkey, boiled,
2h. 15m.; tame turkey, roasted, 2h. 30m. ;
wild goose, roasted, 2h. 30m.. young
pig, 2h. 30m.; lamb, broiled, 2b. 30m.;
gelatine, boiled, 2h. 30m., hash meat
with vegetables boiled, 2h. 30m.; boiled
beans, 2h. 30m.; boiled bread soup, 2b.
30in.; potatoes, roasted or baked, 2h.
30m.; cabbage, raw, 2b. 30m.: Savoy
cake, 2h. 30m.; chicken fricassee, 2h.
45m.; cream boiled yi oven, 2h. 45m.;
ulsters, raw, 2h. 55m.; beef, lean,
roasted, 3h.: beefsteak, broiled, 3h.;
mutton, roasted or boiled, 3b.; park*
raw, salt, 3h.; chicken bouillon, 3h.;
bean soup, 3h.; apple pudding, baked,
3h.
FROM THREE TO FOUR HOURS.
Beef, boiled, with mustard, 3 hours 10
minutes; pork, broiled, 3h. 15m.; mut
ton, roasted, 3h. 15m.; oysters, roasted,
3b. 15m.; carrots, boiled, 3h. 15m.:
sausage, fresh, broiled, 3h. 20m.; dried
beef, lean, roasted, 3h. 30m.; eggs, fresh
and cooked hard, 3h. 30m.; mutton
bouillon, 3h. 30m.: oysters, stewed, 3h.
30m.; butter, melted, 3h. 30m.; cheese,
old and strong, 3h. 30m. ; beef, boiled
with salt, 3h. om.; beef, lean, fried, 4h.;
veal, fresh, broiled, 4h.: chicken, boiled
or roasted, 4h.; duck, roasted, 4h.
FROM FOUR TO FIVE HOURS.

Beef, old and salted, 4 hours 15 min
utes; salt pork, fried, 4h. 15m.; carti
lage, boiled. 4h. 15m.; bouillon from
bones, 4h, 15m.; pork, salted and boiled,
4b. 3um.; veal, fried, 4h. 30m.; wild
duck, roasted, 4h. 30m.; grease (mutton),
boiled, 4h. 30m. ; cabbage, boiled, 4h.
30m.; pork, roasted, entrelarde. sh.
15m. tallow, (beef), boiled, sh. 30m ;
tendon, boiled, oh. flora. — New York
Herald.

The Boy and th* Bone-Setter.

Speaking of bone setters recalls a
good story which occurred in the north
of Scotland, where one of them had
risen to great fame, and no small for
tune by his skill. A country lad resid
ing a few miles off had got his leg
hurt at one of the local factories, and
had been treated for some time by the
local medical man without any good
result. His mother, who had great faith
in the neighboring bone-setter, wanted
the lad to go to him, which he declined,
preferring, as he said, “reg’lar
faculty.” Eventually, however, his
mother’s persuasions prevailed, and
he agreed to allow himself to be
taken to see Daniel R —, the bone
setter. A bed for the invalid was extem
porized on a cart, and, accompanied by
his anxious mother, he was after a
rather painful journey taken to the
town where the bone setter resided. The
leg was duly examined and it was found
necessary to haul it very severely, in
order, as the bone-setter said, “to get
the bone in.” The lad was liberal with
his screams while this was going on,but
eventually the bone was “got in,” and
he was told to go home and in a few
days he would be all right and fit for his
work.

He was lifted up on the cart again,
and with his mother seated beside him,
set off for home. “Didn’t Danny do the
thing well?” ” said the joyous old lady.
“Yes, he did, mother,” said the lad,
“but I was na sic a fool as gie him the
sair leg’’’ The “reg’iar faculty” will,
wc have no doubt, appreciate the story.
— Whitehall He view.

About 5,000 patents have been granted
by our government for churns, and still
inventors are at work perfecting new de
.igns.

Ora Hundred and Thirteen Mttwn oi
Organs.— ln n the organs of th it
manufacture. Ma on &#38; Harnhn have ren hoJ
No. 150,00. Arrange! in a line these wool)
reach 118 miles, or wi uld fence th« rni roaj
on one side from the .-rand Ceut a. .Mation it
New York, to within twenty miles of Spring
field, Mass Not only does this show the gr- at
popularity of Amer.can but it illus
trates what was declared by James Parton to
be a general fa t t a ho who nuiK<a th - best
arti le in his Line always ha- the greatest suo
cess. '

We understan 1 that the Mason A’ Hamlin
Company's new I plight Piano is now com
manding a laige sale, and is. in every way,
up to the standard of their u r. ivah d organs.
Me predict a large success lor this piano,
which is constructed on a new system, >aid
to be a decided aivame over the prevailing
wrast-piu system.— Boston Journal.

Mechanical dentistry is recommended
by a Philadelphia dentist as a suitable
and profitable employment for women.
He refers only to the manufacture of sell
of artificial teeth, w hich requires careful
and delicate manipulation, and nut to
surgical operations in the mouth.

Human Calvrs.

An exchange says: ‘’Nine-tenths of the
unhappy marriages result from human ealvee
being allowed to rim at large in society |>as
tures.’ N ine tenths of the chronic or linger
ing diseases of to-day originate in impure
blood, liver complaint or biliousness, result
ing in scrofula, consumption (which is but
scrofula of the iungsi, sores, ulcers, skin dis
eases and kindred aff tetions. Dr. Pieree’i
‘‘ Gol len Medical Discovery ” cures all these.
Of druggists.

The cost of running a theatre in New
York is placed by a loading manager al
$2,500 a week, which is rather below
than over the average. Speaking of six
teen theatres now in operation in thal
city, this manager says they pay the ac
tors $14,400 a week; stage hands, $850;
six scene painters, $430; sixteen prompt
ers, $400; sixteen property men, $240;
band, $3,200; total $19,570. To paj
these alone $1,214 a week is required in
each house, and rent, lights, advertising
and other needful expenses will run the
cost ud to fullv double that sum.

flow Women DilTer From .77777

At least three men on the average jury ars
bouud to disagree with the rest just to show
that they’ve got minds of their own; but
there is no disagreement among the women a*
to tire merits of Dr. Pirreet " Favorite I*ra
scription.’’ They are all unanimous in pro
nouncing it the best remedy in ihe world i'oi
all those chronic diseasnc, weticnosses and
complaints peculiar to thei- se... It trans
forms the pale. haggard, dispirited woman
into one of sj>arkhng h alth, and the ringing
laugh again “reigns supreme” in the happy
household.

In every puit v. country the rail
roads have been much troubled by the
rank growth of w’eeds on and near to
their tracks, which have cost them 8
great deal of money and trouble tc
eradicate. A Western road is trying I
contrivance devised to destroy these
w’eeds, and which promises to prove
quite successful. It consists of two iron
pipes projecting on each side of the en
gine in front. The exhaust steam is con
ducted into these pipes instead of intc
the smoke-stack, and the steam and gas
are thereby thrown out close to the track
in front of the engine on each side. It
kills weeds aud grass for two feet on
each side of the track.

* * ♦ ♦ The w’orst pile tumors cured in
ten days, rupture in one month. Pamphlet
tw’o (3ct.) st imps. World's Dispensary Medi
cal Association, BufTal >, N. Y.

The matter of holding a permanent
exhibition in New York is being dis
cussed. In his address at the openingol
the American Institute Fair recently,
Honorable Abram S. Hewitt declared
that New York should have a great ex
hibition. located in Central Park, and
kept open six months in every year.
Since then the press has taken up the
subject, and the drift of puolic senti
ment seems tending toward a permanent
exposition, kept open the year round, to
be located in one of the new parks,
where splendid zoological and botanical
gardens could be maintained in connec
tion with grand exhibits of mechanical
and other industries, forming a splendid
“people's college,” always available foi
the amusement and instruction of the
communitv.

Repeated requests have induced the proprie
tois of Lydia K. Pinkham’s Vegetable Com
pound to send by mail to various lady corre
spondents, large mounted |>ortraits of Mrs.
Pinkham; and now many a household wall is
adorned by the familiar, motheily face of 'ho
Massachusetts woman who has done so much
for all women.

The Japanese appear to be determined
to render themselves, as far as possible,
independent of foreign countries. Thej
have, says the Pharmaceutical Journal, es
tablished in Tokio a factory for the pro
duction of pharmaceutical chemicals on
a large scale. A company with a capital
of about £40,000 has been formed for
this purpose. Of this amount the gov
ernment has contributed one-half free ol
interest for twenty years, beside making
a free grant of land and erecting the
necessary buildings. A similar company
is taking up the utilization of the waste
sake from the native bieweries in the
manufacture of alcohol, and ths manu
facture of bleaching powder on a large
scale has been commenced.
Ilie Andrews Parlor Folding Beds receive the
highest commendation wherever used, in Ho
tels, in Boarding Houses and Priv-te Families.
Keeler’s, 83 to 91 Washington street, Boston.
He Known It.
Hiram D. Maxfield, formerly of Silver
Springs, R. 1., lias no doubt about the wonder
iul curative powers of Kidney-Wort. He was
*o afflicted with Kidney Complaint that ho
could not stand on Im leet from pain and
weakness. As soon as he commenced using
Kidney-Wort be experienced immediate relief,
and at once began tn grow strong, and was re
lieved of all pain and unpleasantness. He says;
*‘l know I have b<-en cured by Kidney-Wort.’*

Catarrh in the Head

Orifinatea in Dcrofulous taint in the blood. Honea
th* proper method by which to cure catarrh in to
6/oerf. Ite maw diaaerooablo symptoma, and the
dancer of developing into bronchitie or that terribly
fatal diaoMe, oooeumption, are entirely removed by
Hood's Sarsaparilla, which cares catarrh by purifying
the blood and also tones up the system and greatly im
proves the general health of thoee who take it.

A Lucky Accident

'Having been a sufferer from catarrh for six or eight
yaan, and having tried nearly all the wonderful sure
cores, inhalers, etc., and spending nearly a hundred
dollars without benefit, I accidentally tried Hood's Sar
saparilla. The discharge from my nose was greatly in
oreaaed the first bottle; then it grsdually became leas,
and in taking less than three bottles 1 find myself
g’-eatly improved. Hood's S iraapsnlU will cure ca
tarrh."—M. Abbbt, Worcetlir, Mass.

Hood’s Sarsaparilla
■old by all Druggists, fl; six for 95. Made only by
O. L HOOD A 00., Apothecaries, Lowell, Mass.

100 Doses Ono Dollar

The Conflict

Between dhe'se an i health h often brief
and fat fl. It is better to b« provide d with
< hen >an<l -imp’s remedies for sn< h common
di orders as coughs, colds etc., than to run
the risk o contra ting a fat il a e through
neglect. Dr. Wm. Ha Ts Balsam is a sure and
sate remedy for all diseases of the lungs mid
< hest. If taken in seasou i' is c» rt tin to cure,
mid may sa\e yo i from that terrible <iis
consum|dion. It hm lK»<-n known an I use i
for m uiv v« ars an I it is no exa ’geration t >
a.’ that t is ihe best remedy in the world for
g >S **te.

Petrol.-um is a natura n. an I •
nature neverm ik.-~ an: staket ;.ro< - ne. rut
fnmi pure p,-Irole;:•.). ts a . . rhi n mx
for diseased and si .d v Lnr. ■ n I wlnr - <
ustsl will never l»e su: r . bx a.ivoih. ;

Foe DTsrFrsiA. imhih st ion depression of spir
its and general debiiity in their various forms,
also as h pr<-'entive against fever and ague an I
other intermittent b vers, the “Fet ro-I’hosphor-
Hted Elixir of ( va," made by Caswell,
Hazard A Co., New Y"ik. .ind sold by ail Drug
gists, is the best tonic ; and tor patients recover
ink; from fever or othei si, IrneM it hag no equal.
Heart Pains.
Palpitation, Drop-icd Sarlli -gg, Dizziness,
Tn ligestion, lleadache, >1 ■Oplessne.M cured by
“Wella* Ilunlth Renewer.”
" Konuti on Hata.”
Clears out ruts, mice, roaein s. flies, anta, bed
bugs, skunks, chipmunks, gophers. 15c. Drug
gists.
” Kouith on form."
Ask tor Wells “ Hough on Corns.” 15c.
Quick, complete ’ cure. Han! or soft corns
waits, bunions.
All Ladies Shoild Know That
Ikmmls, scarls, riblsms and nil fancy articles cun
be made any color wanted with Diamond
Dyes. All the popular colors. 10c. at dmg
gists. None equal them. Wells, Richardson
&#38;Co., Burlington. Vt.

The Grest American Chorus.

Sneezing, sniffling and coughing! This is
the music all over the land just now-. And
will be until Juno. ‘Tvo got such an awful
cold in my head.” Cure it with Ely’s Cream
Balm or it may end in the tough* st form of
Catarrh. Maybe you have catarrh now.
Nothing is more nau.-eous and dreadful. This
remedy mast >rs it as no other ever did. Not
a sntffl nor a liquid. Applied by the finger to
the nostrils. Pleasant, certain, radical.

“ Kuchu-Paiba.”

Quick, complete cure, all Kidney, Bladder
and Urinary Diseases, Scalding, Irritation,
Stoye, Gravel, Catarrh of the Bhukler. ($l.OO.
Druggists.

Vounp Men! Head Thia.
The Voltaic Belt Co., of Marshall
Mich., ofler to send their celebrated Electro
\ olfaic Belt and other Electric Appli
ances on trial for thirty days, to men (young
or old) afflicted with nervous debi ity, 1 >ss of
vitality and manhood, and all kindred trou
bles. Also for rheumatism, neuralgia, paralysis
nnd many other diseases. Complete restora
tion to health, vigor and manhood guaranteed.
No risk is incurred, as thirty days’trial is -1-
lowed. Write them ut once for illustrated
pamphlet free.

Fok R*t»s fur advertising In this pa er, apply to tbe
PublUher N »•' 4R

DR. DAVID
KENNEDY’S
X
For the Cnre of Kidney and Liver Com*
plainta, Constipation, and all disorders
arising from an impure state of tb*> BLOOD.
To women who suffer from any of the ills pecu
liar to their sex it is an unfailing frinnd. Ail
Drugxiets. One Dollar a bottle, or address Dr.
David Kennedy, Itondout, N. Y.
Complete Cure of Second Lieutenant Key
and Wife, of New Jersey.
The wife of Second Lieutenant Key, Company G.
Third New Jersey Regiment, says, tinder daie of
Mai ch Ist, ISS4 :
“ I wo years ago my-elf and husband were taken
down with Malarial Fever. After consulting out
family physician, and finding no relief, we tried
DR. DAVI!) KENNEDY’S FAVORITE REMEDY,
and it lias completely cured us of thia disease,.”
~ IMSI . This Plaster
3 <1 ’•) ly upon tire
* SMBS' n luuscleb an I the nerves of
* back, i.ie Beat of ad
"2 wf J W a »aln> >aln Ah No medicine to
S 1 throw yuur system out of
‘ f order.
(a J 'k Fur all Lung Troubles,
IS V \ whether local or deeply
Ie f _ A As* I I sealed this phi-ter will Ire
t 0 g,ve ,u ' Unt re "
F W । | O • For Kidney Trouble,
i W 7 I Rheumatism. Ne ira gta.
r. w I Balu m the Side and B-u k
I I \ .Vhe, are a cc
E? K I mut speedy cure.
k JK UMQttnS MSg) for
‘SSBcema, or five for SI.
RACP Mailed on recelit of
nw pr ce by Mnith,l»oolit
k D| ICTTDI He *initii, lien ial
LAvlLlll Agenta. B ston.
MASON &#38; HAMLIN
s^sORGANS^Vo 0
HIGHEST HONORS AT ALL GREAT WORLD’S
1 OR SL\EX i EEN YEARS.
Only AmerlcHii Orgiim* A wariled Hiich ut uny.
For Cash, Easy Payments or Rented.
UPRIGHT PIANOS
Fresentii'g very liiffheßt excellence yet nltuln<-d
n tach in-trumeut h . adding to all previous impr v<*
meiita one of grea a- value than an* ; 8-curing mosl
pure, refined, ;d t ties and increttbed durability
especially avoiding li.ibihty to get out of tune. lllua
trated Catalogues free.
Mason &#38; Miu Organ and Piano Co.,
Boston, 154 Tremont St.; Work, 1G E. I4t>
Ktq C'liicayo, 1-11) Wabuvii A vo.
WK WANT 1000 BOOK AGENTS
lor the n<-w book l llilt l \-THKEE YEARS AMONG
OUR WILD INDIANS
IL Gen. DODGE nnd tL-n. bHERM rN. J i, e .riling
book “lit ln<lGr M <*d by i*rcs t Arthur, Gen'a Gmut, " Iktihuii,
bheiidan, and thousand* of Emin nt Judjt*, tkruynhii,
Editors as •• and Fwwt Illustrated Italian
••"ok hv< >• I'lnjuhHd." It takes bke wildflrv. and .‘gents aril
1 “'•“y- W-T&#38;.OOO sold Ila AuthorO,,),
J n . make It Uij: lxftnino b<x>k for
2 for Cirvulara, Specimen Plate, E-xtra T'errna. etc., tc
J» WORTMINGTHN A CO.. Hartford,Conn.
A
I Mice, Roaches, Wate -
y/' JPbAnenMjT Beetles. A ts
rf ai d all verm u Hotels
I Jr w EXTER-j dwellings arid granu-
H VIIHATOM ilea cl.ared in one
i N\ 4 .Lx night. Mate to have
\ ’round. No arsenic.
Parson’s Kxter»
miuator, !• cis.
X Mail 2Uc. Wscxs 4
'a- Poirga. Boston. Mass

I It Is • well-known fact that most of the ■ ■ ■ ■* Bl ■■Bl B E II 11 11
I Boise and Cattle Powdertold In this coun- 19 ■ ■ Bmß m ■ B £3 M
■ try is worthiest; th:., Ekerldaa s Condi- BlH| RB Km L* Xa W 3 ■■ V
| tion Powdor is absolutely pure and verv ilfl £1 am EH H OIS fl SW 1 -
lILEIV LHI
1 Condition Powder. Dou, one tuaftooaful to each pint of food. It will also prevent and cure
Z* LI I EDA Hog Cholera, Ac. Sold everywhere, or sent by mail for
Ivnlvlvdl vnULCHA, a cents in stamps. Also tarnished in large cans, for
| broaden'use, prlos 11.00; by mall, *1.20 Circnlare sent FREE. I. S. JOHNSON A CO., Boston, Mus.

Werd* of Warning and CemfarL
*lf you are suffering from poor health or
on a bed of sicknem, take heo*
if you are niinply ailing, or if you leel
‘weak and dispirited,
•without clearly know
‘ing why. H< p Bitters
‘will surely cure you.

If you arc a minister, and
have n-ertaxesl yourself with your
pm.-doml duties, or a mother worn out
with care end work, or a man of busmen 01
i;»bor. weakened by the strain of your every
day dutue, or a man of letter* toilin ' over
your midnight work, Hop Bitterw will must
-urdy strengthen you.

If y<ni are suffering from over eating 01
drinking, any indiscretion or dissipation, or
are young and growing too fast, as is oitaj
the case,
“or if yon are In the workshop, on the
‘f» in. st th--desk, snywhere, and feel
•that your system needseleaasinr, tone
‘ing. or -t ii- 11. in;, without lUtoxicaU
‘ing, if you are old,
'b’eod th n and imp :re, pulse
‘feebit-, nervt-a tin- '-ic.y, faculties
‘w.iumg, II >p liot rs I- what jou need to
‘give you new life, hea.th and vigor.”

If you are cos i e, or dyspeptic or softer
Isg from any oilier of the numerous dis
eases of the stoma h or bowels, it ttiyouf

own fault if you rema n ill. If
yos are wasting away with any form
of Kidney disease, stop tempting death this
mcment, and turn for a cure to Hop Bitterst

If you are sick with that terrible sicknem,
Nervousness, you will find a “Balm in Gil
•ad” in Hop Bitters.

—if yon ere a frequenter, or a resident of,
—* miasmatic district, bairicade your eya-
—tern against th* scourge of all countries
—Malaria, Eiudem c, Bilious and ln*er-
—niittent Fevers by the use of Bop ElUers.

If you have rough, pimply, or sallow skin, bad
breath, Hop Bitters will give you fair skin. rlc|
blood, the sweetest breath andh a th. iuOO wtU
be paid for a ca c they will not cure or help.

A La ly’s Wish.

"Oh, hew I do wish my skin was as clear art*
‘soft as yours,” said a Indy to her friend. “Yos
‘can easily make it so,” answer d the friend.
“How ?" Inquired the first lady.
“By 1 s ng Hop Bitters that mikes pure, rick
b o d and blooming health. It did it for me as yos
olwerve.*' ——-—

t yN' ne genuine without a bunch of green Hopi
on the white label. Shun all the x He, pohonoua
stuff with “Hop” or “Hops’' in their name.

• •> LYDIA E. PINKHAM'S. •
VEGETABLE COMPOUND
• ••• IS A POSITIVE CURB FOB •• •
* lfiTS jjy All tho«s painful Complaints
• * and Weaknesses sa common •
• ****** to b**t ••••••
rOPULATIOM.* •
• Re punvow a fur th» AwMng
inii the relit/ of v-dn, and that rt Aott aB
it Jo, thtutandt of ladiet can fflaAßy teatify. *
• It will cur. entirely .11 Ovarian troubles, Inflamtna-
Mon and Vt—ration, Eallln< and IHsplacementa, and
Oone.au.nt Spinal WeakneM, and is particularly adapt
*l to the Change of Life, ••••••••••■•• <•
• It removes Faintness,Flatulency, destroys.tll craving
for stimulants, aud relieves Weakness of th. BtomaciU
It cures Bloating. Heivlscht's, Nervous Erortratfon,
Genend Debility, Dspressien and Indi -
go<tion. That feeling of bearing down, caustßsr paia,
and Itackachn, Is always permanently cured by ft. uml
• Send stamp to Lvna, Mim, fer pamphlet. Letters o*
confidential!v answered. Ear talent
CREAMjBALM.
tauBe9 _!!?. Pal "’
a^/?®Es^r i¥es j^ ,er at
Once. NotnLiq-
F u id or Snuff. Ap
int° nostrils.
Thorough Treat
ment will Cure.
SBV crurn 1 ’ 118 Trial.
MAY "r El. VEkr< 50 cents at Druggists.
* " to cents by mail leglo-
tered. Send for circtii.r. Sample by mail locta.
ELY BROTHERS, Druggists. Owego, N. Y.
“PERFECTION”
f CLASS FOUNT
STUDENT LAMP,
(Pat. Nov. 22, ’BI.J
(kmibiu ng with our Self-Aot
ng Valve and Non HeaUrg
Burner, the One thing newdM
t<> make an
Absolutely Perfect Lamp
No running over of the oil
nor leaking of th. fount. Ask
f<> the Perfection <«liim
rOunt Ntndcnt I.niinp.
Manufactured and for sale, at
wholesale only, by the
Manhattan Brass Co.,
Firnt Act. and St., tf. F.
Send fui atr-l Explanatory Circular.


IungIBALSAM
t lire. < oiisuitiption, Cold., I'nrumoniK, I*,
Ihirnzu, Broiiciihil DifHculoi-s, BrnnclUtig.
II on men t.ihnin, Croup, Whonnind
< oumS, mid nil DisCHae. of the BrmtfiinS
Orgnnn. It eo«>t lac™ mid brnla the ’Heiiihr.sjio
ol tin- inlletiled mid poisoned by the
dlNt-aMi-, mm priveiit. the iilulu awewta mid
m-riiHs tin- cheat winch nci-uiiißany
It. ( onHUiiipt ion la nut mi incurahlr tnuimly,
TIAU.'s BILSAU will ewre you, even
though prm- --i nml aid full a.
■Mnnißfll CI-OOD HEWB
mSS"— LADIES!
Greatest induc.ru- nts ev.r oA
Bp fered. Now's your t'm-to get ap
orders for our c.l.l>r..t«d Teas
HExJyIMH and ('otleeM.and aecitr. a Mauti
ful Gold Hano or Moas Rom China
EEsSEBBSI Ti aSot, or Handaome Decigated
Band Him Rose Dinner Het, or Gold Band Mose
nted Toilet Set. E r full particular, address
THE (;REAT AMEHH AN TEA CO,.
P, O. Box as. 81 aod IB Vweiy 81, Mow YoA, r
mvrageumM* l.ving Agents can’t SEIJ,.nd tetl
■WKnqaiUiEKl t o- truth about Jo-V Kh. Put vour
■Ay9l’il "U pa|M-r ami mgn if y,,„
BlvlV>Alm4 V ' s SI ANDAKD
mW $60.5 TON
WAGON SCALES.
: MiG Beam Box Tan- Beam. Fn-igM
■ Awl l’aid. Free Prh-e I.i«t. Everv Hua
uddros. of binqiiaittom
sSSsESMBHII UINGHAMTQN.N.
REAL ESTATE AGENCY?’
Those having F ritts, or other real <stat - tor sale, by
sending d, - • ptton .md price may find <,uick sale. Cor
respon leim- from th >»e wtsbing to purchase solicited;
bTEPH K \ THOM tS. Montpelier, Vt.
lAKGE set •etinph s prett est chromo school,reward,
>'nplo ia. im-rit, redit, birthday, Christinas, new
year, scripture cards, 4c., auc Art Pub 00., Warren, Pa-
AGFNTM WANTEDfor th. best and fastest
selling Pictorial B >oks and B bleu Prices reduoed
B|>ero t>t Nartova*. Pcriishino On P lla P*
W# I p.r M.n, Qaick, .sr., s.'a Book Ow.
W IVSKZ I* Civlai. Ac«Qcy, ISO Fultau al., *•* T.r«.

34

CHARLESTOWN ENTERPRISE
A Local and Home Newspaper,
PUBLISHED EVERY SATURDAY .MORNING
—BY THE—
CHARI I '/ OH'.V ENTERPRISE COMPANY.
Subscription Price, $1.50 per Year.
Ofyk e IN Eri.I.EK'S Bl<uK. 25('ity Sqvake.
Up Only One Flight.
Telephone No.
Sul»< rilHTs and rcud. i- have a -landing invi
tation to vi-it tin- ofliov or -end ns note-of
inter, -t from their m ighl>or)ioods. >’.n li a- -ick
ne-s. deaths, inarriane-. accident-. tire-, etc. etc..
—anything ot interest t<> their community or to
the public. We are indebted to manv ot our
patron- for new -üb-< riber- and item- of inter,
e-t; and we invite all to our a —i-tanee.
Leoai. Anv i k ri-i no. — <>ur friend- are in
formed that in -electing a medium for the in-. r
tion ot legal adverti-ements. the Enterprise
offers the same facilities, at as low a price, a
any newspaper i—ued in the county. It i
optional with parties to order their notices to
appear in -uch new-paper- a- they may be
pleased to favor.

Entered at the Roston Post-office as secotut
class matter.

SATURDAY. NOVEMBER 8.

The Charlestown Enterprise Com
pany has been duly incorporated under
the laws of Massachusetts, with a capital
stock of five thousand dollars. At the
first meeting. Ezra J. Trull was elected
President of the Company; John S. Flan
agan, Clerk; Dr. James A. McDonald,
Treasurer’; and George A. Sanderson.
John J. Fitzpatrick, Philip J. Doherty
and John R. Murphy, together with the
President and Treasurer, were elected a
Boat d of Di l ectors.

LODGE’S TRADE WITH COTTON.
Weare aware that Henry Cabot Lodge
and Joseph IL ('often both deny that
there was any trade between them to
defeat Congressman Lovering and elect
Mr. Cotton senator. Yet acts speak
louder than words. Mr. Lodge’s friends
have always been Mr. Cotton’s bitter
political enemies. And they had good
cause for their enmity to Mr. Cotton.
He defeated the Nahant Statesman in
the contest for the Republican Con
gressional nomination two years ago.
Suddenly it becomes known that Mr.
Lodge's friends in ( harlestown have de
termined to overcome their old preju
dice against Mr. Cotton and give him
the senatorial nomination of the Re
publican party in this district. Why?
Can any person give us any reason why
the Republicans nominated Mr. Cotton
unless it was to help secure Lodge’s
election?
And Cotton is a shrewd enough poli
tician to know that this was the reason
why he was nominated. He accepted
this nomination knowing that it was
given to him to assist in Lovering’s de- I
feat. He must have known this, and
we are informed that at the polls he did
his part to accomplish that end. The
Enterprise has opposed him but will do
him the justice to say that he acted
more honorably than Lodge in the
matter.
After Cotton had been secured to
Lodge it was found that a large number
of Charlestown people outside the ranks
ot the politicians were very bitter in their
denunciation of the trade. A gentleman
interested in the success of Mr. Lodge.

wrote a letter to him informing him of
this fact. and stating that the belief that
a trade had been made was greatly in
juring Mr. Lodge’s chances. He re
ceived in reply the following:—
Boston. Oct 30, 1884.
Mv Dear Sir:— l have received your letter in
regard to the Senatorial nomination in Charles
town. I can only say that I have scrupulously
ami rigidly refrained from taking any part what
ever in regard to local nominations by the Re
publican party. As Chairman of the State Com
mittee and a candidate myself, no other course
is possible or proper for me, and I have not and
shall not depart from it in any instance, or any
where, and you may make any use of this letter
which you think is proper. Truly vours,
H. C. LODGE.

This letter was shown to many who
were disposed to find fault on account of
the nomination of Cotton by Lodge’s
managers. Its purpose was to disclaim
any responsibility whatever for the nomi
nation of Cotton. It impliedly, there
fore. was a censure on his managers for
making an unfit nomination. It will be
noticed that not even one kind word for
Cotton is spoken in this letter, written
in answer to an enquiry as to Lodge's
connection with the former's nomina
tion. This helps to account for Mr.
Cotton's small vote.

Lodge's managers courted Cotton;
nominated him: then slaughtered him.
.Such political methods were fitly re
buked at the polls by the people of
Charlestown and of the Sixth District.

Lovering’s victory was the grandest
of them all.

Among the names we hear mentioned
as candidates for aldermanic honors are
Francis W. Pray, John I*. Hilton. Robert
R. Wiley, William T. Van Nostrand,
Patrick J. Donovan, Joseph ('aidwell,
Francis J, Muryhy, J. Tyler Hicks and
Timothy T. Sawyer.

CLEVELAND AND HENDRICKS.

A e we go to pres» the glad tidings of a
sweeping Democratic triumph are con
firmed. Cleveland and Hendricks will be
the next President and Vice-President of
the United States. The conscience of the
country has asserted itself. Public plun
derers are rebuked. The day of retri
bution for official offenders has arrived.
“Let corruption tremble.’’ The honest
manhood of both parties has at last de
clared, in unmi-takable language. “The
rascals must go.” It is a hopeful day
for Americans. The political sky will be
clearer. The administration of public
affairs will be more honest. Capacity
and intelligence in public office will take
the place of arrogant partisanship.
Charlestown Democrats may well feel

THE

proud. A solid Democratic delegation
at the St ate House. A Democratic sol
dier elected to Congress over Henry
Cabot Lodge; and to crown all, an hon
est Democratic national admiul<trition.
We rejoice and exult as Democrats
and as patriots, in the dawn of a new era
of prosperity’ for our country.

The Enterprise takes not a little glory
to itself in being the only paper in
Charlestown that advocated the election
of Cleveland, and Lovering, and Trull,
and Barry, and Sanderson, and Prime,
and Muiphy, and Doherty. The moral
naturally follows that candidates to be
successful should stand for the princi
ples that the Enterprise advocates.

i- THE HONOR OF THE COUNTRY
‘e । TRIUMPHANTLY VINDICATED.
After twenty-four years’ vicissitudes
d- in the dark shades of opposition, victory
perches on the Democratic standard, ami
it assumes control of the Government in
National affairs. After one of the hard
est contested and closest elections in the
history of the country, Grover Cleveland,
1 the great reform Governor of New York,
is elected to occupy, for the next four
1 i years, the highest position in the na
i tion. He was faithful over a few things
' । in New Aork; we place him over many
'* ।at AV ashington. AVe do not look upon
y . this triumph in the light of a partisan
e . victory. All honor to the patriotic in-
R i stincts of the Independents, who eschew
।ed all former party affiliations, and
ranged themselves on the side of reform,
• honesty and good government, and con
- tributed their full share in redeeming
t the country from dishonor. Far be it
• from us to detract one iota from that
t meed of praise which is their due in
the great and patriotic endeavor. We
' are sorry to lie forced to the conclusion i
' that many of our former friends basely I
I deserted us in our hour of need to follow I
the syren enchantments of false gods. 1
i The election of Cleveland is a rebuke
to the money kings of Wall street, the
subsidized railroad corporations. and
the banking institutions, who assumed
to uprear on the ruins of the Republic a j
government of wealth and monopoly, j
The defeat of James G. Blaine is a re- '
buke to that once great party, which in- i
suited the intelligence and moral sense ।
of the country by nominating for its I
standard-bearer one of the most corrupt I
and unscrupulous politicians in its ranks; j
who stood self accused of using a high !
and honorable position for his own per- i
sonal aggrandizement. The youth of the j
country will now know that the way to
positions of preferment and trust is not
through the aid of “magnetism,” dis
honesty, lying and organized rascality;
but through that rugged honesty and
truth which have been the distinguish
ing characteristics of President-elect
Cleveland's public career.
At an early period of the campaign we
pointed out what has since become pa
tent to every person—the existence of a
corrupt bargain between General Butler
and James G. Blaine —but the extent of
his treason was unknown till after the i
election. The result proves conclusively
that the larger portion of Butler's friends
voted direct for Blaine. We understand
that even Tommy Grady and his cohorts
j cast their ballots direct for the Knight
jof the Soiled Plume. This desertion of 1
the party in such a crisis cannot easily •
he condoned. We shall always handle
without gloves its author and abettors. *
i The treason of the arch conspirator of ’
them all —Butler, whose treachery lost to
us the State of Massachusetts, and ren
dered others doubtful, will receive the
execration of every ti ne Democrat, and 1
he will descend to his political grave ’
unhonored and unsung. 1
With power comes great responsibili- '
ties. The Democratic administration
will be truly a government of the people;
not of a class. All interests and indus
tries will be zealously guarded and re
ceive their legitimate reward, and noth- ,
ing more. American commerce will (
again compass the ocean. Taxes will be '
reduced to their proper basis. Honesty ' (
will reign supreme in every department i }
of the government. We have much to ; ।
hope and expect from the party that j (
ruled this country in peace and pros- i s
perity for considerable more than half a : ]
century. AVhatever influence the Enter- , j
prise can exert will be cheerfully and i ]
conscientiously employed in the accom- । i
plishment of these very desirable ends.

The Enterprise showed up the trade
of Cotton with Lodge. The desire of
Charlestown people to rebuke this trade
defeated Mr. Lodge. Therefore the En
terprise takes to itself some of the credit
that is due for the election of Mr.
Lovering.

HARD FACTS.

It is undoubtedly a fact, and will not
be denied byjthe ma jority of Republicans
of this district, that the nomination of
Mr. Joseph IL Cotton for Senator was a
grand mistake, and cost Mr. Lodge many
votes, if not his election. It is also a
fact that Mr. Cotton's friends traded Mr.
Lovering and Mr. Lodge wherever and
whenever they could secure a vote for
Mr. Cotton. The result shows that the
Democratic voters in this District can be
neither bought, sold, nor bribed.

The Herald said on Wednesday: It is
a pity that Mr. Lodge finds his road to
Washington blocked. It is a greater
pity that he swallowed his convictions.

TWO YEARS HENCE.

The people have done only part of
their duty in electing Henry B. Lovering
to represent them. Had they buried his
opponent deep down in the chasm of
forgetfulness, as they did his wire puller
and political trader under the burden of

THE CHARLESTOWN ENTERPRISE.

an overwhelming majority, then the}’
would have done their full duty. Two
years hence, if another opportunity be
given them, they will be successful.

Mr. Edwin I). Sibley, the defeated
candidate of the Ward Five Republicans
for Representative, has the respect and
good will of even his adversaries. No
Republican in the ward could have
made a more honorable contest or polled
more votes. Many Democrats expressed
the regret that they could not vote for
him for an office to which he could be
elected.

' THE MANHOOD OF THE SIXTH DIS
TRICT VINDICATED.
, In our last issue we appealed to the
। manhood of the Sixth District to support
i the candidature of Henry B. Lovering
fora re-election to Congress, and we are
happy to record that our appeal was
not in vain. It is reassuring to find that
the electors of this district spurned all
the allurements of money, of patronage
and of newspaper influence, and triumph
antly re-elected their faithful representa
tive to his seat in the next House of Rep
resentatives at Washington. Mr. Lover-
i ing has reason to feel proud of his great
l victory over the powerful influences
■ brought against him. His opponent was
i one of the ablest and most respectable
representatives ot his party. Chairman
jof the Republican State Committee;
crowned with the laurels won in the
memorable contest with Butler one year
ago; backed by the lavish use of that po
tent factor in Republican political cam
paigns—money: supported by almost the
entire press of the district, ami his can
vass in general by some of the most
astute politicians in the State: Henry
B. Lovering lias reason to be proud of
his re-election. His victory is a triumph
j of the doctrine of popular suffrage and a |
rebuke to unscrupulous methods in poli-
i tics. It demonstrates that money is not
all potent in carrying elections. The j
will of the American people when once i
aroused is irresistible. Before it the best !
laid plans of wily politicians crumble to :
dust. Here is a man without any of the '
। advantages of wealth: with no influence I
j of political patronage: without the pow- ।
' erful agency of the press; with nothing !
to recommend him but his sterling hon
esty, his ability and his unswerving fidel
ity to the public interests: elected by the
torrent of public opinion to his second
term in Congress. It is an event equally
honorable to Mr. Lovering and to his
constituents. The enthusiastic sup
port given him by his friends was
entirely a matter of honor, of love,
and of duty. We claim the proud
distinction of being the only paper in his
district that advocated his cause, and we |
feel that it does not at all savor of ego- ;
tism to approriate to the Enterprise a
share in the accomplishment of that i
grand result. From the start we advo
cated. with all the earnestness and ability
at our command, the election of this pub
lic spirited statesman. We were confi
dent that the manhood of the Sixth Dis
trict would assert itself. There is a con- J
science in polities after all and the Re
public still lives.
«
The vote cast on Tuesday shows that
the day has gone when Republicans j
can buy their way to an election in this '
district. There was a horde of ballot I
distributors at the polls in the Democrat- I
ic precincts, working for Republican
candidates, but their miserable services
were of no avail.

LODGE OF NAHANT.

The people would not listen to the
voice of this political syren and left him
on his lonely rock-bound shore to listen
for a few more years to the water splash
ing its snowy foam against the high cliff's.

The Charlestown Mugwumps showed
Mr. Blaine what they thought of him.

At the meeting on Wednesday, in Tre
mont Temple, Mr. Eugene IL Clapp con
gratulated the Temperance Alliance on
the defeat of Henry Cabot Lodge for
Congress, a man whom he termed as rep
resenting that which, more than any
thing else, debauches and corrupts the
characters of our young men. Mr. Clapp
said that Mr. Lodge was probably not so
ready to talk about bringing libel suits
today as yesterday, and the country is to
be congratulated that Lodge was defeated
by the Prohibitory vote.

00UN0ILL0R TARR.

We do not regret the defeat of Council
lor Tarr. He is too fond of General
Butler. Nothing could swerve him from
Ids fidelity to “the old man.” When we
published an article commenting on the
infamous trade between Butler and
Blaine. Councillor Tarr was too sensitive
to stand it. He did not have the courage
or the ability to answer the charges con
tained in our editorial, so he sent us a
letter ordering us to stop his paper.
Here is his letter:

■ Commonwealth of Massachusetts, )
Council Chamber, ।
Boston, Sept. 15, 1884.
Ed itor of the New Enterprise, Charlestown, Mass.
Sir: —Discontinue sending me the New Enter
prise. sis I do not want it nor any paper in which
appears such a malicious and unreasonable ar
ticle as appeared in your issue of the 13th inst.,
headed “ Butler’s Deal.” Yours, etc.,

We did not publish it before because
we did not wish to injure bis chances,
which we knew were small, of a re-elec
tion. We publish it now to show what
a great man Councillor Tarr is, and
wl.at profound judgment he has on po
itical matters.

Address for the next two years—
Henry Cabot Lodge, Nahant, Mass.

There will be some work done at the
Navy Yard next summer.

THE BUNKER HILL BAPTIST CHURCH

Coi’nei* of Bunker Hill and Mystic

Installation of Rev. R. B. Moody, the New
Pastor, on Wednesday Evening.
The Bunker Hill Baptist Church, cor
ner of Bunker Hill and Mystic streets,
was brilliantly lighted on Wednesday
evening, and the main auditorium was
tilled to overflowing, as was also the
gallery. In the altar were seated half a
dozen clergymen. The floral display,
while not elaborate, was in exceeding
good taste. The cause of this gathering
<»t the unusual assemblage on a week-day
evening was the re-dedication of the
house of worship and recognition of Rev.
R. B. Moody as the pastor of the society.
I'he order of services was as follows:
Organ prelude; anthem, “Praise the
Lord. () My Soul;” invocation. Rev. Mr.
Bateman of Chelsea, who took the place
of Rev. AV. O. Holman of Rockland who
was unable to be present; reading of the
Scriptures, Rev. Leonard A. Freeman of
Leominster; anthem, “Gracious Spirit,
Love Divine;” dedication prayer,
Rev. IL C. Graves of Haverhill; sing
ing of the dedication hymn, “Oh,
bow thine ear. Eternal One!” Rev.
O. P. Gifford of the AAarren Avenue
Baptist Church, Boston, delivered the
sermon, selecting for his text St. John
12:31-32. The eloquent clergyman was
listened to intently as he proceeded to
speak of the great goodness of God and
how he blessed this clyirch and people.
Following in order was the singing of J

the anthem, “Prepare Ye the AVay of the
Lord;” recognition prayer, Rev. S. AV.
। Foljambe, I). I)., of Malden; recognition
hymn; address of welcome, Rev. G. E.
j Horr, Jr., of the First Baptist Church,
i Lawrence street. Mr. Horr welcomed
the new pastor to Charlestown and
spoke feelingly of the encouraging suc
cess of the Bunker Hill Baptist Church.
Hymn; benediction bv the pastor.
Among the large audience were fifty
. ladies and gentlemen Lawrence, for
merly parishioners of the new pastor,
who came to witness the ceremony and
congratulate Rev. Mr. Moody.
Several months ago the society deemed
it advisible to alter and improve the
church edifice and with this in view
work was begun. The upper portion of
the building was entirely changed and
the church now presents a very neat and
attractive appearance. The exterior is
plain having upon the southwesterly cor
ner a spire of moderate height. A hand
some rose window has been placed in the
front of the building and windows of
cathedral glass have taken the place of
the old lights. The interior has been
newly painted ami the walls and ceiling
finely frescoed. New has been
purchased for the altar and the organ
lias been removed from the gallery to
the loft of the pulpit. Upon the wall,
hack of the pastor’s chair, is a very pret
ty design representing a dove descending
from the clouds, and beneath are the
words “This is my beloved Son in whom
I am well pleased.” This particular por
tion of the improvement was the work
of the pastor who is an artist of con
siderable merit. New gas fixtures have
been purchased and all the details have
been carefully attended to. The seat
ing capacity of the church is 900. The
expense of the alterations is placed at
which will leave about sioootohe
raised by contribution as the society has I
in its treasury, to defray the cost, about.
87<MK).

The new pastor enters upon his duties
under very favorable auspices. The
members of the society are active, and
take great interest in the success of their
church. The Sunday school, which num
bers about 350, is in a flourishing condi
tion. The following named gentlemen
have been superintendents of the school,
serving in the order as given: Henry L.
Meserve, Andrew F. Graves, Mr, J. Fer
nald, A. P. Peckham, J. F. Currant, A.
J. Thayer, H. P. Conant, Andrew F.
Graves, George L. Fall, C. F. Stinson,
William Howard and George M. Starbird.
The list of former pastors of this church
has been published in these columns.
The society may well feel proud of
this new church and pastor, and can
without egotism congratulate themselves
upon the successful completion of the
improvements made upon their plan of
worship.
Tomorrow the Society will occupy
their handsome church for the first time
at the regular service at 10.30 o’clock,
when Rev. R. B. Moody will preach an
appropriate sermon. The Sunday school
will meet at 1.45 o’clock, and at three
o’clock, the Rev. Mr. Gunning of the
Harvard street Church, Boston, will
preach the sermon. At seven o’clock
there will be a grand service of song

R. Tarr.

THE OPENING SERVICE.

and praise, interspersed with short ad
dresses by Professor Sherwin, of the
New England Conservatory of Music,
and other interesting speakers.

LOCAL HISTORICAL NOTES.

The Shipyards of Old Charlestown—For

mer Location of the Almshouse.

In the earlier days there was consider
able ship building in Charlestown. The
| first vessel constructed in the Colony
of Massachusetts Bay was that built by
Governor John AA’inthrop. The craft
was a barque named the “Blessing of the
Bay" and was of thirty tons burden. She
was launched .Inly 4, 1631, [old style],
from the stocks near the Ten Hills Farm,
the Governor’s summer residence. This
farm, which contains six hundrsd acres,
was granted him by the General Court.
On AA’apping street was Devens’ ship
yard, ami vessels launched there had to
be towed through a creek which ran from
the Charles river to Soley street. Mr.
Deven's residence was at the corner of
AVapping and Maudlin streets. Willough
by’s ship yard was situated at the foot
of AA arren avenue, his residence being on
the site of No. 14 Harvard street.
Dowse’s ship yard was on the westerly
side ot AA arren Bridge, and his residence
which was on City square was removed
in 1828 to make room for the new AA'ar
ren Bridge.
Mason's ship yard was at the foot of
Mason street, and Robertson’s yard
was near the corner of AA'ashington and
Austin streets. From this yard were
launched some of the finest vessels that
ever ploughed the waters of the Atlan
tic Ocean. In 1832 the ship Arab, 7U3
tons burden, was launched from this
yard. This vessel was owned by Peters,
Pond &#38; Co., and at that time was the
largest merchant ship afloat. In 1837 the
Arab was destroyed by fire in Mobile
Bay. Many of the old citizens of Charles
town remember with pleasure the
launches at this yard. The residence of
Mr. Robertson was on Rutherford ave
nue, opposite St. Mary’s church.
At the corner of High and Adams
streets stood the Almshouse, which was
demolished about sixty years ago, and
another brick structure erected on Elm
street, between Bunker Hill and Medford
streets. This building was demolished
in 1848 and the present home was then
built on Alford street.

Special Sermons to Young Men.

The week of prayer for young men
and Young Men's Christian Associations
will begin to-morrow, with special ser
mons by Charlestown pastors for young
men and employers of young men. Dur
ing the week the members of the Charles
town Association will unite with several
of the churches in their regular evening
services, according to the announcement
below. The services for to-morrow are:

At 10.30 a. m. —St. John's Episcopal
( hureh. Rev. I’. AV. Sprague, rector; sub
ject, “The Young Man's Snare and the
Young Man's Shield.” First Parish
(Congregational), Rev. Geo. AV. Brooks,
pastor; subject. “The Mutual Helpful
ness of Old an<l Young Men.” Monu
ment Square Methodist Church, Rev. AV.
T. Perrin, pastor ; subject, “Is the
Young Man Absalom Safe.”
At 7.30 p. m. —AVinthrop Church. Rev.
A. S. Twombly, D. D. pastor; subject,
“Christian duty to Young Men." First
Baptist Church. Rev. George E. Horr,
Jr., pastor; subject “True Living.’’
Rev. Charles F. Lee pastor of the Uni
versalist Church, and Rev. R. B. Moody,
pastor of the Bunker Hill Baptist Church
have consented to preach sermons to
young men in the near future, as pre
vious engagements prevent them from
doing so tomorrow. Rev. R. L. Greene,
pastor of the Trinity Church, preached
his sermon to young men last Sunday
evening. All young men will receive a
cordial welcome at any and all of the
churches.

Prayer meetings will be held at 7.30
o’clock every evening next week as fol
lows: Monday, First Baptist ('hurch;
Tuesday, AVinthrop Congregational
Church; AVedncsday, Bunker Hill Bap
tist Church; Thursday, Y. M. C. A.
Building; Friday, First Parish Church:
Saturday, Y. M. C. A. Building.

Harvest Concert.

The harvest concert at the Monument
Square Methodist Church to-morrow at
three o’clock promises to be very attrac
tive. Fruits, vegetables and other pro
ducts of the harvest, tastefully arranged,
will decorate the platform. Excellent
music rendered by the church and Sun
day school choir, a harvest concert
exercise, given by the school, including

recitations by individual members, and
an appropriate address by the pastor,
will make up the programme. Ail the
fruit, vegetables, etc., donated for the
occasion will be given, after the concert,
to the Children's Home, as the gift of
the Monument Square Sunday s< hool.
Friends wishing to contribute will please
bring their gifts to the church this even
ing.

Where the Oharlestown Oity Govern
ment first Deliberated.
The new editorial and business rooms
I of the Charlestown Enterprise at No. 25
I City square have a history which is by
।no means uninteresting. In April 1*47,
1 hen the ( harlestown city government
was first organized, after holding one
meeting in the old Town Hall, it was
voted to renovate the old building, and
rooms in Fuller’s Block were engaged
and occupied by the city government
for nearly a year. The mayor and ai
dermen and common council held meet
ings there and the first business of the
city was then transacted. In the may
or's chair sat the late Hon. G. Washing
ton AAarren and around him were seated
Aidermen Ebeneezer Barker and Thom
as Hooper of AVard 1, Phineas J. Stone
and Paul AVillard of AVard 2, John L.
Taggart and Dr. John Cheever of Ward “
3. The city clerk was A. B. Shedd, then
a young man, about 23 years of age.
The treasurer of the city was Amos
Stone, ami the city messenger Nathaniel
Pratt. Charles AV. Moore presided over
the ihdibmations of the Common Coun
cil, which consisted of eighteen mem
bers, six from each ward of the city. In
one of the rooms of this historic building
was the office of John Q. A. Griffin, who
as a lawyer and a citizen, was alike re
spected and esteemed. Charles Robin
son. Jr., fora number of years had his
office here, as did Stearns A- Butler.
Here also was the office of the late Low
ell AV. ( liamberlain. In the third story
for many years AV. AV. AVheildon edited
and published the Bunker IlilJ Aurora,
\\ hit h toi iorty-four years he issued on
each successive Saturday afternoon.
His editorials were always ably written
and were read and commended by the
best minds ot the city, ft was upon this
paper that the late William DeCosta,
for many years the editor and publisher of
the (’harlestown Advmtiser. in his earli
er days labored, and on his return from
California started the Advertiser in com-

Streets.

pany with Daniel Williams, who severed
his connection with it to become City
Clerk which position he held for many
years to the general acceptance of the
public and only resigned when his health
would no longer permit him to continue
his arduous and trying duties. E. G. Walk
er also had an office here as well as
many otb r well known lawyers. And
last of all, who does not remember Mr.
Eben A bite, who kept the shoe store on
the < <>r’' (jty square and Chamber
street, and the big boot he had for a
sign?

Death of James W. Cleary.
The many friends of James AV. Cleary
were pained to learn of his death, which
took place at his residence, No. 14 Moul
ton street, on Saturday. Deceased had
been sick only a week, the cause of his
illness being typhoid pneumonia. He
was a member of the fire department
and was attached to Hose 4, on Bunker
Hill street. He was also a member of the
Moulton Associates. He was well known
and highly respected. His funeral took
place on Tuesday morning. At his late
residence the remains were viewed by a
large number of relatives and friends.
The floral display was fine. Hose 4 con
tributed a broken column with hose pipe
crossed in front. At the top of the col
umn was the letter “H” and at the base
the figure “4” and the words, “At Rest.”
Engine 27 sent a very pretty basket.
Ihe Moulton Associates contributed
“Gates Ajar.” Over the gate was the
word “Jimmie,” and at the base. “ AVe
miss him.” The remains were escorted
to the St. Francis de Sales Church,
where high mass was celebrated by
Rev. M. J. Supple. After the services
in the church the funeral procession
moved on to the Holy Cross cemetery
where the body was laid away. Mem
bers of Hose 4 and the Moulton asso
ciates attended the funeral in a body.
The age of the deceased was 25 years,
1 month. The poll bearers were James
Griffin, James McLaughlin and Joseph
Riley of Hose 4. and Frank H. Dillon,
James Griffin and Peter Coughlan from
the Moulton Associates.

The executive committee of the
Charlestown branch of the Associated
Charities, held a meeting AVednesday
afternoon, in room 3, Warren Building,
Main street, Rev. Dr. Twombly in the
chair. Routine business was transacted.
Next Tuesday afternoon at the same
place will be held the annual meeting
at which officers will be elected, reports
of the treasurer and others read, and
means devised for the raising of funds.

Woman’s Temperance Union.
The ladies of this district should not
fail to hear Miss E. S. Tobey, who will
speak under the auspices of the AVo
man's Christian Temperance Union of
this district at the Monument Square
Church next Monday, at 3p. m. Miss
Tobey is Mrs. M. A Livermore’s succes
sor as president of the Massachusetts AV.
C. T. U., and is a talented speaker.

Leg Broken by Sheep.
Saturday morning, Thomas Callaher,
while loading sheep on a vessel lying at
Tudor’s wharf broke one of his legs ami
was taken to the Massachusetts General
Hospital in the police ambulance. Calla
her resides in East Boston.

THE ENTERPRISE QUARTERS.

Associated Charities.ADVERTISING.

History of the Art in All Ages o

the World.

Tablet* from Pampell — Newapapei
Advertlwlng In the Seventeenth
Century—Peripatetic* oiT New

York — Kock Painting.

[Philadelphia Times.]
Advertising is very old, and among th*
ashes of Pomjieii have been found tablet
with lists of goods an 1 recommendations t<
customers. The bakers were known by th
sign of a wheat sheaf, with a millstone on it
A small boy undergoing a castigation was
the notice of a school. advertisement
were on stone, in alto relievo, or in terrs
cotta, and usually set on pillars beside h
shop. Very special advertisements were o.
tablets set in tne wall. In Rome the physiciai.
had a cupping glass at his door, the poultry
seller a coop of chickens, and o', her tra ies
men symbolical emblems of their calling-,
some of which were very inge lious. A
fashionable perfumer had a tablet beside hit
door with alto relievo figures of f >ur mer
carrying vases, such as were used for sweei
waters.
In all ages people seem<d to have nee ie 1 a
reminder of their wants,-and the advertise
ment enabled the busy or the lazy to supply
them without extra trouble. The tavern
keepers usually displayed a “bush” as thei]
sign. We find no mem ion of ti e peripatetic
advertisements which now greet our eyes on
street corners, in vario is outre and ridicu
lous garbs, but |>erhaps they may have had
their origin from antiquity and the jx*ri
patetic philosophers, who sndiel aid dis
cussed their learned theories while jxjrjiet
ually perambulating the walks of the gym
nasium. Later on in the middle ages in old
London and continental cities, the adver
tisement signs on shops were very cur'out
and suggestive and have kept pace with the
times. Occasionally in an out-of-the-way
street you stumble on a curious old sign,
a marvel of paint and ingenious of concep
tion. Ihe apothecaries’ si; ns were often
very intricate and the fortune-tellers ha.
cabalistic hieroglyphics over their doors

When newspapers were tlr t printed in the
seventeenth century the tradesmen found
them a very convenient vehicle for their ad
vertising, but as the space was limited, they
were usually brief and to the point. W<
read, for instance, “That excellent drink,
called by the Chineans Telia, by tiie natiom
tee or fay,” is sold at such a place; in an
other, “Excellent lozenges or jiectorals sold by
Mr. Jeremiah Green.” Then quaint notices
of dentifrices to make the teeth ivory white
and of wigs and hair dyes.
In our country adveitising is cariied to a
height perhajis unequaled any where else, and
the peripatetics in New York and other cities
are a study for the idler. On a wet day the t
philosophers present a sorry appearance, and
when the thermometer is below zero or up in
the nineties, they are equal subjects for com
passion. Sometimes merely two bill-boards
ornament the fore and aft of the walking
advertisement, sometimes he is accoutred
in the articles whose merits he is hired to
display—a nobby hat or a pair of patent gar
ters fitted on a well-develo]>ed and shapely
leg. Some time ago, when hoops were in
vogue, we daily met with a solemn individ
ual encircled by a nake 1 frame of steel ribs.
Two stalwart negro?s, dressed in fashiona
ble fit-out, displayed on immense stand-up
collars, “ laundry' soap.” Scarlet um
brellas, shirt fronts framed, casts of feet
with ugly corns, are carried around by these
unfortunates, who “from morn till eve” can
be seen on the thoroughfares. There are neat
little vans and candy wagons with bells and
all sorts of designs to attract attention. The
ater managers send out gloomy-looking
beings, often in sleet and storm, with “Two
Orphans” sandwiching them. Transparen
cies which change perpetually and exhibit
different designs are seen in the evening in
the streets and startle t'le beholder with
strange va e ies. American advertisers
are said to have an ingenuity and tenacity
found nowhere else, am; the sign painter is
übiquitious and incorri iMe in spi e .f artists’
groans against his van lalism. All over the
country in most picturesque nooks you can
trace his pathway by “Liver Pills,” “Stove
Polish.” “Ague Pads.” “Cl 'thing Company's”
and other detestable dis' gureme it, where
you hope to find only’ beauty in the “pathless
woods” or on the “rocky shore.” A sign
pa inter said with a grin: “I guess I have des- j
eerated, as you call it. moie nature than any 1
man in the country; but wi at do I care? To
my mind pretty lett ‘ring is an ornament to
an ugly rock!”
A young sign painter outof work < riginated
the idea of paiutine advertis- meats on rocks.
In ISSS h ' print, d his name and occupation
on the rocks in Harlem. N. Y. This caught
the eveof ronu sharp Yank -es, whoemplove 1 i
him to advertise th - r 1 u-iness in the same
manner. He travel I o\ e he countrv to j
the rocky-mountains ai -; his signs ap> e red
everywhere as far as the Pa ific coast. He
met with one competitor and imitator, but
they’ fraternized and ixjcame partners, trav
eling at that time was much more difficult,
so these destroyers of the beautiful deseive
credit lor perseverance. “We travel d over i
1,000,000 miles, painted 90,030 signs, and vet
live!” one of these vanda’s boasted, at the
same time h -wing how much paint they
consume I by figures—also their protits.
Forty years ago a gentleman from Europe I
said that the shop windows of Philadelphia
were by far the most elegant in America ’
and often reminded him of Paris. This has
been more or less the c i e ever since: the
shop windows have I e »t up their chai a ‘ter
and vie with their fore ga rivals. Advertise- j
mi nt cards with all sorts of design- are now |
quite an important branch of industry. A
jtory is told of a gentleman who I ecaine :
tired of his country-seat and put it in the i
aynds of an agent to advertise. He painted
a description of it in such glowing colors
that the owner refused to part with it, sav
ing he did not know its valu^ l till then!
Some firms employ draughtsmen who come
out every day with a new design in the I
newspapers, but newspaper advertisements I
opens out a field as extended as the prairies j
of the northwest.

The Doctor.
[New York World.]
“Do you think his disease incurable, doc
tor!”
“He is a poor man. isn’t he?”
“Hasn’t got a dollar. ”
“Yes; medicine won’t do him any good
now.”
“He has a rich uncle who has agreed to pay
all expen—”
“Excuse me, if you please,” interrupted the
physician, waving hi; hand. “Never mind
about his rich uncle. As I was saying when
you interrupted me, I don’t think medicine
will do him any good, but I never give up a
patient until he is dsad. ”
Novel Paper Weight*.
Berlin iron bugs, beetles and grassb oppers
and awful looking dragons, are the late t
trifle to keep letters or papers from flying oil
the table. As heavy weights, they do not
amount to much, but they are so admiiably
modeled it is impossible to resist their fascin
ations if one has a taste for curious toys

THE SIOUX ON EXHIBITION.

Mttlng Hull and lII* Ked-llan ded
Cabinet Somewhat Aalonlnlied.
[CrolTut in St. Paul lloneer Press.]
From tLe Custer joint of view, it seems a
bad •ase of aboriginal sin to exhibit Sitting
Bull and his red-handed cabinet in the Eden
Musee. 1 was in there twice yesterday, and
meeting Joaquin Miller showing his little girl
the sight, 1 taid that it would l>e dramatic
if Custer really had coiisciousne'S and could
I look dov n and see the warriors who slaugh
| tend himself and his regiment “ovated" by
! the hundreds on hundreds vh > crowded up
j to shake their bloody bands.
“Yes,* he said, “but Sitting Bull was right.
Custer attacked him against orders and at
। his jx-ril and the Indi in ft ught in the only
| way he kn»‘w, and in killing them all merely
adopted Custer's own tactics."
The Sioux show a lively ajtpreciation of
the immense buildings and other wonders of
New York. They' came through Chicago in
the night, so that St. Paul was the only large
city they had ever hitherto seen. When they
I first went uj> on an elevator they exclaimed
as a child might, “Ho! wigwam gone to the
ground!” suj>jx»sing that it was the buildi ig
sinking around them instead of themselves
ascending. When they step|>ed out on the
roof great was their amazement and amuse
ment. Next Sunday I shall go with Sitting
Bull on the elevated road and see how he
likes it.
Edison took them over to his factory the
other day, and put electricity’ throw ;h Its
juices for their benefit. The old theory that
savages are never astonished at anything
will have to be modifed. It comes nearer
the truth to say that nothing astonishes them
as long as they suppose it to be superna ural;
only when they are told that men produce
the results without aid from any spirit do
they begin to show surprise. Lightning
never surprises an Indian as long as he suj>
poaes that it is only the fiadiing flight of the
thunder-bird angry with somebody, and
swoojung down lor a victim; but when tol:
that it is only a force that man can caj>ture
and tame and bottle up and turn on his
wires, then he shows astonisl ment. Those
tribes who attribute everything to miracle
are, of course never surprised, for nothing
can hnpjH- i that is wholly unexpect -d.
Sitting Bull was shown the enormous dy
iamo and tai 1 that it was t’ue thunder bird.
He was shown the mean lescent bulb, but
would not believe that it would glow in the
water till he had actually’ taken it out and
put it into the vessel himself, and then tasted
af the water, when he expressed the opinion
that K itson was the greatest man in the
world. “Dam 1 ig!” said Sjx>tted Horn Bull,
in good commercial English. S. H. B. is am
bitious to sj>eak English words. He now
says "good-by,” “good mong” and “how doo,”
beside die remark quoted above. He was
very enterprising over at Edison’s, and in
iisted on t'Sting the battery "like the white
man.” They turned on a goxl charge, and
when the thunder bird got hold of him he re
fused to let go. The child of the forest vio
lently expectorated the bitterness out of his
mouth and yelled “Yeouch!!” so he might
have been heard over on Second avenue.
This show’s that he knows another valuable
English word. He is making real progress.

Kame Old Place.
[Chicago Herald “Meddler.”]

“Place kind'r old an' tummel down an’ I
hardly knowd ft wasn't tor jail to the cor
ner.” Fifty years old and as ragged as the
samples of a beggar’s bag the old sot stood
Ix-fore a frame shanty which hud long since
been vacated.

“Shame place,” his oomjianion answered.
The companion was as much of a remnant as
the other. “Shame place,*’ he mused. “I’d
knowd’t in shousan’ houses, jmmi my’ soul.
Ben throwd out the back door morsh shousan’
times, and ain't got nothin’ ginst door eisher
—not a shing ginst door and not a shing ginst
man usht to be there and throwd me out,
too. Not a shing.”

“It's kind o' tough though, old m .n, that
we who made the place should be left to grow
old like it, and ragged and tummel down,
while man who kep’ it got rich and was
’lected to office. It is the way of the world.”
“Yeshir trueshlive. But I don’t g’back on
old plashe, nohow’. I’m not shtuck up if am
poor. I wouldn’t go roun' to his nother place
for monish, cause he’d kich me out. But I
can lay down in old plashe here and shleep
and shleep, and it'll keep rain off when can’t
shleep nowhere elsh. Sthick to old place, my
boy, sthick to old plashe. Don't give up
ship. Lesh go in lay down an’ dream ofsh
light sober daysh an’ osher nights. Lesh go
in shleep old plashe.”
And the old bummers sat down in the rain
and mumbled themselves to sleep.

Not I.e*s Than $lOO,OOO.
[Pioneer Press “Voices. ”]

Meeting Marquis de Mores recently, I asked
him if young men w ith limited capital had
the chance to engage in stock-raising in
Montana now that they had five y ears ago.
He said : "Gentlemen who have undertaken
Stock rai-ing with >’5,(»UO, sIO.OOO or $25,000
capital have invariably become tired of it
and quit in disgmt. They set out with false
igures.meet unions en conditions with which

hey can not cojje. and ait r using up their
little money are glad to get out as best they
can. It costs just as much for an outfit
to herd 100 tattle as 1,000. A
good foreman is indisjjensable. and he needs
three or tour helpers. Cattle w ill wander 200
miies. and ihe herder mus?t I>e repre-ented in

three or lour round-ups. To send a man with
seven or sight herders on a two weeks’trip to
look up a lew cattle costs more than vou
would think. Then some cattle always will
be lost. It is tool-hardy, 1 think, to engage
in catlie raising nowadays with leas than
sloo,ooo. Ihereismore money in buying
Texas two and three-year-olds, driving them
x> Montana and jiutting flesh on them, and
jelling. In this way money can b turned
ver so as to make 25 to 30 percent, annually.

Conkling’* Eloquence In Monologue.
[Croffut’s Letter.]

A friend of mine had a long, free tilk
with Conkling one day within a week, and he
tells me the result of it. Conkling talked
for an hour, striding up and down his office,
and delivering himself of a speech. He is
never more eloqu -nt than w hen he breaks
out into monologue, Witii only one auditor.
Sentence follows >enten e in a fusilade. He
neither invite; nor i ermits interruption.
He grows wrathful end hot, gesticulates
violently, stops before the sii g e auditor
and mena ingly : hak.— his upraised finger.
He wipes the perspiration from his brow, in
vokes the aid of poet and sage, of Plato and
Shakesjxareand Rabelais, and Fielding, and
Lucullus, and Bo< caccio, calls on the g<xis
and the muses, ransacks h story for meta
phor and apothegm and invectives, and
pours out a stream of Imgual lava, red hot.

Happy Man.
[Auburn News.]
Mr. Minks—Ah! my dear fellow, allow me
to congratulat • you. Been married almost a
month, haven’t you? Mr. Pink—Over a
month. “Haw your love stood the test of
matrimony.” “Perfectly.” “Sure of it,
eh?” “Could not be more so. We had bis
cuits for dinner yesterday.” “Did wifey
makathem?” “Yes.” ‘And yor ate them?”
“Yes.” “Without a murmur?” 'Without a
murmur.” “Happy man!”

THE CHARLESTOWN ENTERPRISE.

VISITING THE PRISON.

A Representative of the Enterprise
Makes a Trip to Concord.

A ride of thirty minutes in one of the
coaches of the Fitchburg Railroad
brought me to the historic town of Con
cord, a distance of twenty miles from
Boston. A walk of two miles was before
me, but it was a glorious day and I felt
more inclined to trudge along at jdeasure
than to ride. After passing along through
shaded nooks where the autumnal sun
cast its beneficent rays. I saw at a dis
tance of perhaps half a mile a collection
of buildings surrounded by a high wall
of brick. I was soon at the portals of
what was in reality the Massachusetts
State Prison. In front of the entrance
were two French-roofed brick houses
connected by a smaller structure, appar
ently a hall way. or a reception room,
may be. It was some little time before
I could find the entrance to the prison,
but was finally guided by two children
to the rear of the two houses I have be
fore mentioned, where I found a dark
passage way from which ran a stairway
to a large reception room. In this room,
which was lighted by large windows,
was a door, containing in its upper por
tion sections of glass. Through this I

looked and was pleased to see standing
at a high desk the officer of the octagon.
Mr. Darling, whose face I had so often
looked into at the old prison in Charles
town, prior to the, removal to Concord.
After talking over old times Mr. Darling
introduced me to Warden Usher, a man
whom I should judge was on the shady
side of life, but vigorous and healthy.

By invitation of the warden I accom
panied him on a trip through the work
shops. There is one thing that struck
me at once as being peculiar in an
institution of the character of the state
prison. That peculiarity was the ap
parent contentment of every prison
er without a single exception. We
entered the hat shop where we found
every man busy, and as we entered
they one after another turned their
heads and looked at the stranger
with the warden. There was no hang
dog look, but the convicts looked you in
the eye, as much as to say, “ We are un
fortunate. but nevertheless are men.”
The harness shop, picture frame shop

and other sections where the men were
at work, were visited. There was
Dwight of Charlestown, who shot Mc-
Laughlin in the Bunker Hill yacht club’s
house on Medford street, as corpulent
and smiling as ever, who nodded his
head as I passed. There was Langdon
W. Moore, the bank robber. w*ho at
tempted break the Warren Institution
for Savings, but was caught in the act.
There were other noted convicts at work,
the histories of whom are fresh in the
mind of the public. There they were, in
a little world, surrounded by brick walls
upon the top of which were officers
armed with unerring rifles ready to
shoot down the convict who should at
tempt to scale the pile of cooked clay
which kept him from the busy, bustling
world outside. But everything was
bright about the prison yard, the mel
low light of the sun penetrating almost
every nook and corner.
After passing by the door of the stone
house and shaking hands with Officer
Hunting, who had charge of this depart
ment. the warden called another officer
who took me through the remaining por
tions of the institution. The next place
visited was that section known as the
‘•close rooms.’’ In this department was
confined the noted “boy murderer.”
Jesse Pomeroy, who but for Governor
Long, would have dangled at the end of
a piece of hempen rope, but was respited
and finally doomed to suffer close con
finement for life. He peeped out of his
cell door and I caught a glimpse of him.
but only for a moment, for the officer in
charge tapped me on the shoulder and
said, “This is not allowed.” Jesse had
not changed since I saw him nine years
ago in the hospital of the old prison in
Charlestown, where he had to undergo
surgical treatment for an ingrowing toe
nail. He was fat. but his face presented
those same brutal instincts which
once seen can never be bluffed from the
memory. It has been said that he is an
apt scholar and had mastered Latin and
Greek, but this I am creditably informed
is not the fact. He reads considerable,
however, to pass away the lonely hours,
being allowed the privilege of taking
books from the prison library, which
contains. I think, between 4.000 and 5.0 H)
volumes. Jesse receives a visit from bis
mother every fortnight. She lias not de- 1
sorted him. and although he has commit
ted the gravest offences against humani
ty and the law, yet she is ever ready to
give him encouragement and hope, with
out which he would not. probably, have '
survived his solitary imprisonment.
From this strong room we visited the |
cook-room. It was the noon hour and
the convicts were passing along the cor- ’
ridors to receive their dinners which
were passed out in tin dishes. The food
was well cooked and looked very palata
ble. As I stood there. I could not but
think how many needy families there
were in the great cities of the country,
who in crowded tenement houses, where
poverty had its abode, could obtain hard
ly more than a loaf of stale bread, and
who look upon a piece of sirloin steak as
a very great luxury. These prisoners
were, however, being fed on good sub
stantial food, but they lacked that one
great boon —liberty. From the cook
room we ascended a flight of stairs and
entered the library. Sitting upon a
stool at the entrance to the room was
Chase, the Fall River defaulter, a man
who in his time had been looked upon as
a leader in business and social circles.
There he sat dressed in the garb of a

felon. He gazed upon us as we passed
into the room, and 1 could set* that time
together with trouble, had furrowed deep
| lines upon his former genial and
j manly face. The chaplain, a well-to-do
, appearing gentleman, sat reading, ami at
the farther end of the room was Deacon
Andrews ot Plymouth, the libYariau.
| who, if I am not mistaken, is serving out
j a sentence of twenty years. 'l'he offence
. of which Deacon Andrews wa> convicted
' was the murder of Deacon Blanchard,
i whom, it is alleged, he killed while in
I the woods, using a heavy stone to end
the poor man's life. Andrews is one of
those much modest individuals, vho
could kill a man but cannot bear the idea
of an every day indiscretion being com
mitted. His term of imprisonment is
nearly completed.
The next place visited was the chapel
where the prisoners listen to the Divine
Word, and attend .Sunday school and
prayer meeting. On the Sabbath there
are tw o services. Catholic and Protest
ant, but while it is optional with the
convicts to attend the former service,
they must all be present at the Protes
tant service. There can be no doubt
that the religious instruction received
is greatly beneficial to the men ami that
many of them have experienced a change
of heart under the ministrations of the
kind Catholic father or the clergymen
of the Protestant faith. The chapel is |
an elegant affair compared with the one i
in the old prison. There is a tine plat- I
form and a large organ, and the seats are '
comfortable. Selections from the Scrip
tures are painted upon the walls, and
there is a hallow edness about the place
which impresses one with the fact that
here the violators of the laws of God i
and man may. if truly penitent, receive
forgiveness. Tin* clergymen are inter
ested in their work. Occasionally lec
tures are given in the chapel as well as
musical entertainments which are al
ways heartily appreciated by the pris
oners.

In the hospital, w hich we next visited,
we found about eight or ten men lying
on cots. They received every at tention,
I was told. The small number of men
in the hospital demonstrated the fact
that the institution was a healthy place.
The number of deaths have been com
paratively few.
Preparations are progressing for the
removal of a portion of the convicts to
the Charlestown institution. They will
be divided into sections and then hand
cuffed to a chain and marched into pas
senger cars, which will be in waiting in
the yard, as a spare track enters there
from one of the railroads. They will be
conveyed as quietly and quickly as pos
sible to Charlestown, where they w ill be
received by a squad of police, who will
assist the prison officers. On arriving in
the octagon of the old prison the con
victs will be assigned cells and locked
up.

Drugged and Robbed.

Officer Dempsey of Division 15, Thurs
day evening, found .Jolin Jasons lying on
the sidewalk on Walker street in a help
less condition. He took him to the sta
tion, where the fellow said he resided in
Malden. On searching him it was dis
covered that he had been robbed of a
silver watch. Jasons said that he met
three men on Causeway street and went
with them to a saloon w here he had two
drinks. From that time he knew noth
ing until he found himself in the station.
It is evident that the man was drugged
and afterwards robbed by the men who
started him on the way to this district.
The fellow is 2$ years old and has a
family. He was locked up.

Veteran Firemen-

The Charlestown Volunteer Veteran
Firemen's Aassociation will probably
adopt as a badge a silver bar. on each
end of which will be a maltese cross.
On the bar will be the letters “C. V. V.
F. \.” and from the bar will depend a
piece of ribbon. Tin* Veterans, it is
said, will endeavor to obtain tin* use
of the truck and hose house on Main
street when the companies remove in
to the new building to be ejected op
posite the present house.

St. Francis de Sales Parish Coffee Party.

The fifth annual cotfee party of the
St. Francis de Sales parish, in aid of the
poor, will take pla< e in Monument Hall
on Tuesday evening next. There w ill
undoubtedly be a large attendance. The
charity is a worthy one and as there
will be a grand good time, of course
everybody will want to go. 'l'he ar
rangements are in the hands of a com
petent committee, who will spare no
pains to make the affair a success.

Senator Trull's Reception.
Quite a number of gentlemen called at
tlie residence of Senator Trull on Mon
ument square, Tuesday evening, and
congratulated him upon his re-election
and the handsome endorsement he re
ceived at the polls. The affair was in
formal. but nevertheless enjoyable, and
after partaking of the hospitality of the
host the visitors departed.

Our friend Henry ( abot Lodge put his
foot in it when he failed to join the
Mugwumps. In IX7B be shouted for
principles; in 18M he thought only of
H. C. L.

J. TYLER HICKS,

CATERER,

MONUMENT HALL,

Telephone NJ o 6502.
Monument Hal] Ice Cream

IM WARHANTED PUR E.

FALL STYLES NOW READY.
18. LEWIS,
I
FASHIONABLE TAILOR,
569 MAIN STREET.
JOHNSON B ANODYNE
“Wcsell-* I ■ ■■■■ |FI|T
■ IMII HU I Ml I CURES - Catarrh, Choi-
Si I IHI I UJI tHI I
I I|M|l W | | |M ■
LlllllVlLll I 18
FOR _ INTERN AL AMD EXTERNAL TTSE.
PURGATIVE Dll I Q
I MllvUlwV MAKE NEW, RICH BLOOD. I IL Im W
and BOWEL Complaints, MALARIA,
have nn miili ln r), s e aHi'« (ONE PILL A DOSE). For Female Complaints these Pills
_ J flnd then \_ a valuable Cathartic and Liver Pill.—Dr. T. M Palmer. Monticello. Fla.”
rnlc 1 no other.-J. Dennison, M.D., DeWitt, lowa.” Sold everywhere, or sent by
mail for 35 cts. in stomps. Valuable information F&#38;EE. I. S. JOHNSON &#38; CO., BOSTON, MASS.
It is a well-known fact that most of the M| Ml Ml MM MM ■■MM M ■ M ■■ M M
i t bo,.„ U!I ■■ ■ Bar
Sheridans Hl.tL.u HU M ■ Ifil xlw" I Mlb
absnint t .|\ p „ r e v , valuable. I*ll ■! H Mfl HMI 911 1 I 11 W
Nothini; on make hens IWB MM 11 I I BM I
like Sheridan's ’ow- B ■ B B 1 ||l |1&#38;1 ■ I
der. Dose, one teaspoonfill to each pint of ■■ ■ ■ ■■M ■■ ■■■■ ■ M ■ ■
food. It will also positively prevent and cure Host Cholera. Ac. Sold everywhere, or sent by mail for 2-'.c. in
AUIPIfEN EDA S bunps. Furnished in larue cans, price Si.OO; bv mail. $l-N).
VnivlVtlf IX/Ay Circulars free. I. 8. JOHNSON A CO., Boston, Mass.
'custom tailoring
FOR THE FALL AND WINTER SEASON
J. F*. AJJEERSOTCi
24 CITY SQUARE,
A large and complete line of woolens, in all the different styles and shades, for
(’oatsand Vests. An extensive assortment of finest Pantaloon Goods. Overcoat
goods in all the different makes, and the largest variety of Foreign and Domestic
\\ nolens for Suits, to be had in the dist i ict,
FIRST-CLASS WORK AND TRIMMINGS GUARANTEED.
CLEANING AND REPAIRING
Done in the best manner, at short notice.
1884 - FALL AND WINTER 1884
L. EI. DEWOLFE,
MERCHANT TAILOR,
162 ■ MAIN STREET - 162
-A. ILAR.E CITAIVCU ! »
R “Goodrich” (Singer Pattern) Sewing Machines,
Wo will send to responsible parties. AS A SAMPLE, with
a view to taking the agency forthem. one of these ELE
GANT BLACK WALNUT CAB INET Sewing Machines,
BEAUTIFULLY VENEERED wlth French and Bird’s
Maple Veneer, at ONE f MIEW THIRD THE
USUAL PRICE. I gift, /MB) wf. warrant
EVERY MACHINE «■„ / for >'IVE YEAKN.
and send with each a full set |WE] J of the LATEST IMPROVED
and BEST ATTACHMENTS, M | j end will send MACHINES
ON TRIAL, if desired. It W <H P a T this.
For particulars and ' Descriptive Circular.
Address FOLEY A WILLIAMS MFG. CO., 70 &#38; 72 Adams St., Chicago, Ills.

J. TYLER HICKS,
CATERER!
MONUMENT HALL.
Telephone No. 650%.
Monument Hall Ice Cream
IS WAKKAN'TEI) Pl RE.
HOLMES BROTHERS,
PHOTOGRAPHERS,
19 MAIN STREET,
CHARLESTOWN.
ALL PHOTOGEAPHS OF OHILDBEN
Taken by the inhtantaneovs pkocehh.
Special terms to societies, clasKea, chibs, etc.
SUPERIOR FACILITIKS FOR TAKING
FAMILY GROUPS.
Prices very Reasonable for First-Class Work.
Agents Wanted to Sell Checks.
N. H. Holmes. Chas. p. Holmes.


B F STAGEY,
APOTHECARY, THOMPSON
A Large an<l Choice Variety ot
Drugs. Medicines. Chemicals Et *..
None but the purest and choicest ot medici
nal agents dispensed, and competent assist
ants on hand at all hours.
ELEGAN'I’
Fancy and Toilet ‘Articles
OF ALL DESCRIPTIONS
Constantly on hand and for sale at
BOSTON PRICI3
SAMUEL E. WALKER
SUCCESSOK TO
THOMAS HENRY HUGHES.J no
DEALER IX
FM al Oysters,
53 Bartlett Street.
Telephone No. 6615.


56

LOSS

Life knows no winter when the heart Is light;
The' skies are gray, and dull the waning
year,
Mid cloud and glooin the world is fair and
bright;
For all is summer when one smile is here.

Life knows no summer when the heart is sad;

Tho' skies are blue, and fields with verdure
grown,
7an song or bloasoin make the world seein
glad?
Ah. no! ’tis winter when one smile is flown.

FOUND—A PLACE.

Marion sat thinking intently. With
one finger pressed tightly against her
lips and her eyes cast upon a small,very
small puicel in her lap. she might have
set for a picture of Meditation. But
an anxious wrinkle corrugated the fair
brow, showing her cogitations to be of
a different order from those usually
indulged in by maidens of her tender
age. For indeed Marian had been try
ing with all the wisdom of her twenty
summers—or winters—to solve the
problem of ways and means, and it was
no package of love letters on which she
gazed with such dissatisfaction at its
meager proportions, but a whole year's
savings.

‘•By close economy it will pay Elsie’s
expenses for the summer and leave me
ten dollars. But no matter; it’s blessed
money that will be spent to cure my
darling?”
As if to make the commendation more
decided, she vigorously rolled and slapped
the bills into the smallest compass possi
ble. Then she carefully closea the shut
ters—a most unnecessary precaution, for
the room was in a wing on the third floor
with vacant lots on both sides. After
that the little hoard was put into a knit
purse, the purse insinuated into the foot
of a stocking, the stocking wrapped in an
old dress skirt, and the whole deposited
on a shelf in the closet, and everything
done to give it an appealance of unstud
ied caselessness calculated to deceive an
ordinary burglar. This sacred and mys
terious rite fully over, she opened the
shutters and let in the floods of yellow
sunset light to glorify her cozy room.
Poor Maiian bad no trust in banks, and
little wonder. Into the “Store House
Deposit,” with its plate glass windows,
its marble floors, its urbane clerks and
golden promises, her father had placed
with some confluence the honest savings
of an energetic liietime, and died calmly
thinking his orphan daughter above want.
If the blessed dead can be cognizant of
our happenings what were his feelings
when the oily president of the storehouse
emptied the said store house of its con
tents and left for Europe? Marian was
only one of half a thousand suf
ferers, but it made her neither crazy nor
melancholy, as it did many other unfor
tunates, to be thus rudely jostled out of
the lap of fortune. Gathering together
all the little mementoes of a prosperous
and guarded childhood, she secured a
room for herself and Elsie with Mrs.
Allen, an old friend of her father's, who
kept a few boarders “only for company,
my dear.” A class of beginners in music
soon kept her busy, and no head of a
family was ever prouder of his ability to
support them than was Marian of the
talent which earned a home for her-elf
and the little sister whom her mother
had confided to her care when Marian
herself was only a child. Bravely she
worked on, and was dismayed for the
first time a mouth before, when the doc
tor gave as his opinion that the spinal
disease developing itself in the child
needed for its cure a residence in a
neighboring city, in a hospital specially
devoted to such compiaints.
After opening the shutters Marian
walked on tiptoe to the alcove, parted
the curtains which hid the bed, care
fully covered the feet of the sleeper who
lay there, and pressed a light kiss on the
long curl which rested on the pillow.
Tears were in her eyes when she came
out into the room.

“She must go,” she said, passionately.
“Only we two in all the world. If I
should lose her—but I won't think of
such a thing. She’ll get well, of course.
You ought to be ashamed of yourself,
Marian Martin, to doubt it or feel blue.
Imagine what it would be if you weren’t
able to send her at all. You must find
some work to do, and may it be of the
hardest kind, for you will be a lonely
maid, Marian, without your baby. Come,
now, you’re getting doleful again. This
will never do. ”

Having been accustomed all her life
to treat herself as a party much prone to
self-indulgence, and needing rigid dis
cipline, she straightway shook herself
into comparative cheerfulness, and, in
order to waste no time, began to search
the columns of the newspaper for the
one headed “Female Help Wanted.” It
might give her some hint as to employ
ment until her pupils returned from their
vacations. She found the list and read
with running comments between.
“Wanted—A middle aged lady to act
ps housekeeper for widower.”
“I might wear spectacles and a cap,”
she said disapprovingly to her image in
the mirror opposite where the dimples in
cheek and chin seemed to mock at such
a ridiculous idea. “Here’s another.”

“Wanted—A young lady stenographer,
must understand the use of calligraph or
type writer.”
She shook her head at this and set the
loose, fluffy curls to dancing.
“I must be dreadfully behind the age,
for I haven’t the slightest acquaintance
with either of these instruments. And
foobsh old Madame Beaudry called me
‘feenished.’ ”

“Wanted—A young, energetic busi
ness woman with $5OO to invest in a
profitable enterprise.”
“No, thank you. If I had $5OO does
anyone suppose that I’d be away from
Elsie a moment? I’ll speak to Mrs. Al
len about it, she knows so many people.
Thank heaven, I have no prestige to lose,
and nobody would notice in what way I
occupied myself in summer. Ah, Elsie,
dear, awake already?” turning with lov
ing smiles to the eight-year-old copy in
miniature of herself who came with pain
ful slowness into her arms. “Here’s
your old slow-coach of a sister doing
nothing, when she ought to be preparing
your supper. But never m nd, dear,’’
taking the child’s face between her iosy
palms, “I have news for you better than
atiayfulloi the nicest things in the
world. Now, wish for someting splen
did, the thing you want most.”

“The thing I want most, Maidee,”
said the little one, with a pathetic smile
into the face that had never worn for her
but its brightest guise, “is to get well.”
“Oh, you little witch, to ask for the
very blessing you’re go ng to have,” said
Marian, hugging her and speaking rap
idly to hide the trembling in her voice.
“You’ll go away among the kindest and
best jieople you ever saw; there will be
many other sweet and lovely children
getting well, too, and all so happy. And
I'll be happy, too, and write such long
letters. To morrow I .won't have any
lesions to give, and we’ll ride out to
buy a darling little trunk and even thing
nice to put into it. There, now, sit in
this chair and think over it while I get
supper for my birdie.”
“Maidee," said the child, as her sister
wa- about to leave the room, “that Mr.
Wallace was so kind to me to day. He
gave me a ride around ih • porch on Min
nie Allen's cart, and put some peaches
in my hat when I left it in the hall. 1
saved one fw. ou, there on the mantle.”

“That was kind. Thank you, pet.'’
As she went down to the dining room
she laughed softly co herself: “They're
ail bound to make me like this Mr. Wal
lace. First Mrs. Allen sings his praise,
now Elsie has gone over to the enemy
with such rapidity it quite takes my
breath away. He seemed to me very un
approachable, but I have seen him so sel
dom, and that may account.”

James Wallace was Mrs. Allen’s most
recently discovered relative.. She had a
perfect mania for tracing kinship; the
ties of blood, be they never so weak,
were very sacred to her, and nothing
pleased her more than to stumble upon
some fifth or sixth cousin hitherto
unaware of her existence and take him
into the benevolent circle of
her friendship. Some chance business
dealings led Mr. Wallace in her direc
tion, and somehow it came about that he
left his lodgings and took up his abode
under the hospitable roof that sheltered
Marian. There was no question of Airs.
Allen's delight at this arrangement. “It
is so good to have a man in the house
again, my dear,” she confided to Alarian.
And poor, dear David would have ap
proved, I’m sure. The “boys are well
enough ” —she boarded gratis her three
nephews who attended an academy near
by—but they are only boys, after all, not
men, and of no earthly use in an emer
gency. But just to look at James around
the house ought to give us poor defense
less women a feeling of security. Alarian
resented this remark somewhat, being an
independent lassie and never having
found as yet the presence of the other
sex necessary to her comfort or happi
ness. But when she reached the dining
room and found him there she felt in
duty bound to scrutinize him more
thoughtfully, for Elsie’s sake. He was
helping Mrs. Allen to decide between
the merits of two designs for a new
monument to mark the last resting place
of her famHy. He nodded to her over
the paper and Mrs. Allen bustled around
to assist M iiian in “ making a picture ”
of the tray. “He has kind eyes,” she
thought. Airs. Allen, the straw
berry jelly, I think. It sets off the
floating island better than the gooseberry
—and his mouth is a little, a very little
hard looking—only a tiny piece of
chicken, thank you—a most uncom
promising chin—well, if you will insist,
just one of those star cookies —younger
than I supposed, too. I believed him
quite ancient.
Good Mrs. Allea just then went out
of the room for some other little deli
cacy for the patient, and Marian, look
ing at her tempting load, let herself
wonder for a minute who would have
that task when Elsie was going. Then
it dawned on her what she was about
to do, and to her own dismay, as well
as to that of the other occupant of the
room, a little sob, try as she would to
suppress it, welled up her throat, and
her hands shook so it was almost a
miracle the tiny red waiter did not Fall
upon the floor. Mr. Wallace had heaid
something about the sisters, and partly
divined the cause of her agitation.
“Miss Alartin,” he began—and there
was no impertinent curiosity in his tone
—“can Ido anything for you? Is the
little sister worse?”

“No,” said Marian, responding to the
genuine honesty expressed in voice ajid
words, though mortified at having lost
control oefore a stranger; “but it is so
hard to send her away, and we have
been together all our lives.”
She said nothing for an instant while
she stood there bravely fighting evidence
of her emotion, though the bowed head
and quivering chin were affecting enough,
then broke In abruptly, in a business-like
tone:

‘ How soon could you have the little
girl ready?”
“Saturday. I think,” answered Alarian.
“And this is Alonday,” he said, as if in
deep reflection. While Marion wondered,
he consulted a note book. It contained
not the slightest reference to what he
was about to say next, he never having
thought of it himself till that moment.
“Yes, 1 have business along that road,
and it would be no trouble to see your
little sister to her destination. “Oh,”
was all Alarian said, but with such a glow
on the bonny face he immediately sur
prised himself into another fib.
“By the way, you needn't purchase a
ticket, I have a pass over the line, and
she may use it with me as well as not.”
Alarian was proud, still there was no re
sisting the friendly offers made in such a
way, and a grateful “You are too kind”
was all she aitempted, when Airs. Allen
came in and she sped up stairs to feed
her nursling.
If she was so surprised at this offer
from one she barely knew, how much
more was James Wallace astonished to
find himself performing such a youth
fully impulsive action. A self-made,
self-contained man, his early orphan
years had been made dreary enough by
the gru Iging kindness of charity, and
his youth rendered deso ate by the self
ishness of the woman he had wooed but
could not win by reason of his poverty.
Now when fortune smiled upon him he
had come to think the whole world en
gaged in a mad struggle for the coveted
object, whatever it might be, with every
man for himself, and though never posi
tively unfeeling nor cynical he sometimes
acted on that belief. But here was a
young girl who had bewitched him into
taking a trip the very busiest season of
the year. She was different from the
rollicking, coquettish girl who had
clouded his early life; different from ths
coaixe, hearty good-natured young women
who worked in his factory. These

THE CHARLESTOWN ENTERPRISE.

had represented all womanhood to him.
for he had no remembrance of
his mother. Airs. Allen showed another
type, and here was a sweet, unaffected
maiden. No. he wasn't a bit sorry for
what he had done; not even when it
took him from the factory a whole week,
nor when it absorbed his quiet evenings
in confabs about air pillows, checks,
berths, and other topics of interest to
Alarian and his cousin: for wasn’t his
opinion aske 1 in the most flattering man
ner, and d'dn't he feel himself growing
younger every day.
At last the hour of parting came, and
Marian's pain was eased a little when her
last glimpse of the beloved little form
showed Elsie, with her lap full of pres
ents, throwing kisses with all her might,
while a strong arm encircled her, and
Mr. Wallace's smile was so assuring that
Marian wondered she had ever thought
his mouth anything but handsome.

It is a week since Elsie was borne
from her, and Marian sits in her room
lonely but for the hope which lies so
near her heart, and ever with thoughts
of her absent one come others of the new
friend who took her two hands in his
to day and related with the minuteness
of a woman every circumstance con
nected with the child s arrival in her
new home, of the thoughtful people
who received her, and the golden
promises of perfect cure he had
from the resident physician. Now
she goes to the window, being careful to
see the new moon over her right shoulder,
and then laughing at herself for the
superstition. As she leans out sniffing
delightedly the odor of the freshly cut
grass a puff of smoke brings the tears
to her eyes. It is smoke surely, and
coming from the window of the room
under hers, and when she looks again
to make sure a little tongue of flame
meets her startled gaze. Quick as a
flash she is down stairs, had knocked at
each door and given the alarm. She
quite agrees with Airs. Allen that men
are “good in an emergency” when Air.
Wallace’s firm, even tones answered her
call and even more than agrees when his
self-possession contrasts with the feeble
pipes of alarm from Alias Stinson and in
ertness of several of the other women
who have to be taken out by main force,
Airs. Allen herself being paralyzed by
fright. The greater part of the building
is saved, though it is almost morning
when the fire is declared “out.” After
exhausting themselves in praise of Alar
ian the others go in for coffee and call
her urgently. Still Alarian lingers out
on the lawn surveying the charred
remains of the wing where her room
had been. Only had been, for it
had suffered most and none of Alarian's
treasures were left. She looked ruefully
at the gilt fringe which, hanging so dis
mally from a nail, was a painful remin
der of the desolation within. She was
joined by Air. Wallace, and had to say
something at once to keep from laughing
at the ridiculous spectacle he presented
draped as he was in a blue flannel dress
ing gown, his feet incased in huge arctics,
all topped by a fur cap. “I ought to
feel discouraged,” she said, “but some
how I don’t realize my loss yet.”
“You need never realize it.”

She bent upon him an inquiring glance,
and he answered at once: “Pardon my
bluntness, but Airs. Allen told me you
wanted a place: that’s just the way she
put it and I have found one for you if
you will accept it.” Alarian, wondering
a little at his choice on a subject just
then replied: ‘Can I fill it?’ ‘Fill it?
it is not worthy of you, but no one else
in all the world can. Marian, dear, the
place is in my heart and home. Will
you take it?” And Alarian thought the
face on which the light of dawn broke
had not one objectionable feature.
They had a Christmas wedding at Mrs.
Allen’s; Elsie was bridesmaid and Ala
rian's trosseau was the gift of Airs. Allen
and her boarders, who persisted in say
ing, spite of Marian's contradiction, that
they owed their lives to her heroism.—
A. M. Dunne.

After the Solan Geese.

A sturdy cragsman fastens a rope of
hair, bound with sheepskin, round his
body. About twenty fathoms of this
cable he keeps uncoiled in his hand.
The cord is held by two comrades
standing on the brink of the abyss. He
then adroitly descends the sheer sharp
side of the precipitous rock. The sea
boils below in the dizzy hollow. There
is a mist above. The fisherman grasps
his stanch cord Such an equipment is
bequeathed by the possessor as a treasure
to his descendants. “If a father leaves
his rope to his daughter the young
woman is reckoned one of the best
matches in the island.” The English
party follow with eager eye the crags
man’s dramatic but daily exploit. His im
plement is a long stick with a noose at the
end. Attached to his body is a bladder.
He snatches the unwary fulmar or gar
net by its neck. The bird in his grasp
is frightened and vomits the oil from its
stomach into the bladder vessel of the
man. The bird is then killed for the
value of its feathers, which fetch Id.
per pound. The spectacle is a “dithery”
one to men of unflinching nerves
to face, but to the courageous crags
man the enterprise seems an
easy diversion. He ascends the face of
the cliff with the same alacrity as he was
let down. Daring as may seem this
method of capture, mishaps seldom oc
cur. The St. Kildiansare men of steady
nerves and wonderful powers of endur
ance. While the men ensnare the ful
mar the women find their quarry in the
puffins, which are taken in their burrows
by small dogs. The “nine hours’ move
ment” has yet to reach St. Kilda. When
they are not fishing, cultivating their
garden ground, scaling the rocks for
feathers or eggs, the islanders are spin
ning and weaving seventeen hours of the
twenty four. Air. Payne supplies a
pleasant picture of their politeness. They
never forget to greet one another morn
ing and evening. The men raise theii
bonnets with the left hand and hold out
the right. All remain seated in church
until the women have departed. Family
worship is held in every cottage morn
ing and evening. Every meal is pre
ceded by a grace, nor will they take a
drink of milk or water without uncover
ing the head. The men meet nearly
every morning in front of one of then
dwellings to discuss business. They all
talk in the loudest tones. A stranger
would fancy they were coming to blows,
The subjects discussed are, “Shall we
hunt sheep, or mend nets, or catch solan
geese?”’— London Society.

SOME HUMOROUS SKEfCIIES.

COMICAL STORIES THAT <1 TXHD
IN EXCHANGES.

How He <iot HartA Life Preserver
— Hill Nye and the Cyclone—A Ter
rible Keveagr*
“Oh, my child, how did your face In
come so bruised ? Come to mamma and
tell her all about it.”
“I-I-I was over ’cross the r-o ad,
Elayin’with Mis’ Howes littleg-i-r-1; boo
oo 00-oo oo.”
“And did she hurt you like this ?”
“Y’-y-y-y-e-s.”
“Well, that was real naughty in her.
What did she do to little Georgie ?”
“Sh-sh-she knocked me d-o-w-n, an
an-and then she hit in e w-wi-with a
b-r-i-c-k and pounded me w-wi-with a
b-r o-o-m-s-t-i c k.”
“Oh, dear, what a terrible child.
Well, don't cry any more, Georgie.
What were you doing when this hap
pened?”
“Pl-pl-playin’ w-we w-a-s m-a-r
-r-i-e-e-d.”—Detroit Free Press.

A Life Preserver.
Mr. and Airs. Lovgin went to Louis
ville recently by boat, and in the morn
ing when Mrs. L. arose she looked sus
piciously at her husband and said:
“Were you up during the night?”
“Yes, dear,” he responded, gently.
“What was the matter?”
“Why, my dear, I woke up in the night
a little nervous, and I got upto seo if the
life preserver was in good condition in
case of accident.”
“Did you find it?”
“Yes, my dear.”
“So I should say,” she replied with a
disagreeable rasp to her voice, “and you
left the cork on the shelf. Possibly, my
darling, you had better put it back in
the life preserver so it will be all right
for the next passengers who may occupy
this stateroom.”
Mr. Lovgin took the cork and didn’t
continue the conversation. — Merchant-
Traveler.

Bill Nye and the Cyclone.

Those who know me best will remem
ber that I have never, openly or secretly,
written or uttered a sentiment that could
in any way be warped into an adverse
criticism of the cyclone. Whatever I
may have learned or o .served derogatory
to the cyclone and its cruel and treacher
ous nature, I have religiously kept to
myself. I have even gone so far aA to
stand up for and champion the cause of
the cyclone when its enemies sought to
damage it in my hearing. When others
spoke in harsh and severe terms of the
vandal, murderous work of the cyclone,
I said: “Ah, yes, gentlemen; but do
not overlook the great work of purifica
tion that is done by it in its mad gyra
tions. Think how necessary are these
atmospheric upheavals to rid us of super
fluous electricity and purify the stagnant
air.” I did this until 1 suffered person
ally among men. and even the blue-nosed
and sore-eyed hoodlum pointed at m« as
I passed, and said: “There goes 188
Nye, the friend of the cyclone.”
And what is my reward for all this?
Like a peaceful Ute, stealing up through
the sheltering ambush to saw open the
windpipe of a dear friend, comes the
ring-tailed peeler of the sky, scarcely
moving the green leaves as he steals
along the valley on his hind legs. The
air is like the atmosphere of death. No
sound is heard except the dull thud of
the woodman’s axe as it buries itself in
the heart of a pine tree that belongs to
someone else. The sun has dropped be
hind a dull gray cloud that is
faced with pale green. Still lower
down the steel gray and purple clouds
come boiling over the tree-tops. The
tree toad makes a few desultory remarks;
Katy-did says “good evening,” and the
premature twilight has come. Up from
the southwest comes a sullen mutter, a
crash, a roar, like twenty oceans in joint
caucus, the rush of falling trees, the
crash of giant hail stones, the thunder
of falling waters, and, like the deadly
charge of heaven’s artillery, it is over.
That is a cyclone—one of the adult va
riety when it is feeling well. When you
see one of that kind sliding up into the
sky, do not try to twist its tail as it goes
by. It takes a strong, q iick man to
reach out over the dashboard and twist
the tail of a cyclone. He must be strong
in the wrists, cool-headed, and soon in
movements.

The cyclone which visited Northern
Wisconsin on the 9th instant was about
a mile and a half wide, and lasted
through a period of time, I would say,
such as would be measured in pronounc
ing the word “Scat!” in an ordinary tone
of voice. It blew down three churches,
sparing all the saloons, jerked the school
buildings crooked, knocked the postof
fice silly, and demolished a dozen stores
and places of business. It killed two of
the most promising young men and the
purest Christian woman in the village.
Then it went out int > the forest, where I
was riding along, attending to my own
business, tipped me over, and broke my
leg. Everywhere it sought out the young
and fair. It spared the old, the sinful,
and the tough, but spent its fury on the
tender, the good, the true, and the beau
tiful. Is it surprising that it jerked me
galley west? No, indued! lam only
surprised that I am alive.— Bill Nye.

A Terrible Revenge.

“Kiss me again.”
Tender and true were the great brown
•yes that looked so trustfully into those
of, Richard Irwin as these words were
•poken, and as he gazed long and lov
ingly into their liquid depths there came
to him with terrible force the realization
of how much this girl bad suffered, how
much she had given up, and how much
she was yet to undergo for his sake.
They had been married but three days,
these two, and their story was the old,
old one of that most priceless treasure—
the pure and passionless love cf a true
and noble woman being bestowed upon
one whose social status was beneath that of
her whom the mysterious and potent in
fluence of an unchanging affection had
drawn to his side. Gladys Hathaway
was a girl lair of feature and beautiful
of form, and since the day when her
mother—dying almost at the moment
of her greatest joy—had placed in her
husband’sarms the tiny waif of humanity
whose entrance into the world had been
the cause of sn much sorrow, and told
him to guard and cherish it for her sake,
•he had been alike the joy and idol of

her father. All that parental love Could
suggest and wealth procure had been
lavished upon her, and when, like some
fair flower of the Orient, she had grown
almost unconsciously from a tall, shy
girl into a woman whose statue- ue
beauty was not more attractive than the
queenly poise of her regal head and the
soft, winning tones of her voice, there
had come to Brierton Villa suitors by the
score. But none had won her heart.
Kind alike to all, stie gave each one
plainly to understand that friendship
was not Jpve, esteem not affection.
And so the years went on with silent
tread until one evening at a fete chain
pet re given at her father's house Gladys
had met Roscoe Nutwood. She was a
girl of strong perceptive faculties, being
frequently r.ble to find pie in the pantry
when the hired girl had said there was
none there, and an instant after she had
been introduced to Roscoe she knew that,
her future life was linked with his, and
that some day she would be his wile.
And the oracle of her soul had sp >ken
truly. Loving him with a passionate
adoration that knew no bounds, and ap
p eciating in all its horrible intensity the
fact that her father, strong in the pride
of ancestry, would never consent to their
union, she had boldly leaped the barriers
of social prejudice and lied from home
and friends and kindred with the man
without whose loving words and cling
ing kisses her life held naught but deso
lation and sorrow.

“Here is the paper, sweetheart,” said
Roscoe.

She glanced down the columns care
lessly, when suddenly her eye fell upon
something of absorbing interest. It was
an article concerning her elopement—tie
sensation of the day. On and on she
read, until suddenly the peachy cheeks
grew white w’ith a ghastly pallor, the
luminous eyes were dim with the mists
of sorrow, and the lines of her beautiful
cameo face weic tense with agony.
“ Heavens I” exclaimed Roscoe, taking
her in his arms, “what has happened!”
“Papa has been interviewed,” she
gasped between the convulsive sobs that
almost choked her utterance,” aud he
has taken an awful revenge.”
“ What has he done?” asks the hus
band.

“He has,” exclaims the girl, “given
my exact age!”— Chicago Tribune.

Why Cochineal is So Costly.

The Iron-monger, London, explains
why the beautiful cochineal and carmine
colors are so expensive. It says: “ Oue
of the best and most powerful animal
dyes used in the arts and manufactures
is the body of the female cochineal in
sect, dried. This insect exists on a
species of cactus, and when alive is
about the size of a ladybird, or perhaps
a trifle smaller. It is wingless, rather
long, equally broad all over, and is
marked behind with deep incisions and
wrinkles. It has six feet, wnich, curi
ously enough, are only of use directly
after birth, aud it secures itself to the
plant by means of a trunk, which is
found between the forefeet, and derives
its nourishment from the sap. The male
cochineal is like the female only during
the larva period. It changes to chry
salis, and eventually appears as red flies.
The female deposits some thousands of
eggs, which she protects under her
body until they are hatched, and on
the appearance of the young ones the pa
rent dies. While the young are in the
larva state, their sex cannot be determin
ed. They lose their skins several times,
and while the female fixes herself on
the plant, the male, after getting over
the pupa state, is winged. Two or
three months is the extent of the life of
these little insects. Thev are gathered
before they lay eggs, and are then rich
in coloring matter.
Carmine is prepared from the cochi
neal insect, the Coccus acti, which is col
lected by brushing the branches of the
cactus with the tail of a squirrel or
other animal. This is very tedious
w’ork. They are killed by immersing
them in boiling water, and this has to
be done or they would lay their eggs,
and thereby lose much of their value.
There are many processes for preparing
the carmine. The French process
may be taken as an example. One
pound of powdered cochineal insects is
boiled for fifteen minutes in three gal
lons of water; one ounce of cream tartar
is then added, and the boiling is contin
ued ten minutes longer; then one ounce
and a half of powdered alum is thrown
in and the boiling continued for two
minutes longer. The liquid is then
poured off and set aside for the carmine
to settle down. In other processes car
bonate of soda forpdtash is used.

Buttered Flour.

A Connecticut company makes flour all
ready for baking biscuit or strawberry
shortcake; it only requires to be mixed
with milk or cold water and the batter is
ready for the oven. The process of its
manufacture is interesting. A quantity
of wheat flour is sifted and dumped into
a large tub. Butter cut into large cubes
is added to the flour. Then the white
coated operator weighs out certain mys
terious quantities of baking soda and fine
table salt, which go to swell the contents
of the tub. Then the mixture is placed
in a large, polished cask, which revolves
slowly in one direction, while a sort of
dasher inside moves in the opposite di
rection. The cask revolves about thirty
minutes, at the end of which time it is
opened. It is found that the ingredient®
have been thoroughly mixed; every par
ticle of moisture contained in the butter
has been evaporated and the mixture is
as fragrant as new mown hay. It is then
placed in bags and boxed for shipment.
Hartford Times.

A Crab-Shell Barometer.

A curious barometer is used by the
remnant of the Araucanian race which
inhabits the southernmost province of
Chili. It consists of the cast-off shell
of a crab, which is said to be extremely
sensitive to atmospheric changes, re
maining quite white in fair, dry weather,
but indicating the approach of a moist
atmosphere by the appearance of small
red spots, which grow both in number
and in size as the’moisture of the air in
creases, until, finally, with the actual
occurrence of rain, the shell becomes en
tirely red, and remains so throughout
the rainy season.— Philadelphia Press.

The projected system of electric rail
ways in Austria is expected to revolution
ize street travel in the cities of that
country.

TWO GRAY HEADS,
Two gray heads at the gate:
Lingering kisses, clasping of hands-
The granddaughter there with her baby
stands!
The horses prance, and the travelers waiir,
The driver shouts, “We are latd”
Th- hour-glass stays not its sands
For the old man and his mate.
They wave “Gool-bye!” from the door
Hung over with morning-glory vines.
Her soul through her agel features shiness
And thu sun-streams over his white lock,
pour:
They are lover and bride, as of yore,
r n their cottage under the pines,
Although they are full fourscore.
The eyes that look up to his,
And meet half-way his caressing glance—
The beautiful, heart-fresh countenance—
Nothing therein does the bridegroom miss
Of her maiden tenderness;
And the thoughtful years enhance
Unto her his nobleness.
For three-score golden years
They have shared life's ho.nlinoss and its
grace,
Time's plow-inark furrows the wrinkled face
But, deep in the channels of long-dried tears,
A blossoming glory appears;
Unfading faith in the place
Of transient sorrows and fears.
A steady life-time through
8 >ul has been unto soul a guiding light;
Tney have lived in a realm where there is no
night, .
Where love is eternal, because it is true;
And heavy will be hardly new
When it breaks on their fading sight
Through celestial morning dew.
Two gray heads in the sun;
Each in its halo of silvery light:
Fairas the mountain-forehead white,
Their brows in the pureness they have won;
Some love tales in telling are done;
But the story these old lovers write
Is a story forever begun.
—Lucy Laroom,

HUMOR OF THE DAY.

A slow match— A long engagement.—
Citizen.

Love is blind, very blind—when the
girl is rich.

The price of writing paper is going
up. We always thought it was station
ery. — Pittsburg Chronicle.
Between babies that pull whiskers and
wives that pull hair, it is a wonder that
nine men have any capillary appendages
at all.— Philadelphia CaX.
A young man by the name of Sweet
was recently married to a Alias Knox.
She gets the sweet, and he will get the
knocks. — Burlington Free Press.
Visitor —“Mercy me! What are those
horrible sounds upstairs?'’ Lady of the
House—“Oh, that is nothing but dear
George. I suppose he has lost his collar
stud again.”
Native—“ Well, how do you like our
town?” Visitor —“Very nice place.
Just consider; there are twenty-two
trains on which one can leave daily.”—•
Minnesota Bazoo.

The wife of a Kansas man thought
her husband was dead and hud him put
on ice; but he awoke in the night and
yelled out, “Why don’t you put some
more wood in that stove!”

“Well,” said Dumps to his wife, in
dignantly, “I guess 1 know a liar when
1 see one.” “Ah, indeed!” was her calm
reply; “been looking in the mirror, have
you?”— Merchant-1 'raveler.
When Fogg came into the room unex
pectedly, Mrs. F. gave a scream and ex
ciaimed: “You frightened me half to
death!” “Did 1?” was the unfeeling
reply. “Suppose 1 try it over again.”—
Boston Transcript.
“Do you know what the board over
that cow's face is for?” asked the colonel.
“No,” responded the major, “unless it
is to keep her blushes from being seen
when the milkman works the pump
handle.”

A young lady in St. Louis recently
doused a young man with a pailful of
water, while he was down on his knees
begging her to be his bride. It is always
the custom, we believe, in some parts
of the West to wet a new suit.—Burling
ton Free Press.

A young lady, in reply to her father’s
question why she did not wear rings
upon her fingers, said: “ Because, papa,
they hurt me when anybody squeezes my
hand.” “ What business have you to
have your hand squeezed?” “Certainly,
none; but still, you know, papa, one
would like to keep it in squeezing
order.”

BALLAD OF THE BABY.

He’s come where he’ll have to scratch for his
grub,
And reach out for everything he geta:
He ll weep when they first douse him inio the

tuo,
And lie’ll get shaken up when he frets.
They'll think he’s smart when he first iearna

to crawl,
And they'll go into fits when he talks;
And ho 11 have the most fun when he’s very,
very small,
For he'll have to go it alone when he walks.
First we bawl,
And then we talk,
And then we crawl,
Aud then we walk.

And from tlia time on we are prone to get
into trouble as the railway cinders into the
human eye.— li. J. Burdette.

A Successful Jockey.

Mr. John Hammond, the owner of the
English racehorse St. Gatiens, estimates
his net winning on the turf in England
during the present racing season at the
enormous sum of $750, UOO. Hie win
nings on the Derby alone were $150,000,
and those of the last two or three years
amounted to $400,000. Hammond’s
proudest boast to-day is that twenty
years ago he was employed in cleaning
boots outside of a sporting hotel at Ep
som. He began his career on the turf
ns a stable boy, next became a jockey,
and when he grew too heavy to ride he
became a tout. He pursued his calling
until he became financially strong enough
to be an investor on his own account.
He bought JSt. Gatien and Florence for
$15,000, and won more than ten times
that amount with each animal, in this
one s *son, capturing the Derby, the
Manchester cup, the gold vase, the
Czarewitch and a dozen'tninor events. —
Washington Star.

The Indians of Nevada esteem as a
great delicacy an owl cooked with stmer
stuffing,ONE OF BROWN’S MEN

▲ Pennsylvania Man's Recollection!

of Stevens.

of the Prominent Character* oi
the Pamou* Harper’s Ferry
Raid—A Very Remark
able Man.

[George Alfred Townsend’s Letter.]

Mr. Donovan said: “I lived in Baltimore
CSty before the war, and was reporter and
correspondent on the exchange there. In
formation was brought to us that there war
an insurrection o' some kind at Harper’*
Ferry. I went to the Relay house on Mon
day night, and there took a train coming uj
from Washington City bound for Harper’*
Ferry. It had the marinas on board, and
Col. Lee, of the regular army, who had beer
sent there by the secretary of war. We go.
to Sandy Hook, on the Maryland side of the
Potomac, and there the train stopped while 1
went across the bridge to the ferry. There
were guards on the bridge, and so much ex
citement and nervousness that after I got the
eoontersign I would not pass until they sent
a man with me to go ahead and give the
countersign. The town was in a strange con
dition. Almost everybody was afraid tx
walk on the streets because persons had beer
shot by Brown and his band from the engine
bouse.

“I went int> the Wager house, wli ch was
prr fry fall of i e >ple. Ihe r 1 son e <n) say
that th *re was a man upstairs brio >ging tc
Brown’s band wh<» had bem shot, *o, leing
after news, 1 st< p »ed rp there, and aw iy ng
on th i l»ed a woi nL d na i w 10m 1 have al
ways c >nsidered si c * as tio tine t s.. c n e.i
of ph} sc tl manhood 1 had eve fen u my
Mie. It wes ft*vens, one of J< h i Brown's
men, and a very remarkal la man any w u yj.
He was ei t rely naked, except a kii d of
clout around his mi Idle. His eye w< r > open
and took in every ih ng, but he was horiibly
shot. He ht:d laea *hot from aLt !• shinty
call* d the Galt h >use while coming o t with
a Hag f truce to m ike some p o o ibn to
the c tiv nis. A man in there, wi h tie room
darken-i b hind him < rawing bins If b tck
far enough i o to t > seen, had pit a revolver
on his arm ; n e npti< dev ry barrel of it ht)
Stevens. Steve is meai.ti ne was trying to
Bee v here the sho s v e c con iig from to fl e
back, lor he was a b ave as ali n Ho fell,
and was (’rigged into the hotel and me
nauced wi h nis life, Lug he never begged a
werd.

“When I went upup-stairs I saw a most ex
traordinary scene. Stevens was lying on the
bed, and I noticed especialy his hands and
feet. He had small hand, and his arm from
the shoulder to the hands was in beautiful
diminishing lines. The shoulder was mag
nificent. There were three persons in the
room, and while I was asking a question of
them a young man entered by the door, took
his place at the foot of the bjd, and suddenly
he drew a pistol and fired it right into that
man's face, shouting, ‘My father has baen
wounded, and lam going to kill you’ I
looked at the man as the pistol was snapped,
acd he never winked. With a calm blue eye
he looked his assassin in the face and uttered
not one word. I cried out, ‘Men, are you
going to see this man murdered?’

*We jumped up aid vr shied with the
young fellow, who was trying to fire again.
He was pull d off, and one of the men said to
hhn: ‘lf that man could stand on his feet
and there was a room full of such as you, h *
could clean you all out in a second.’ During
this whole occurrence Stevens was the least
interested person in the matter.
"I then began to talk to him. He answered
me in monosyllables, was resolved to give no
information, and su' s iquently, when he was
tried and in jail, and be fore he was hanged,
I often talked to him. If old John Brown
had not been su-h a r markable minthat
feDow Stevens wou’d h ive attract* 1 the ad
miration of the v h de country.”
Said I: “Mr. Donovan, what state are you
• native of ?”

‘‘Pennsylvania. I was born at Shippens
burg, in the Cumberland va by. While I
have always been a Democrat, I have re
mrvod my private opinions, and among them
have always considered that old Brown and
his party as among the most remarkable per
sons I ever saw.”

"Mr. Donovan, did you think much of Ste
vens after you came to know Irm better?”
"He was a great man. When he wis
brought into that court to b> tried, lying
down, he was th? best looking man in the
court. He was a young man, bat every inch
of him a man.” I said to him once: ‘Tour
name is not stevens?’

" ‘Yes it is,’ sail he, ‘but if it isn't, Stevens
will do.’ He never begg »d nor even accepted
a favor while in jail. Theie was a strong
prejudice against him becau e they knew
that the whole genius of al olition was in his
system. For John Brown Ie had the most
unbounded worship. Brown respected a brave
man, and all his men weie brave exc pt
Cook, an 1 when he told Cook, when h > was
being led to the gallows, that he h d t >ld
lies, he merely expressed his idea of (kok's
cowardice and truckli g. But th 're w s a
veiy grea* difference between Stevens a d
Brown. Stevens had taken a pun Iv physi
cal va wof that raid, a soldier’s vi wof it.
He th >ught that John Brown had made his
preparations well and that they would have
a Jon, r campaign and a successful one aid
get off with plenty of slaves. He lou id
nearly all Brown’s paity captured or kill d.
and he made up Lis mind that the thing was
a failure.

“Brown, on the other hand, soon realized
the moral importance of that raid, and he
had the intelligence to know that his death
was essential to a general propagation of his
views. He had come there originally to
fight. Soon after he was captured he began
to see that his death was of more avail than
his victory would have been. So that old
man devoted his remaining days to extend
ing and increasing the anti-slavery feeling
and sympathy in the country. He was a be
liever in the Bible and in orthodox Puritan
ism. He had . onsolation out of hi* Bible.
He took pleasure in his prayers.

“Stevens was not that kind of a man. It
was generally believed that he was a Spirit
ualist He told me that spirits could com
mune with each other. His feeling toward
the people of the south was that of a man
opposed to them, who had come to invade
them, was sorry he was beaten, and asked
them nothing whatever in the way of con
sideration. He referred to his death once in
talking to me as a very ordinary matter.”

Slcn« of a Hard Winter.
[Middlebury Post]

We may look for an extraordinary severe
winter if there is any virtue in the Indian
hornet sign. All the nests we have found
this year in the woods are built on the
ground. When they are suspended from
trees and high up it is a sign for a mild win
ter. Our old prognosticators say that they
have never known this sign to fail.

The Hunters Are After Him.
[The Current.]

The woodpecker is not having « pleasant
time of it this fall. The hunters are after
him because his feathers have the fashionable
colors, brown and white, or gray and white
mixtures.

AT THE DOOR.

I thought myself indeed seeure—
So fast the door, so firm the lock—
But 10l he toddling comes to lure
My parent ear with a timorous knock
My heart were stone, could it withstand
The sweetest of my baby’s plea—
That timorous baby’ knocking, and
“Please let me in—it’s only me.”

I threw aside th' unfinished book,
Regardless of its tempting charms,
And opening wide the .door, I took
My laughing darling in my arms.

Who knows but in eternity
I, like a truant child, ’wait
The glories of a life to be.
Beyond the Heavenly Father’s gate!
And will that Heavenly Father heed
The truant’s supplicating cry,
As at the outer door, 1 plead
“’Tis I, O, Father! only I?”

DR. HAMMOND ON LUNACY.

Society In Need of Protection from

Cranks,
[New York Commercial-Advertiser.]

“Morally and 1 ‘g a ly, what is the responsi
bility of a lunatic? - ’
"There you ask two questions that start
from a com non apex and branch into a w d ?
I wdl answer in this way: Giv< n a
man of unsound mind, one of tha rational
lunatics, f >r instance, wh > goes tl rough the
world mistaken for a sane man. He has de
lusions; he imagines that a pen on is about
to commit, or has committed, a serious of
fense a gainst him—perhaps that ho intends
to take his life—and while suffering from the
delusion I e kills the person. Now, morally,
that lunatic is irres x ndble. Legally, he
should be held respon iole. Why? Because
he is dmg rotis, lie should be locked up in
an insane asylum L r criminals for the re
nian ler of his natural life, or he should be
exo uted.

“In Eurcp? the in l ana once having trans
gressed the laws are immured for iLe. Here,
according to ol 1 laws, a man may, during an
insane freak, k.ll a whole family, and as soon
a t..e physiria i in charge of the hospital
pronounces him cure I he is discharge 1, and
the suprema au:h >r.ty o. thj stat? or federal
government will n>t su lice to hold him. He
goes forth oertifie 1 to as a convale cent lun
atic. with an in lulgence to kill with immun
ity. I have hr? in this note-book the facts
connected with seventy recent cases in this
country an 1 in Europe where men who have
been allowe I ih dr Ireodom on the ground of
insanity a ter taking human lite have again
ensanguined their hands.”

“Do you think that a prospect of being
hanged would prive as deterring to a mad
man as a sane man?”

“To be sure. Insane persons are governed
by the presence of impending punishment
even more readily than sane persons. Only
the furious mad and the idiot are regardless
of consequences, and even these may be re
strained to a certain extent. If a lunatic io
an asylum spreads his butter on the table
cloth, say to him,‘See here, my friend, if
you do that again you shan’t have any but
ter,’ or ‘You shall be placed in the dark cell,’
and he won’t do it again. A dangerously in
sane jierson is of no use to himself or to the
community. While he is not morally resj>on
sible, he should be put out of the way. He
should either be executed, or relentlessly im
prisoned for life, an 1 allowed to go out of his
prison no more while life remains in his body.
Is it cruel ? So is the man who slays the inno
cent. See that mad dog over there. He is
not responsible for his madness. Why kill
him? Because by his death society is served.
Society knows no law but necessity. It
looks for the greatest good for the greatest
number. Once a member of society becomes
dangerous, society has a right to put him out
of the way, regardless of the moral aspect
of the question. Justice is not the meting
out of exact measure to the accused, but the
affixing of such punishment as may not only
deter others, but rid the community of the
transgressor.”

A Terrible “Specter Bark.”
[New York World.]

The lumber-laden schooner, Maggie M.
Rivers which was abandoned waterlogged,
near cape Hatteras, on last January, stiff
outlives the raging Atlantic gales. A vessel
arriving at Halifax last week reported pass
ing this derelict on the 11th inst. in latitude
37 degrees, 15 minutes, north, longitude 64
degrees 6 minutes, west, dismasted anl cov
ered with barnacles. After the crew left her
she drifted 300 miles in an easterly direction
right across the Gulf stream current, then
aitered her course, traveling 120 miles due
southeast; then for forty days moved to the
northwest. In May she was heading for the
Florida coast; in June she turned towards
Savannah, ai d since then she has been twice
reported drifting to the northeastward in the
Gulf stream current.

She is now probably about 259 miles south
east from New York, and having gotten by
the aid of o e m currents fairly wi.hin the
“anti-trade” wi ndbelt, she will be speeded by
comb n ‘ I wind and current agency into the
great ship routes between Ameii a and Eu
rope. Sne is not a “specter bark,” but an
almost so.il mass of lumber, and hence a
grave mena< eto navigation, which may for
years survive the disinter. rilingp >wer of the
waves unless some eno blows her to pieces.
Ihe government would do a good service to
commerce by dispatching a naval steamer to
find and sink, or else to I ring into port this
seemingly indestruciidj rover of the deep.

A K-iss In Provincetown.
[Boston Globe.]

A young Boston gentleman recently passed
a couple of days in the ancient town at the
and of the cape. It chanced that on the first
evening he met a certain young lady, whom
he escorted home, and at the door it was his
pleasure to impress upon her lips the indis
pensable kiss of friendship. On the next
evening he met she same young lady, and
again escorted her home, and agaiu was
privileged to kiss her ruby lips. At parting
she remarked:

“Charlie, do you notice any difference be
tween the kiss I gave you last night and the
one I gave you to-night?”
“I can't say that I do,” responded Charlie.
“Why do you ask?”
“Because,” was the innocent response, “I
had my false teeth in last night; I haven’t
got them in to-night.”

Bad for Vegetarians.
[Exchange.]

Dr. Spencer Cobbold has reminded vegeta
rians that abstaining from meat does not
afford security from parasitism, for the most
common parasite in England is almost en
tirely nourished by vegetables, and it is by
means of vegetables that certain parasites are
introduced into the human body.

Would Be Salutary.
[Fargo Munday Argus. ]

It would be salutary if special emphasis
were given to the injunction that right living
in the now is the great need of the age, and
the best assurance of security and felicitous
attainment when the relentless messenger
from beyond the river calls.

Teetotaller*.

A fund has been raised in England to assist
any destitute families that have been tee
totallers for three years. Very few applica
tions have thus far been reported.

THE CHARLESTOWN ENTERPRISE.

A QUEER GENIUS.

A Few Reminiscences of Edison*!

Life in Cincinnati.

Receiving a Visitor Dressed Only la
Shoes, a Shirt, and Ping
Hat—Bothered by

Stranger*.

[Cincinnati Times-Star.]

It is not generally known that Thomas Ed
ison, the well-known inventor, w&#38;s a West
ern Union telegraph o;erator in this city in
1867.

Ed Armstong, the father of the ;»atrol sys
tem, was also an operator in the same office,
and from that time until the present has
been his intimate friend and corre-pondent.
In speaking of him Mr. Armstrong said: “He
had a room at 57 West Third street, and was
the queerest genius I ever met. He was not
tall, but angular, with a slight stoop in his
shoulders, while bis clothe* looke 1 like they
had been thrown at him and stuck,
and he had walked off not knowing
they were there. He was an in
veterate smoker, but held his cigar in a man
ner entirely peculiar to himself. Instead of
catching it between the forefinger and thumb,
like rno-t men do, he would grip it with his
entire hand as if it was a crank and his
mouth the wheel to turn. When it would
burn up to his little finger that Huger would
fiy up, then the other, and so on, until the
cigar was consume 1 up to his mouth. He
w’ould then walk along holding the stump to
his lips with his thumb and forefinger and
his other fingers scattered out in front of his
no e.

For a long time ho wore an old ragged
suit around the office that was an abomina
tion to decency. But one day he suddenly
appeared dressed in a snanking new suit,
with a leer on his face and smoking a cigar.
The boys would not believe it was him until
they heard that peculiar funny voice of his,
that sounded like a cross-cut saw running
through rotton wood, or a hog scratching
himself on a splinter.
A few days later he showed up, but oho
leg of the breeches was completely soiled
and ruined with acids. He had been ex
perimenting, and stained them as yellow as
a Chinaman’s uniform. Yet he wore that
suit around the office for five months after
ward.

Another peculiarity about the man was
his handwriting. None of the letters were
connected, yet it was as plain and legible as
print. Though painfully slow in I laborious
for any one else to write in this way, he
could receive from the fastest operators in
the country.
When I visited him in New York, 1 was
shown into a private room, and after send
ing up my faid, he immediately sent forme.
When 11 ntered his label atory he wore noth
ing but a pair of shoes, a shirt and a plug
hat. You can imagine how he appeared to
me. After getting done laughing, 1 finally
shook hands with him an I said:

“Tom, why don’t you keep your clothes
on?”

He twisted his face into that peculiar leer
of his and answered:

“I am seriously bothered by visitors. Of
course they must all see me, but when they
come in and see what condition I am in they
immediately leave, thinking, doubtless, I am
crazy.”
That evening while talking to me he sud
denly turned around and said:
“Ed., what has become of that fellow we
used to receive so many dispatches from
while I was in Cincinnati? His name was
—was, oh—oh, pshaw! you know who I
mean!”

“1 knew who he meant, but could not re
call the fellow’s name just then. An hour
later I left him, and going down on Market
streat met some friends, and we all stepped
into a restaurant to get supper. While there
I oaked out and saw Edson walking along
the street looking up at the names of the
people over the doors. I called him in and
wanted to know what he was doing, when he
answered: ‘1 am trying to find that devilish
fellow’s name.’ Later in the evening he
went home, getting the city directory, com
menced at A and went to Z trying to find
the name, but still unsuccessful. He then
took colors, and the moment he came
to pink he exclaimed: “Ah, I have it.” The
name was Pink Tarvin. “Tarvin was a well
known steamboat pilot in Cincinnati at one
time. It was 5 o’clock in the morning when
he found the name and got to bed. He was
very fond of a joke, and nicely took in Arton,
The Tribune correspondent Learning that
he was coming, Edison called all his com
rades around him and told them that he
wanted them to pretend that they were work
ing themselves to death when Arton came.
The great new-paper man was received by
Edison with due propriety and a broad grin.
When / -ton went into the room on the first
floor of the laboratory, he saw about a hun
dred men pouring out and mixing liquids,
arranging Latteries, and apparently exhaust
ing at. hard work. On the second,
third and fourth floors it was the same, and
when he returned to New York he wrote up
a most wonderful account of his visit to the
laboratory of the “great inventor.”
When Tom read the article he grinned like
a monkey, but was as mum as an oyster.”

RheumatiMin by Oue Majority.
[Detroit Free Press.]

We were about three miles from Natchez,
when we heard a great shouting an l wailing
in a negro’s cabin by the roadside, and it was
decided to dismount and go in. It was a
tumble-down structure with but a single
room, and into this were crowded sixteen or
eighteen colored people, mostly of the female
sex On a heap of straw on the clay floor
was a sick woman. She was rolling her eyes
and writhing as if suffering great pain. When
asked what ailed her an old white-headed
negro, who was called “doctor” by the others,
replied:
“Dat’s jist what we doan’ agree on. Some
says it’s de bilyus colic, an’ some says it’s de
gallopin’ consumpshun.”
“Why, man, something ought to be done
for her right away.”
“ ’Zactly, sah—’zactly, an’ Ize de doctah
iat would like to take right hold of de
case.”

“But why don’t you?”
“Kase Ize box* 1 up, sah. I nebber gin de
same medicine lur gallopin’ consumpshun
dat I do fur bilyus colic, an’ until we kin de
cide on the ailment I doan’ dare go ahead.”
We were on our horses and ready to move
off when the old man came out with a hap
pier look on his face a id said:
‘Gem'len, we has sorter took a vote on it,
»n’ we has declar’d it rheumatism by one ma
jority. Ize gwine right at it to heat de
bricks an’ gin her an all-night sweat.

Rays from the Lone Star.
[San An onio Light]
A I f? of mere money-gett.ng is always a
failure, because you will get as much as you
want. The poorest people in this country are
the millionaires, and next to them those who
have $5JO,OuO.

John Randolph: Economy—the adapting
>f your supplies judiciously to the intended
Mid. This is a gift of God. It can not b«
aught

PRIVATE AND OFFICIAL VIEWS.

Th* Man Who Complained Abou*
the Telegraph Pole*.
[W. A. Croffut]

John G. Moore, preeidtnt of the Mutual
Union Telograj h comjvany, baring had a
year’s sight se >ing ai d hunting in Euro* e
has n>w gore for a w eek c r two to the c<
of Main?, i e.ir Bar Hari o•, to fish a: d v.si
hi> ol I tome. He came very near sj ending
his Ine a- th « skip; er of a fishing smack, likt
the oth. r boys aroun 1 1 im, bi t fortui a‘ely
he ran nv ay fi om lom■at an arly age and
gia h ally driite 1 into h mbering, die Iging.
pavh g, radio d ng, bnakwater bui dmg
telegraph-se Ing ;n 1 dividend-draw ng I
hi aid a goi <l story al ou lim two or thr.*
yearsago. '1 ho Mt tual Unio:i te'egrapl
poles, as is well kno ui, are a'»out as big
aroui das a barrel ;nd th?y were oft mci m
p ained of as a nia-an e They were pul
down in the night through Pine s reet, when
they occupied alaiut two-ihirds of the three
foot pavement. Tenant-; nature ly objected
and Mr. Moore went down to see al out it
As he approached, a man who did not know
him said: “Ixiok at that jole! Taket
almost the whole pavement! Who are these
thieves who dare intrude on my premise*
and damage my property in this way? r
“They have an office around on Nassau street,
I think,” said Moore. “What ought to I*
done to ’em?” asked the man savagely, while
a crowd gathered. “It is a dreadful outrage/
said Moore, "they ought to be hung!” But
he got away as soon as convenient and
walked around to the office. In half an hour
the same man came clamoring into the same
office and asked to see the president of the
Mutual Union Telegraph company. He wa*
show’n into the inner office and directed t<
Mr. Moore’s desk. “I have come in,” he
began, “to say that in my opinion,” then h*
looked at Mr. Moore and paused. “That these
awful poles,” he began again, then hesitated
as he again carefully scrutinized the gentle
man at the desk. “Say!” he broke out, “aint
you the same man that I see down in front ol
my building a little while ago, and that said
that men who would plant such poles ought
to be hung?”
“Yes, I am that same man,” said Mr. Moore
c:4 nly.

“And you arothep** ident of the c< m
I a y— you’re tl e man that done it?” “Cer
t amy,” said tio pres d n , quite unmove 1.
"Well, wl a‘ ha\e vou got to *»■.• for your
self, sir?" s‘i.»uml the enraged vidtor.
“Nothing,” s i.th > jiole-raiser, “except that
here I act and speak officially, while there I
was speaking merely as private citizen.” Th<
mau strove to speak, bi t h a wcr is stuck in
his mouth. He gasped with rage; then he
d d berately looked Moore over from head to
foot as if measuring him for a new suit of
clothes, uttered one comprehensive grunt of
disgust and fled.

How the Roast Beef Was Sold.
[New York Cor. Inter Ocean.]

In one of the largest and most fashionable
of our down-town luncheon-rooms, when*
Wall street men and other hurried eaters
grab at the edibles most temptingly in reach,
the consumption of roast beef was insignifi
cant; and this was particularly displeasing
to the proprietor, because he had an advan
tageous contract with a Chicago leaf freez
ing company. Just as he was telling a friend
about it the wreck of a portly, middle-aged
EnglLman floated in to beg for something to
eat.
“Get out!” commanded the boss.

“Let him wait until I whisper something to
you,” remarked the friend. “England is the
country of roast beef. This fellow is as typ
ical an Englishman as ever lived. You can
hire him for a few dollars a week and found;
dress him well, shave his face, comb his hair,
and he will look like a well-fed Briton of a
prosperous sort Then bring your biggest
roasts of beef right out in sight, pose him a
a carver behind them, and I guarantee you’ll
sell 300 pounds a day."
The experiment was tried. The English
aspect of the man who wielded the knife and
fork had the expected effect. Fellows who
had never thought of ordering so substantial
a viand as roast beef for luncheon now
crowded to the counter behind which the
Englishman sliced it off spectacularly, and
the venture is still one of the most profitable
in the history of the restaurant business in
New York.

Machine-Made Comedy.
[“Uncle Bill’s” New York Letter.]

An idea suggested by current amusements
is that bad actors may succeed in making us
laugh by means of mechanism, so that good
coinedia’is shall no longer be essential to a
profitable jierformance. A new farcical
piece is brought out at one of our theatres.
It is of the kind that give to the principal
actor opportunities to be funny, but further
than that do not help him much in the task.
The man in this instance is direct from the
song and dance of the variety shows, an 1
without the slightest ability as a dramatic
comedian. His role is that of a book
audacious and loquacious, but he is absolutely
solemn. Neverthele s, the audience laughs
uproariously at him about once in ten min
utes. Whenever he sits down there is a sound
like the slap of two hoards together. This is
explained, on its first occurrence, to be
caused by a kick-proof shingle inserted, for
reasons obvious to anybody who knows the
unpopularity of the book peddle*", in the seat
>f his trousers. What is the use of mimetic
talent when so simple a device will serve the
same purjiose.

Atlanta’* Wonderful Hotel.
[Chicago Herald.]

The Kimball house in Atlanta will cost
1750,000. A striking feature will be its
roof. This roof is incl >sed on all sides with a
parapet wall set b.\cd from the edges. It
wi.l be handsomely tiled. Part of the roof
will be covered with a beautiful garden, and
the whole flooded with electric light. A
platform will l»e erected at one end and open
air concerts given nightly. Three immense
passenger elevators will carry the people to
the roof. A first-class cafe will be estab
lished there.

Skulls in a Muaenm.
[Phrenological Journal.]

It may be of interest to the reader* of
“Gath’s” novel, “Patty Cannon’s Times,” to
know that for more than forty years the
skulls of Patty and Betsy Cannon and Eben
szer Johnson have been preserved in the
Phrenological museum in New York. They
were obtained by the original proprietors of
the museum while lecturing in Maryland and
Delaware, near the scene of the crimes and
tragical death of the notorious Patty.

Model* for the Exposition.

The patent office is preparing 2,500 India
ink drawings of models to represent the me
chanical and industrial progress of the
country for the New Orleans exposition.
I'hirty-eight artists are at work making the
Irawings. Twenty-eight hundred models
will be sent to New Orleans also.

Still a My«tery.
[Philadelphia News.]

France having blocked the Woo Sung river
there is a diminution in the volume of the
tom-tom. and the fate of the jub-jub bird is
.nvolved in as much mystery as ever.

Over 307,00 J widows have applied for pen
sions.

DAYS IN FRISCO.

▲ City Claimed to Be the Moat Fas
cinating in the World.

How a Town Should Be Painted
Red—ln Chlnatown~A New
style &#38; O’clock Tea

—Picturesque.

[“Ruhamah” in St. Louis Globe-Democrat]
The fascinations of that bles ed city of
San Francisco are too many for any one to
attempt to enumerate, and cn each of the
busy days that ran by during my short stay
there was an echo to Lord Ronald Gower's
raptures and an indorsement of his belief in
its being the most picturesque city in the
world. Its picturesqueness might lie height
ened and its ap|K>arance made to harmonize
more with its real character if the dear Cali
fornians would only awaken to the latter era
of house painting and tint their walls and
roofs on a stronger scheme of color. Along
the miles and miles of city streets the l>ay
windowed houses are all ]>ainted the same
dull dirty grey or yellow, that looks like a
priming coat and matches in monotony the
long ‘and dune* along the shore The rich
redwood of which they aie bi lit has the
warm, tine color of mahogany, but they Will
fully and wickedly cover it up wit i this
universal yellow gray paint that robs any
building of character. *
On one street there is a large residence
that is a masterpiece of the new school
architecture, abounding in all the quaint an
gles, rei esj-es gables and windows that the
canons of the Queen Anne cie'd will allow,
and even that house that ought to be a har
mony of india red r.n I dark brown, or olive
anil the tawny shades of waxen shingles, is
painted in the one universal color; roof,
foundation and window lines unrelieved by
any contrast or accent. The architect made
a model in the beautiful outlines and orna
mentation on the exterior, but the )>ainter
spoiled it all as completely as if Ly malice
prepense. A little more color in the outer
wal s would iran.sform San Francisco, make
it brighter an I gayer than ever, and declare
its character to the stranger at the harbor
gate. It would not be necessary to paint the
whole town red, as they tell about on the
s|x>t, but just to touch up the roofs, chimneys
and moldings with that enliven ng hue.

CRAZY FOR CHINAMEN.

“I believe you eastern people are all crazy,”
sighed cur re i< ent friends, as we foun 1 un
ending amusement and delight in Chinatown
and constantly bent our footsteps that way
at the end of every outing. The true Cali
fornians despise nothing more than the
sights and smells of Chinatown, and it is a
weariness to them when eastern people affect
to find picturesqueness there and rave over
the odd things, in the odder shops, that are
sold by the oddest people. The Chinese chil
dren in the queer, foreign streets are ani
mated leaves in a picture book to a stranger,
and the full-grown Mongolian is a being of
endless possibilities in the way of stuffy
and entertainment. There was that
lanterned balcony of the Hong Ferlow res
taurant, wffiere we sat on ebony stools, and
sipping the fragrant oolong that was steeped
before us in the little covered cups, looked
down a narrow street swarmirg with blue
bloused Chinese, to the blue waters and
golden brown shores of the bay. There was
also Mr. Ching Chung Chow, the Celestial
Delmonico, who owns that swell restaurant,
a suave, courteous old soul, whose broken
English and mended China was most divert
ing. He kept the Caucasian group laughing
most of the time, or else sitting in an atten
tive circle around his ebony table we listened
to that connoisseur talk about tea, jjorcelain
and the wonderful fruits of the home empire,
while his servants brought in all sorts of queer
looking things to illustrate his discourse.

FIVE O’CLOCK TEA.

Better yet was an afternoon tea drinking
at the hous® of Mrs. Ching Ling, wife of the
Chinese vice consul, a lady of tiny feet and
gracious manners, whom I had had the for
tune of meeting in a former season. The in
terpreter sent her word beforehand that we
were coming, but she arched her thin eye
brows with the finest astonishment and wel
comed us with great protestations of our tak
ing her unawares. Yet Mrs. Ching Ling was
arrayed in all her glory with a blouse of lav
ender brocade lined with yellow satin, and
trousers of dark blue silk, while her comb al
1 ttle two inch feet were cased in red shoes
covered with gilt and gold embroidery. Her
glo sy black hair was dressed in the most
elaborate butterfly wings, glued into the air
in grei t loops and stui k full of long gold pins
and combs and jade ornaments. A faint
flush of rouge covered her eyelids and high
cheek-bones, and her lower lips was red
dei e.l in a broad line of the deepest carna
tion. Iler ear-rings, finger-rings and brace
lets were of heavy gold and jade, and she
twirled an embroidered handkerchief in her
hands.
She had all the little nirs and affectations
of a woman of society and fash on, and gig
gled deligh'edly when my friend put her
broad Chicago f< ol bes do Mrs. Ching Ling’s
diminutive slipper, and made a great panto
mime of dismay Through the interpreter
we complimented her uni lushingly and with
out stint, and the two Chinese ladies whom
she had invited to meet us joined in the mer
riinent like children. Her friends, Mrs. Lee
Ti and Mrs. Ching Chung Chow, had large
feet, and spoke even less English than the
hostess, and while we examine I and praised
their t< ilets, the three Celestial dames re
turned the compliment, and through the in
terpreter we ha 1 a great discussion as to the
rival costuming of nations.
A PICTURESQUE GROUP.

Then Mrs. Ching Ling hobbled across to
her tea-table, her middle-aged serving
woman brought in the beautiful teajiot
steaming in its basket cosy, and thin, dainty
cup* of choicest oolong were handed us by
the hostess herself. Cakes, fruits ginger and
lychee nut* were offered, and in deference to
our supposed barbaric tastes
sugar was passed round for the tea, and we
were rewarded for declining it by the great
approval of the group. The three gorgeously
dressed ladies of high degree, the aged
duenna in her dark-blue cotton dress and
tight black cap, and the three little children
in their quaint costumes made a picture; and
when we had the interpreter tell the ladies
that we were only too *orry that we could
not have a photograph of them just as they
were, so as always to see the picturesque
group, they laughed and chattered in strange
gutturals together.
Of the three, Mrs. Lee Ti, th® vice consul’s
second wife, wa* an unusually pretty woman
judged by any standard. Even without
SJ>eaking or understanding their ton<pie, we
could guess something of her attitude to
wards her bluer-blooded predecessor, Mrs.
Ching Ling. It is not in human nature,
Mormon or Chinese, for women to get along
amiably together in such circumstances, and
although these well-bred ladies of Chinese
rank did net pull hair in our sight, a cer
tain indifference and unconsciousness of the
other’s presence, and a blank fixity of gnze
when the other held the floor, betrayed the
sisterly feelings of the first and second
wives.

London police are now allowed to carry
revolvers, but only at night.

JOHN F. LEARY,

ALES, WINES,

LIQUORS M 0 CIGARS.

38 CITY SQUARE,

WILLIAM B. WOODRUFF,

OPTICIAN.

50 Bromfield Street,

J. A. LEW,
fl Winthrop Street, Charlestown.
[First door from Main Street.]
Gents’ clothing cleansed. <lyed and repaired.
Ladies’ heavy cloaks and sacks steamed and
pressed. Clothing called for anti returned.
Prices for cleansing anti pressing: Overcoat,
$1.25; under coat, $1.00; pants or vest, 50 cent*.
ROCK
Will cure CONSUMPTION, COUGHS, ASTHMA.
BRONCHITIS, and all diseases of the THROAT
OR LUNGS. For CROUP it is unsurpassed. It
will PREVENT CHILLS and FEVER, DEBIL
ITY, etc. Physicians recommend it. The tem
perance people approve it for the good it doe*
them. Try it amt you will never l>e without it in
your family. All Druggists.
FISHER &#38; FAIRBANKS,
19 Exchange St.. Boston.
JOHN READE,
REAL ESTATE &#38; AUCTIONEER,
187 Milin Street, Charlestown.
HOUSES AND LAND FOR SALE
BOSTON, EVERETT AND NEWTON.
PHIL CHASE,
WINES &#38; LIQUORS,
260 Main Street.
Call into the Neatest, Clean
est and Cosiest
DINING ROOM
In the District and get a
GOOD DINNER lor 25 CENTS.
Boarding and Lodging by the Day or Week.
MEALS AT ALL HOURS.
A gentlemen’s Saloon connected, with th*
choicest Ales, Liquors and Cigars.
MRS. J. F. GREEN.
7 and 9 Chelsea Street.
MARSHALL’S
COUCH SYRUP,
A Preparation of WILD CHERRY AND TAR,
which lias been largely use<l in this district dur
ing the past five years, giving satisfaction in
every case tried.
MARSHALL’S
Extract of Jamaica Cinger
and Sweet Flag Root,
The best compound of Ginger in the Market.
MARSHALL’S,
Cor. Everett and Bunker Hill Streets.
WILSON BROTHERS,
WHOLESALE AND RETAIL DEALERS
CIGARS, TOBACCO,
PIPES, ETC.
41 Bunkov Hill Street.
E. GOODWIN,
SLATE and TIN ROOFER,
61 HARVARD ST., CHARLESTOWN.
Jobbing done in the best manner at reasonable
rates.
Particular attention given to leaky roofs.
Residence, - 15 Lincoln Sruicrr.
DOHERTY BROTHERS,
ALES, PORTERS, LIQUORS AND
CIGARS.
19 AND 81 BUNKER HiLL STREET,
Charlestown,
95 Endicott Street, Boston.
~~THO M AS~F? B UTL E R,“
CHOICE WINES AND LIQUORS,
Ales and Lager Beer.
Bottled Liquors for family use.
135 Bunker Hili Street.
JOHN J. FITZPATRICK,
I MANU FACT IB EH OF . ’ !
CHAMBER SETS, SIBEBOARBS
AMD
CHEFFONIERS. ito itg
Corner Marginal and Hawthorn Streets,*
CHELSEA, MASS. 3XKM
Ferry and cars within two blocks of the factory.
Residence, 45 Tufts street, Charlestown.


Cor. Chamber Street.8

OF LOCAL IMPORT.

The mercury was nearly dow n to
the freezing point at 2 o’clock Thursday
afternoon.

Have you been over to Boston this
week watching the bulletin boards?
A full line of Gents’ Fine Hand*
Sewed Walking Shoes and Dress Boots,
at C. F. Byam A Co.’s.

Now is the time to have your over
coat < leansed and repaired at Wilbur F.
Hatch's, tailor. No. 147 Main street, up
one flight.

The Board of Aldermen have
granted permits to occupy stables as
follows: George G. Fox. 52 Ferrin street,
opposite Jackson street, Ward 3; Har
riet Stearns. Cambridge street, near
Brighton street, Ward 4.
Louisa Bazin has been granted a
permit 1 y the Board of Aidermen to
project a bay window from 113 Bartlett
street.

The petition of Joseph Caldwell
has been granted and a permit issued
by tin Board of Aidermen allowing him
to place a steam boiler for heating pur
poses In building 305 Main street.
Kev. Pitt Dillingham delivered
the second of a series of five morning
sermons upon ‘‘Truths to which the
Unitarians bear solemn witness,” on
last Sunday morning. The subject was
“Evolution and the New Testament
upon Man."

Something new—just out —soft and
easy loots, cheap. C. F. Byain A Co.,
277 Main street.

John Wall says: “We didn’t quite
sweep them off the face of the earth”
last Tuesday.

lhe first of a series of sermons to
to be delivered under the auspices of
the Suffolk Conference of Unitarian
Churches will be preached in the Har
vard Church by Kev. James De Norman
die of Boston Highlands tomorrow even
ing. Other discourses in the series will
be delivered by Kev. M. J. Savage and
Kev. Brooke Herford.

The furniture of three of the of
ficers of the State prison at Concord has
been removed to Charlestown, and the
families of the officers will follow in the
course of a week. The removal of con
victs will be made on or about the 15th
inst.

“Zanita” at the Boston Theatre
pleases everybody, and with its excel
lent acting, charming music, splendid
scenes, magnificent pageantry and the
superb dancing of Bella and the ballet
make an entertainment worthy of uni
versal appreciation.

Dr. E. H. Capen. President of Tuft’s
College will preach in the Universalist
Church at 10.30 o'clock tomorow morn
ing.

Now is the time to order your over
coat. at Wilbur F. Hatch’s, Thompson
Square, up one flight. No. 147 Main street.

The seventh annual ball of the
milk strikers will be given in Monument
Hall on Thanksgiving Eve. The commit
tee of arrangements are Messrs. J. K.
Miller, K. J. Shaw and E. Johnson.

Thomas Lowden, an employee of
the Hoosac Tunnel Dock and Elevator
Company, fell a distance of a dozen feet,
on Monday afternoon, breaking both an
kles. He was taken to the Massachu
setts General Hospital.

There is a fine crayon portrait of
the late Captain M. J. Callahan of the
Charlestown Artillery, in Brintnall &#38;
Osgood’s window on Main street.
Conductor Kempton is a favorite
with the patrons of the night car.

The public squares and parks of
this district have never received any bet
ter attention than has been given them
by Superintendent Denehy.
A good pair of fancy cassimere
pantaloons to order from $6.00 to $ll.OO.
First-class work and trimmings. W. F.
Hatch. Thompson Square, up one flight.

C. W. Sawyer sold by auction,
Thursday, the three-story house, 13
Corey street, to Mr. John Rodden for
$1825.

Mr. John 11. Boardman has been
re-appointed as an officer at the Concord
prison.

The monthly business meeting of
the Y. M.C. A. will be held next Thurs
day.

There w ill be special services at
the Y. M. C. A. tomorrow evening at 6
p. in.

About fifty pupils already belong
to the Y. M. C. A. singing class, meeting
every Monday evening under the direc
tion of J. Albert Snow.

Mr. Charles 11. Coon will give a
Bible reading at the Winthrop Church
next Tuesday evening.
The Charlestown pastors will
preach to the young men tomorrow.
Tomorrow evening, at 7 o’clock,
in the First Parish Church. Miss Fannie
E. Morris will speak of her experience in
missionary work on the Dark Continent.
There will be speaking and impro
vised singing at the spiritual meeting in
Mystic Hall tomorrow afternoon at three
o'clock by F. A. Hatch, the blind medi
um.

Mrs. Dr. Collamore is a most cour
teous, sociable, agreeable lady, with
whom patients soon find themselves at
ease. Ladies with tender or inflamed
feet should call on her.

The photo-electrotypes of the suc
cessful candidates, on our first page, were
taken from photographs furnished us by
Mar-hail ami Soule, Hotel Pelham, who
were the photographers of last year s
State Government.

Ladies will find at C. F. Byam A’
Co.'s a full line of walking boots for fall
ami winter wear.

Mrs. Bates w ill give another of her
grand concerts at Monument hall next
Thursday evening. Messrs. Bernard
Listeman and Wolf Fries are announced
to take part. Miss Alice May Bates will
sing, and other talent will be heard.
G. O. P: Get out pilferers.

The sociables in Monument Hall
on Saturday evenings under the manage
ment of Mr. Arthur T. Hicks and aids,
are proving very enjoyable to the select
company that gather there. Messer’s
Orchestra furnish the music.
"Uncle" Joseph Leavettdied at his
residence in Malden last week, and his
funeral took place on Monday. There
was a large attendance of relatives and
friends, and a delegation from the Bos
ton Veteran Firemen’s Association was
present.

( aterer Hicks furnished quite a
number of election spreads in several
cities and towns in this vicinity.

The police were very much wear
ied by the extra duty they had to per
form on account of the election.

The wife of Mr. C. Frank Rice,
the well-known Herald reporter for this
district, is seriously ill at their residence
on Cedar street.

Mr. Willard Rice of Ward 4 took a
great deal of interest in the election.

lf you want your winter clothes
cleansed, repaired ami pressed, now is
the time to send them to W. P. Stevens,
269 Main street.

Dr. Cartee of the public library
says that equal parts of the tincture of
myrrh and cardanum seeds well mixed
is sure death to water bugs and ants.

The Middlesex railroad ran about
all the cars they had on Monday evening
to accommodate the public who went
to the city proper to review’ the Repub
lican torchlight demonstration.
Tyler Hicks of Monument Hall
has been quite busy of late in the cater
ing line. His services were in requisi
tion at the reception of Alderman-elect
Davis of Somerville on Tuesday even
ing, Mt. Hermon Lodge of Medford on
Thursday evening, and at J. Warren Bai
ley's banquet on Saturday at the Uni
versalist rooms in West Somerville.

Plaids, checks and fancy cassi
meres can be found at Wilbur F. Hatch’s,
Thompson Square, custom tailor.
There are lots of Mother Hubbard
dresses and poke bonnets to be disposed
of, now’ that the election is over. Mrs.
Lockwood’s friends don't want them.
Dr. Morris has been absent from
the city several days this w’eek.
The many friends of Councilman
Frank W. Curry will be pleased to learn
that he has returned from a sojourn in
the western portion of New* York State
much improved in health and strength.
Mr. C. P. Harrington is suffering
from a sprained leg. but was able to beat
the polls in Ward 3 on Tuesday.
Many of the Navy Yard Bosses have
been very much in doubt all this week as
to how they voted on Tuesday last. We
are quite confident that most of them
have made up their minds by this time
that they voted for Cleveland.
W. P. Stevens, 269 Main street, the
fashionable tailor, has a full line of sea
sonable goods of latest patterns in stock,
and first-class work is guaranteed.
The St. Mary’s coffee party will
take place in Monument Hall, January
7.

The Rev. Martin L. Kelley has gone
south for the winter.

The St. Francis de Sales Temper
ance Society Glee Club sang with great
success the “Anniversary Song” and the
“Image of the Rose” in Chelsea. The
members of the club are William F.
Murphy, solo; William Maginn, M. F.
Shaw, Ist tenors: Timothy W. Mahoney.
Frank Bagley, 2nd tenors; M. Flynn,
Thomas Kerr, Ist bassos; J. F. Thornton,
T. M. Dundon, 2nd bassos.
Mr. J. G. Raymond and family are
visiting friends in Canada and the Brit
sh Provinces.

The Rev. J. 11. Mansfield of Mal
den will preach at the morning service
in the Trinity Church tomorrow.

The Infant School Donation Party.

The donation party at the Infant
School and Children’s Home on Austin
street, on Saturday last, was attended by
over 150 persons, and the success of the
affair was far greater than had been con
jectured even by the most sanguine.
There was more than a generous re
sponse to the invitation given by the asso
ciation to visit the Home and donate it
such things as could be spared. To
enumerate briefly what was received,
the following is given in a disconnected
way: Towels, stockings, mittens, toys,
handkerchiefs, blankets, clothing, piece
of sheeting, coal hod and shaker, books,
brushes, tooth brushes, combs, soap,
lamps with reflectors, a painting, large
doll, rice, beans, oatmeal, barrels of
flour, potatoes, apples and squashes,
crackers, sugar, grapes, oranges, cake,
oil cloth for bath room, pitcher and
bowl, iron chairs and crib, oyster supper
for children, and $6.50 in money. The
managers surely have reasons to be
thankful for the benevolence of the
friends of the Home.

Both Legs Fractured.
Monday afternoon Thomas Louden, a
carpenter by occupation, while at w’ork
on one of the piers of the Hoosac Tun
nel Dock and Elevator Company, fell
from a stage, a distance of ten feet, and
sustained a fracture of both legs. He
was conveyed to the Massachusetts Gen-

THE CHARLESTOWN ENTERPRISE.

eral Hospital in the police ambulance.
Louden is thirty seven years old, unmar
ried, ami boarded at No. 40 Snowhill
street.

Municipal Court.

Thursday evening, Oct. 30. —Two young
men, Thomas Letford and Dennis Sul
livan entered the saloon of Mr. John
Sullivan on Bow street and stole a pocket
book containing money, car tickets and
postage stamps, all of the value of $l2.
They were heard by the proprietor, who
gave them chase, but they succeeded in
getting away. Later on in the night as Of
ficer Doyle of Divisions was passing along
Salutation street he heard two men talk
ing w ith a hack driver regarding the pay
ment of their fare and ho, thinking that
something was wrong, took the two fid
lows into custody and brought them to
Station 8 w here, on being reached, the
pocket book stolen from Mr. Sullivan
was found in their possession. As the
pocket book bore the name of the owner
word was sent to Station 15, and as a re
sult Letford ami Sullivan were brought
into this court and charged with lar
ceny. As the ease was not ready for
trial the defendants were ordered to ap
pear in court on Monday and in default
of bail were committed to jail.
Saturday, Nov. 1. —Two simple drunks
were fined the usual amount.

The continued case of John Reardon,
who was arrested by Officer Green on a
charge of breaking and entering the
store of T. F. Butler on Bunker Hill
street, in the night time, with the intent
to commit larceny, came up by assign
ment. The defendant waived examina
tion and was held for trial in the supe
rior court.

Monday, Nov. 3.—The case of Letford
and Sullivan came up and they were
each held for the superior court.
Two drunks were each fined $1 and
costs.

Tuesday, Nov. 4.—Two drunks w’ere
disposed of.

Matthew’ Corcoran was fined $5 and
costs for drunkenness, and $5 and costs
additional for breaking up the bunk in
the cell in which he was confined.

Wednesday, Nov. s.—Michael Wall,
third drunk, six months in the house of
industry.
Henry Reed was charged by Rail,
road Officei - McEleny with stealing a
coat valued at $lO, the property of D.
Crowley, and the defendant was sen
tenced to one month in the house of in
d ustry.
Thursday, Nov. 6. —Two eases of simple
drunkenness were each fined $1 and
costs.

Friday, Nov. 7. —Timothy Callahan and
Daniel Sullivan were charged by Railroad
Officer McEleny with larceny of a quan
tity of rubber hose, a nozzle and coup
ling, all of the value of $42.50, the prop
erty of the Fitchburg Railroad Company.
The defendants were found guilty, and
each was given six months in the house
of correction.
Tw’o drunks were assessed the usual
amounts.

Attempted Suicide.

At an early hour Sunday morning John
Bolan, draw-tender of the Charles River
Bridge, and Benjamin Arey rescued
Thomas Condon from drowning. It ap
pears that the man when he arrived on
Charles River Bridge had a touch of de
lirium, and climbing up on the top rail
of the fence plunged headlong into the
river. The coldness of the water brought
him to a realization of his position, and
his loud outcries w’ere heard by Messrs.
Arey and Bolan, who immediately
brought a row boat into requisition and
pulled him out. They found him cling
ing to one of the piles of the bridge, but
he was so far under the structure that
they could not get the boat close to him,
as the tide was high and running very
fast. Mr. Bolan was drenched with
water, and in his efforts to rescue Condon
nearly capsized the boat. Finally, after
great exertion, the man was hauled into
the boat and taken ashore. Officers Bar
ker and Ford of Division 15 took Condon
to the station, and as it was thought he
needed care on account of having used
too much liquor he was put into court
and fined for drunkenness. He could
not liquidate his indebtedness and was
sent to the House of Industry.

Anniversary of the St. Francis de Sales
T. A. and L- Society.

OnWednesday evening the St. Fran
cis de Sales Total Abstinence and Liter
ary Society will give their first anniver
saryin Monument Hall, and it will be one
of the notable events of the season. The
dancing will be preceded by a concert,
and judging from the talent secured by
the society it will be a very fine one.
Among the artists that will appear may
be named Mrs. L. J. Lyons, Mrs. M.
McGaragle, Mr. P. C. Shortis, the Fre
mont Quartette, (members of the society)
and the society’s glee club. This or
ganization has been remarkably suc
cessful in all its undertakings, and has
at present a large and constantly in
creasing membership. The cause it
advocates is certainly a very laudable
one, and one that deserves the hearty
support and encouragement of all.

The Soldiers’ Friends.

Wednesday evening, November 19,
there will be an entertainment in Monu
ment Hall, given under the auspices of
Abraham Lincoln Post No. 11, G. A. R.,
for the benefit of the Woman’s Relief
Corps, No. 39. The entertainment is
designated as “At the Front,” being dis
solving view s illustrative of the vivid and
realistic scenes of the War of the Rebel
lion. The views will comprise the fol
lowing: At Yorktowm; On 4he Chicka
hominy; At Fredericksburg, Gettysburg,

Atlanta, Morris Island, S. Petersburg
and Richmond. There can be no doubt
that the entertainment w ill be worth at
tending, being of value in itself, indepen
dent of the fact that the money paid for
a ticket goes to a most worthy cause.

Beturned from Ireland-

Mr. Miles Muldoon, a well-known resi
dent of this district, returned from Ire
land last Saturday. Mr. Muldoon has
been abroad about eight months.

LIST OF LETTERS

remaining in the Charlestown Branch Office for
the week ending Nov. 8, ISM:
Bailey, Miss Jane Liags. Della E Miss
Barker. Mary Mrs Leavitt,C B
Brigham, Chas M Laverty, A
Begien. Mary W Miss McFarland. Joseph
Baker, Wm A Marston, Chas C Capt.
Baker, F W Mears, Jennie L Miss
Blanchard. Eliza T Mrs Munro, Agnes R. Miss
Burcham, James Murphy, Frank
Butler, J T Newell', Fannie Miss
Brown, Alice E Miss Noble, W C 1*
Brown. Alf red Newell, Wm E
Carleton. Alice Miss O’Connell, John
Coolidge, G H O’Hare. Thomas Mrs,
Connell, Merriah Miss Odel). Sadie A Miss
Conner, Freddie D'Leary, Mary
Creighton, C L O’Hear'd, Jane Miss
Daly, Thomas Patten, S L Miss
Davis, Alvin A 2 Parritt, Cara E
Doullev, Patrick Parker. Elinore
Ellis, Eli Mrs. Porter, J N Mrs
Farnum, E P Prescott, C L
Farren, Maggie Miss Putney, Alonzo
Farrington, Dudley Perkins, Mr
Fredric, S B Quighy, John
Fachon, Emma Miss Raymond Rev.
Farrinton, D C Rice, F G
Gardy, Thomas Roberts, Jos P
Griffin, J W Reed. W V Miss
Gordan, W H Seoles, Richard
Higgins, Thomas Shaw, R J
Hathaway, J H Smith, C T
Hart, E L Sprague, W J
Haskell, Lillian Miss Sprauge, C
Howe, J G Swift, James
Hunkins, Frank Tarbox, E Mrs
Hyde, H W Torsy, John G
Kezar, Almira Mrs Tyler, Charles
Kimball, O E Wheeler, Kittie Miss
Kelley. E A Mrs Woodard. M L
Ketchum, W Mrs Young, Elory P.
Young, W

SUNDAY SERVICES.

Trinity M. E. Ghuik il High street,
opposite Elm street, Rev. R. L. Greene,
pastin’. Rev. S. 11. Mansfield of Malden
wjll preach at 10.30 a. m. ;the pastor will
preach at 3 p. m., subject: “Little things
which determine the destiny of a Child.”
Sunday school at 1.45., praise meeting at
7; prayer meeting at 7.30.
First Baptist Church, corner of
Austin and Lawrence streets. The pas
tor, Kev. Geo. E. Horr, Jr., will preach
at 10.30 a. m., subject: “Christian Work,
what it means, and how to do it,” the
ordinance of Baptism following the ser
mon. The pastor will preach in the eve
ning at 7.30., Subject “True Living.”

Monument Square Methodist Epis
copal Church, W. T. Perrin, pastor;
sermon by the pastor at 10.:’,o a. m., “Is
the young man. Absalom, safe?” Sun
day school at 1.45 ]>. m.; harvest concert
by the Sunday school at 3 p. m., attrac
tive programme,every member will please
be present; young people’s meeting at 6
p. m.; praise and prayer meeting at 7
p. m. The public are cordially invited.
First Parish Church, Harvard street,
Rev. George W. Brooks, pastor, will
preach them. “Mutual Helpfulness of
old and young Men.’’ Young people's
meeting at 6.30; speaking at 7.
Bunker Hill Baptist Church, Rev.
R. B. Moody, pastor, will preach at 10.30
a. m.; Sunday school at 1.45 p. m.;
preaching by the Rev. Mr. Gunning of
the Harvard St. Church, Boston, at 3;
Gospel service at 7 p. m.
Winthrop Church, Rev. A. S. Twom
bly, D. I), pastor; public worship, ser
mon by pastor at 10.30 a. m., Sunday
school at 1.45 p. m.; public services at
7.30, with discourse by the pastor on
“Christian duty to young Men;”
Harvard Church, (Unitarian) cor.
Main and Green streets. Rev. Pitt Dilling
ham. pastor, service at 10.30; evening
lecture at 7.30 by Rev. James De Nor
mandi, subject: “Social Purity and the
Suppression of Vice.’’
Universalist Church, Rev. Chas. F.
Lee, pastor. Divine services at 10.30,
with a sermon by the Rev. E. 11. Capen,
I). D.. President of Tufts’ College.

MARRIED.

RICH—TAYLOR—Nov 5, at the residence of the
bride’s father by the Rev Charles F Lee, Frank
J Rich and Hattie H Taylor, both of Charles
town.

DIED.

MITCHELL—November 4, Benjamin P Mitehell,
1 yr 5 mos.
WlLLARD—November 5, Samuel J Willard, 5
yrs 5 mos.
MAHAN—November 4. Margaret Mahan. 37 yrs.
BOYLE—November 4, Patrick Boyle, 48 yrs.
BROSNAHAN—November 5, Annie T Bresna
han, 20 yrs 8 mos.
BARRA N—November 5, Nancy Barran, 49 yrs.
DOLAN—November 2, Margaret Dolan, 27 yrs.
CALLAHAN—November 2, Eugene Callahan, 51

yrs.
BROWN—Nov. 4. Nellie T Brown, 35 yrs 11 mos.
LYNDE—November 6, James H Lynde, 14 yrs 6

mos.
CLEARY—November 1, James W. Cleary, 25 yr
1 mo.
PRENTISS—November 1, Elizabeth Prentiss, 60

JOHNSON—November 1, Helen D. Johnson, 5
yrs 9 mos.

BOARD OF POLICE COMMISSIONERS.
Boston. November 7, ISB4.
Notice is hereby given, under Chanter 100 of
the Public Statutes, that Charles Vossler has
applied for a transfer of license to sell intoxi
cating liquors as a Victualler of the first class,
from Nos. 11 and 13 Hayward place to 132 Main
street, C. D. in said Boston, in first and second
floor, stock in cellar of said Building.
THOMAS L. JENKS. Chairman.

SPECIAL SALE
OF ARTISTIC
PAPER HANGINGS
A LARGE STOCK OF THE
LATEST DESIGNS
—OF—
FINE, MEDIUM, AND LOW PRICED
PAPER HANGINGS.
Wholesale and Retail, as cheap as any other
store in Boston.
T. F. SWAN,
No. 12 Cornhill, - Boston.
A few doors from New Washington street.

WAYERLY FURNACE!

THOMAS GAFFNEY &#38; CO.,
RANGES and PARLOR STOVES,

164 Blackstone and 93 Union Streets,

BOSTON.

The WAVERLY FURNACE is made in all
sizes for portable and brick settings. No. 24 for
3 or 4 rooms, $42; No. 28 for 6 or 8 rooms, $55;
No. 32 for 8 or 12 rooms, $65; No. 36 for 12 or 15
rooms, $80; No. 40 for 15 or 18 rooms, $9O; No.
48 for halls and churches, $125.

FALL AND WINTER

1884-85.

We have in stock for the present season a line
of all the latest novelties in

English, Scotch and Domestic Oloths,
including English Kerseys, Chinchillas,
Meltons, Plaids, Scotch, Checks, and
Fancy Oassimeres, suitable for Fall
and Winter wear.

Parties furnishing their own doth can have it
cut, trimmed and made, guaranteeing satisfac
tion to all who may favor us with their pat
ronage.

REPAIRING AND CLEANSING

executed promptly. All our garments are
cleansed by naptha process.

Thanking customers for past favors we solicit
a continuance of the same.

WILBUR F. HATCH,
MERCHANT TAILOR,

Chambers, Thompson Square,

147 MAIN STREET

Rooms 1 and

A. B. SHEDD,
Real Estate and Auctioneer,
No. 16 City Square, Charlestown.
AUCTION SALE.
21-2 STORY FRAME HOUSE.
141 Chelsea Street, Charlestown,
Tuesday, Nov, 11, 1884, at 12.15 o'clock, noon.
POSITIVE SALE TO THE HIGHEST BIDDER,
of this very desirable property, situated in an
excellent locality. The estate contains about 750
square feet of land, upon which is a house con
taining a store and five rooms; hard door cellar
and brick underpinning. The right to the pass
age way in the rear goes with the estate.
Terms, SHOO at Sale; other Terms made
known at Sale.
HILTON BROS. &#38; CO.
Receivers and Dealers in
BUTTER, CHEESE, ECCS,
BEANS, DRIED APPLES.
PROLRIETORS OF
“TAMA CREAMERY,”
39 and 40 South Market, and 14 Chatham
Streets, Boston.
JOHN P. HILTON, JAMES M. HILTON.

GALES JI. BOWDITCH,
BLACKSMITH, MACHINIST,
AND
Carriage Builder.
Bolt cutting and Bolts of all kinds; Carriage
Painting: Jig and Circular Sawing; Wood Turn
ing; Ladder and Hose Carriage making. Iron
Fences built and repaired; and contractor for
all kinds of Iron Work.
10 Chambers Street, Charlestown.

GEORGE T. LEWIS,

240 MAIN STREET.

BUSINESS SUITS,

DRESS SUITS,

For Fall and Winter Wear.

I have a choice assortment of Foreign
and Domestic Woolens for Hie present Fall
and Winter Season, to which I invite the
attention of gentlemen. First-class Work
manship a specialty.
LEWIS’
I // PERFECT FITTING
\ TROUSERS.
I The secret of the perfect fit of
| I , I these Trousers is that they are
I I cut by a new and ingenious me-
I ' I chanical system which is an
1 i I original invention of the manu-
I I I facturer and known only to him.
\ 111 I "Warranted to fit in every case.
Try us; they will fit you or no
- charge.
GEORGE T. LEWIS,
MERCHANT TAILOB.
Mrs. Dr. Collamore,
EWII i MAGNETIC PHYSICIAN.
Surgeon Chiropodist and Manicure. Corns
extracted without pain.
—Finger Nails
YLL SHAPED, POLISHED AND
>3 BEAUTIFIED.
Electric and Vaporized Medicated Baths.
The Electro-Magnetic Cabinet is a new impor
tation for the simultaneous application of Elec
tricity and Medicated Vapor Baths to the whole
surface of the body, causing the sick to eject all
morliid secretions, relieves pain, equalizing the
forces and general circulation of all the fluids
throughout the whole system.
OFFICE 35 WINTER STREET.
Room 15. Boston.

OVERCOATS,

POLITICIANS

and all persons in need of Ballots,
Pasters, Hand Bills or any kind of
Printing for Election day or caucus night
and want it done well y quick and
will receive

ATTENTION

and have their wants supplied at shortest
notice. 18 years of personal attention to
this kind of work convinces me that

POLITICAL

Printing needs careful attention, on ac
count of the many Laws which have been
made from time to time by the Legis
lature, and can be done only by those
having experience in this special kind of

PRINTING

Gummed Pasters to be of service must
be made of the best material, so they will
not fall off while being counted; many
persons have been elected to office by the
free use of pasters, who otherwise would
be defeated. M. J.

KILEY,

who has been located at the present place
for 15 years, makes a specialty of Political
Printing, and the office will be open all
night before election. New and enlarged
machinery enables me to fill orders
promptly at

7 Spring Lane,

BOSTON.

Opp. the Post Ofßo*.

TELEPHONE 1889.

ANNOUNCEMENT.

FINE TAILORING!

FALL AID WINTER SEASON.

A large and extensive assortment of the finest

Foreign and Domestic Fabrics now in stock, to
be made up into Overcoats, Dress and Business

Suits. An early call is desirable, while the stock
is complete and unbroken.

W. P. STEVENS,

No. Main Street,

Orders taken in tin Cleaning and Repairing
line will be promptly attended to, and in a sat
isfactorv manner.

SEASON OF 1884-85.

MR. J. ALBERT SNOW

WILL RECEIVE I’t PILS AT ANY TIME

for instruction upon

PIANO, ORGAN AND VOCAL
/ CULTURE

l P<>n the most Reasonable Terms,
An experience of fifteen years as a successful
teacher enables him to offer rare inducements,
either to beginners or advanced jnipils.
Lodges, societies and private parties can be
supplied with large or small orchestra at lowest
prices. Also Soloists and large Choruses for
concerts or social gatherings.

Rooms No. 10 Austin Street.

DANCING SCHOOL,

PROF. ANTHOINE
Will receive beginners in Dancing and Deport
ment in Abbotsford Hall, Waverly House, Sat
urdays, at 1 o’clock p. m. Advanced class at 3
o’clock. Evening class in Monument Hall,
Monday evenings.

MRS. E. M. CONDELL’S

PRIVATE SCHOOL FOR

DANCING AND DEPORTMENT,

19 BALDWIN STREET,

For arrangement of classes and other infor
mation, call on or address as above.

Monument Hall

Juvenile Classes on Saturday afternoons at
at 2 o’clock.
Classes at Brookline and Jamaica Plain.

JOSHUA CALDWELL,

SIGN AND FRESCO

HOUSE,

PAINTING,

WHITENING &#38; COLORING.
48 Warren Street,
Corner of Winthrop.
  recorded_at: Wed, 18 Sep 2024 14:44:23 GMT
recorded_with: VCR 6.3.1
